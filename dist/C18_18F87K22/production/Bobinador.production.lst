

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 19 14:50:42 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F2550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  00097C                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _PWM_duty
    74  00097C  0032               	dw	50
    75                           
    76                           ;initializer for _count_3
    77  00097E  0084               	dw	132
    78                           
    79                           ;initializer for _count_1
    80  000980  0002               	dw	2
    81                           
    82                           ;initializer for _length
    83  000982  2422               	dw	9250
    84                           
    85                           ;initializer for _turns
    86  000984  0FA0               	dw	4000
    87                           
    88                           ;initializer for _zero_flag
    89  000986  01                 	db	1
    90                           
    91                           ;initializer for _MOT_4
    92  000987  01                 	db	1
    93                           
    94                           	psect	idataBANK0
    95  000994                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _motor1
    99  000994  0001               	dw	1
   100                           
   101                           ;initializer for _count_4
   102  000996  0005               	dw	5
   103                           
   104                           ;initializer for _count_2
   105  000998  0001               	dw	1
   106  0000                     _ADRES	set	4035
   107  0000                     _TMR1	set	4046
   108  0000                     _TMR0	set	4054
   109  0000                     _T2CONbits	set	4042
   110  0000                     _CCP1CONbits	set	4029
   111  0000                     _PR2	set	4043
   112  0000                     _SPBRG	set	4015
   113  0000                     _IPR1bits	set	3999
   114  0000                     _INTCON2bits	set	4081
   115  0000                     _RCONbits	set	4048
   116  0000                     _TRISBbits	set	3987
   117  0000                     _TRISCbits	set	3988
   118  0000                     _PIE1bits	set	3997
   119  0000                     _ADCON2	set	4032
   120  0000                     _ADCON0bits	set	4034
   121  0000                     _TRISAbits	set	3986
   122  0000                     _ADCON1	set	4033
   123  0000                     _LATC	set	3979
   124  0000                     _PORTC	set	3970
   125  0000                     _LATB	set	3978
   126  0000                     _PORTB	set	3969
   127  0000                     _LATA	set	3977
   128  0000                     _PORTA	set	3968
   129  0000                     _OSCCONbits	set	4051
   130  0000                     _T0CONbits	set	4053
   131  0000                     _T1CONbits	set	4045
   132  0000                     _CCPR1L	set	4030
   133  0000                     _INTCON3bits	set	4080
   134  0000                     _TXREG	set	4013
   135  0000                     _RCREG	set	4014
   136  0000                     _PORTBbits	set	3969
   137  0000                     _LATBbits	set	3978
   138  0000                     _PIR1bits	set	3998
   139  0000                     _PORTCbits	set	3970
   140  0000                     _LATCbits	set	3979
   141  0000                     _PORTAbits	set	3968
   142  0000                     _LATAbits	set	3977
   143  0000                     _INTCONbits	set	4082
   144  0000                     _TXIE	set	31980
   145  0000                     _RCIE	set	31981
   146  0000                     _RX9	set	32094
   147  0000                     _TX9	set	32102
   148  0000                     _CREN	set	32092
   149  0000                     _TXEN	set	32101
   150  0000                     _SYNC	set	32100
   151  0000                     _SPEN	set	32095
   152  0000                     _BRG16	set	32195
   153  0000                     _BRGH	set	32098
   154  0000                     _GODONE	set	32273
   155  0000                     _TXIF	set	31988
   156                           
   157                           ; #config settings
   158  0000                     
   159                           	psect	cinit
   160  00079C                     __pcinit:
   161                           	opt stack 0
   162  00079C                     start_initialization:
   163                           	opt stack 0
   164  00079C                     __initialization:
   165                           	opt stack 0
   166                           
   167                           ; Initialize objects allocated to BANK0 (6 bytes)
   168                           ; load TBLPTR registers with __pidataBANK0
   169  00079C  0E94               	movlw	low __pidataBANK0
   170  00079E  6EF6               	movwf	tblptrl,c
   171  0007A0  0E09               	movlw	high __pidataBANK0
   172  0007A2  6EF7               	movwf	tblptrh,c
   173  0007A4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   174  0007A6  6EF8               	movwf	tblptru,c
   175  0007A8  EE00  F08B         	lfsr	0,__pdataBANK0
   176  0007AC  EE10 F006          	lfsr	1,6
   177  0007B0                     copy_data0:
   178  0007B0  0009               	tblrd		*+
   179  0007B2  CFF5 FFEE          	movff	tablat,postinc0
   180  0007B6  50E5               	movf	postdec1,w,c
   181  0007B8  50E1               	movf	fsr1l,w,c
   182  0007BA  E1FA               	bnz	copy_data0
   183                           
   184                           ; Initialize objects allocated to COMRAM (12 bytes)
   185                           ; load TBLPTR registers with __pidataCOMRAM
   186  0007BC  0E7C               	movlw	low __pidataCOMRAM
   187  0007BE  6EF6               	movwf	tblptrl,c
   188  0007C0  0E09               	movlw	high __pidataCOMRAM
   189  0007C2  6EF7               	movwf	tblptrh,c
   190  0007C4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   191  0007C6  6EF8               	movwf	tblptru,c
   192  0007C8  EE00  F048         	lfsr	0,__pdataCOMRAM
   193  0007CC  EE10 F00C          	lfsr	1,12
   194  0007D0                     copy_data1:
   195  0007D0  0009               	tblrd		*+
   196  0007D2  CFF5 FFEE          	movff	tablat,postinc0
   197  0007D6  50E5               	movf	postdec1,w,c
   198  0007D8  50E1               	movf	fsr1l,w,c
   199  0007DA  E1FA               	bnz	copy_data1
   200                           
   201                           ; Clear objects allocated to BANK0 (35 bytes)
   202  0007DC  EE00  F060         	lfsr	0,__pbssBANK0
   203  0007E0  0E23               	movlw	35
   204  0007E2                     clear_0:
   205  0007E2  6AEE               	clrf	postinc0,c
   206  0007E4  06E8               	decf	wreg,f,c
   207  0007E6  E1FD               	bnz	clear_0
   208                           
   209                           ; Clear objects allocated to COMRAM (39 bytes)
   210  0007E8  EE00  F001         	lfsr	0,__pbssCOMRAM
   211  0007EC  0E27               	movlw	39
   212  0007EE                     clear_1:
   213  0007EE  6AEE               	clrf	postinc0,c
   214  0007F0  06E8               	decf	wreg,f,c
   215  0007F2  E1FD               	bnz	clear_1
   216  0007F4                     end_of_initialization:
   217                           	opt stack 0
   218  0007F4                     __end_of__initialization:
   219                           	opt stack 0
   220  0007F4  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   221  0007F6  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   222  0007F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   223  0007FA  6EF8               	movwf	tblptru,c
   224  0007FC  0100               	movlb	0
   225  0007FE  EF09  F000         	goto	_main	;jump to C main() function
   226                           tblptru	equ	0xFF8
   227                           tblptrh	equ	0xFF7
   228                           tblptrl	equ	0xFF6
   229                           tablat	equ	0xFF5
   230                           postinc0	equ	0xFEE
   231                           wreg	equ	0xFE8
   232                           postdec1	equ	0xFE5
   233                           fsr1l	equ	0xFE1
   234                           
   235                           	psect	bssCOMRAM
   236  000001                     __pbssCOMRAM:
   237                           	opt stack 0
   238  000001                     _caliber:
   239                           	opt stack 0
   240  000001                     	ds	2
   241  000003                     _turns_count:
   242                           	opt stack 0
   243  000003                     	ds	2
   244  000005                     _mot_4_steps:
   245                           	opt stack 0
   246  000005                     	ds	2
   247  000007                     _mot_3_steps:
   248                           	opt stack 0
   249  000007                     	ds	2
   250  000009                     _mot_1_steps:
   251                           	opt stack 0
   252  000009                     	ds	2
   253  00000B                     _MOT_3_count:
   254                           	opt stack 0
   255  00000B                     	ds	2
   256  00000D                     _MOT_1_count:
   257                           	opt stack 0
   258  00000D                     	ds	2
   259  00000F                     _ADC_value_press:
   260                           	opt stack 0
   261  00000F                     	ds	2
   262  000011                     _overflow:
   263                           	opt stack 0
   264  000011                     	ds	2
   265  000013                     _n:
   266                           	opt stack 0
   267  000013                     	ds	2
   268  000015                     _ADC_previous_value:
   269                           	opt stack 0
   270  000015                     	ds	2
   271  000017                     _steps_4:
   272                           	opt stack 0
   273  000017                     	ds	2
   274  000019                     _unwind_flag:
   275                           	opt stack 0
   276  000019                     	ds	1
   277  00001A                     _enable:
   278                           	opt stack 0
   279  00001A                     	ds	1
   280  00001B                     _finish_flag:
   281                           	opt stack 0
   282  00001B                     	ds	1
   283  00001C                     _param_flag:
   284                           	opt stack 0
   285  00001C                     	ds	1
   286  00001D                     _DIR_4:
   287                           	opt stack 0
   288  00001D                     	ds	1
   289  00001E                     _DIR_2:
   290                           	opt stack 0
   291  00001E                     	ds	1
   292  00001F                     _DIR_1:
   293                           	opt stack 0
   294  00001F                     	ds	1
   295  000020                     _RA0state:
   296                           	opt stack 0
   297  000020                     	ds	1
   298  000021                     _recibi:
   299                           	opt stack 0
   300  000021                     	ds	1
   301  000022                     _winding:
   302                           	opt stack 0
   303  000022                     	ds	1
   304  000023                     _move_4:
   305                           	opt stack 0
   306  000023                     	ds	1
   307  000024                     _MOT_2:
   308                           	opt stack 0
   309  000024                     	ds	1
   310  000025                     _DIR_3:
   311                           	opt stack 0
   312  000025                     	ds	1
   313  000026                     _MOT_3:
   314                           	opt stack 0
   315  000026                     	ds	1
   316  000027                     _MOT_1:
   317                           	opt stack 0
   318  000027                     	ds	1
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           postdec1	equ	0xFE5
   326                           fsr1l	equ	0xFE1
   327                           
   328                           	psect	dataCOMRAM
   329  000048                     __pdataCOMRAM:
   330                           	opt stack 0
   331  000048                     _PWM_duty:
   332                           	opt stack 0
   333  000048                     	ds	2
   334  00004A                     _count_3:
   335                           	opt stack 0
   336  00004A                     	ds	2
   337  00004C                     _count_1:
   338                           	opt stack 0
   339  00004C                     	ds	2
   340  00004E                     _length:
   341                           	opt stack 0
   342  00004E                     	ds	2
   343  000050                     _turns:
   344                           	opt stack 0
   345  000050                     	ds	2
   346  000052                     _zero_flag:
   347                           	opt stack 0
   348  000052                     	ds	1
   349  000053                     _MOT_4:
   350                           	opt stack 0
   351  000053                     	ds	1
   352                           tblptru	equ	0xFF8
   353                           tblptrh	equ	0xFF7
   354                           tblptrl	equ	0xFF6
   355                           tablat	equ	0xFF5
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           postdec1	equ	0xFE5
   359                           fsr1l	equ	0xFE1
   360                           
   361                           	psect	bssBANK0
   362  000060                     __pbssBANK0:
   363                           	opt stack 0
   364  000060                     _palabra:
   365                           	opt stack 0
   366  000060                     	ds	20
   367  000074                     _send:
   368                           	opt stack 0
   369  000074                     	ds	7
   370  00007B                     _mot_4_step_count:
   371                           	opt stack 0
   372  00007B                     	ds	2
   373  00007D                     _motor2:
   374                           	opt stack 0
   375  00007D                     	ds	2
   376  00007F                     _MOT_4_count:
   377                           	opt stack 0
   378  00007F                     	ds	2
   379  000081                     _MOT_2_count:
   380                           	opt stack 0
   381  000081                     	ds	2
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           postdec1	equ	0xFE5
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	dataBANK0
   392  00008B                     __pdataBANK0:
   393                           	opt stack 0
   394  00008B                     _motor1:
   395                           	opt stack 0
   396  00008B                     	ds	2
   397  00008D                     _count_4:
   398                           	opt stack 0
   399  00008D                     	ds	2
   400  00008F                     _count_2:
   401                           	opt stack 0
   402  00008F                     	ds	2
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           
   412                           	psect	cstackBANK0
   413  000083                     __pcstackBANK0:
   414                           	opt stack 0
   415  000083                     ?_abs:
   416                           	opt stack 0
   417  000083                     ?___wmul:
   418                           	opt stack 0
   419  000083                     trans_Char@out:
   420                           	opt stack 0
   421  000083                     speed_select@var:
   422                           	opt stack 0
   423  000083                     abs@a:
   424                           	opt stack 0
   425  000083                     ___wmul@multiplier:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x0
   429  000083                     	ds	2
   430  000085                     ??_speed_select:
   431  000085                     ??_abs:
   432  000085                     ___wmul@multiplicand:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x2
   436  000085                     	ds	2
   437  000087                     ___wmul@product:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x4
   441  000087                     	ds	2
   442  000089                     ??_main:
   443                           
   444                           ; 1 bytes @ 0x6
   445  000089                     	ds	2
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1l	equ	0xFE1
   454                           
   455                           	psect	cstackCOMRAM
   456  000028                     __pcstackCOMRAM:
   457                           	opt stack 0
   458  000028                     ?i2___wmul:
   459                           	opt stack 0
   460  000028                     i2___wmul@multiplier:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x0
   464  000028                     	ds	2
   465  00002A                     i2___wmul@multiplicand:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x2
   469  00002A                     	ds	2
   470  00002C                     i2___wmul@product:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x4
   474  00002C                     	ds	2
   475  00002E                     ?_mot_3_step_count:
   476                           	opt stack 0
   477  00002E                     mot_3_step_count@l:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x6
   481  00002E                     	ds	2
   482  000030                     mot_3_step_count@ms:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x8
   486  000030                     	ds	2
   487  000032                     ??_mot_3_step_count:
   488                           
   489                           ; 1 bytes @ 0xA
   490  000032                     	ds	2
   491  000034                     ??_high_isr:
   492                           
   493                           ; 1 bytes @ 0xC
   494  000034                     	ds	20
   495                           tblptru	equ	0xFF8
   496                           tblptrh	equ	0xFF7
   497                           tblptrl	equ	0xFF6
   498                           tablat	equ	0xFF5
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           postdec1	equ	0xFE5
   502                           fsr1l	equ	0xFE1
   503                           
   504 ;;
   505 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   506 ;;
   507 ;; *************** function _main *****************
   508 ;; Defined at:
   509 ;;		line 88 in file "main.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;		None
   512 ;; Auto vars:     Size  Location     Type
   513 ;;		None
   514 ;; Return value:  Size  Location     Type
   515 ;;                  1    wreg      void 
   516 ;; Registers used:
   517 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   523 ;;      Params:         0       0       0       0       0       0       0       0       0
   524 ;;      Locals:         0       0       0       0       0       0       0       0       0
   525 ;;      Temps:          0       2       0       0       0       0       0       0       0
   526 ;;      Totals:         0       2       0       0       0       0       0       0       0
   527 ;;Total ram usage:        2 bytes
   528 ;; Hardware stack levels required when called:    4
   529 ;; This function calls:
   530 ;;		_ConfigureOscillator
   531 ;;		_InitApp
   532 ;;		___wmul
   533 ;;		_abs
   534 ;;		_finish
   535 ;;		_reset
   536 ;;		_speed_select
   537 ;;		_trans_Char
   538 ;;		_unwind
   539 ;;		_zero_mark
   540 ;; This function is called by:
   541 ;;		Startup code after reset
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text0
   546  000012                     __ptext0:
   547                           	opt stack 0
   548  000012                     _main:
   549                           	opt stack 27
   550                           
   551                           ;main.c: 90: ConfigureOscillator();
   552                           
   553                           ;incstack = 0
   554  000012  ECC4  F004         	call	_ConfigureOscillator	;wreg free
   555                           
   556                           ;main.c: 93: InitApp();
   557  000016  EC70  F003         	call	_InitApp	;wreg free
   558  00001A                     
   559                           ;main.c: 96: CCPR1L = PWM_duty;
   560  00001A  C048  FFBE         	movff	_PWM_duty,4030	;volatile
   561                           
   562                           ;main.c: 98: LATAbits.LA2 = DIR_1;
   563  00001E  B01F               	btfsc	_DIR_1,0,c
   564  000020  D002               	bra	u1805
   565  000022  9489               	bcf	3977,2,c	;volatile
   566  000024  D001               	bra	u1806
   567  000026                     u1805:
   568  000026  8489               	bsf	3977,2,c	;volatile
   569  000028                     u1806:
   570                           
   571                           ;main.c: 99: LATAbits.LA4 = DIR_2;
   572  000028  B01E               	btfsc	_DIR_2,0,c
   573  00002A  D002               	bra	u1815
   574  00002C  9889               	bcf	3977,4,c	;volatile
   575  00002E  D001               	bra	u1816
   576  000030                     u1815:
   577  000030  8889               	bsf	3977,4,c	;volatile
   578  000032                     u1816:
   579                           
   580                           ;main.c: 100: LATCbits.LC0 = DIR_3;
   581  000032  B025               	btfsc	_DIR_3,0,c
   582  000034  D002               	bra	u1825
   583  000036  908B               	bcf	3979,0,c	;volatile
   584  000038  D001               	bra	u1826
   585  00003A                     u1825:
   586  00003A  808B               	bsf	3979,0,c	;volatile
   587  00003C                     u1826:
   588                           
   589                           ;main.c: 101: LATBbits.LB7 = DIR_4;
   590  00003C  B01D               	btfsc	_DIR_4,0,c
   591  00003E  D002               	bra	u1835
   592  000040  9E8A               	bcf	3978,7,c	;volatile
   593  000042  D001               	bra	u1836
   594  000044                     u1835:
   595  000044  8E8A               	bsf	3978,7,c	;volatile
   596  000046                     u1836:
   597                           
   598                           ;main.c: 102: LATBbits.LB5 = enable;
   599  000046  B01A               	btfsc	_enable,0,c
   600  000048  D002               	bra	u1845
   601  00004A  9A8A               	bcf	3978,5,c	;volatile
   602  00004C  D001               	bra	u1846
   603  00004E                     u1845:
   604  00004E  8A8A               	bsf	3978,5,c	;volatile
   605  000050                     u1846:
   606                           
   607                           ;main.c: 103: LATBbits.LB4 = !enable;
   608  000050  501A               	movf	_enable,w,c
   609  000052  A4D8               	btfss	status,2,c
   610  000054  D004               	goto	u1850
   611  000056  0100               	movlb	0	; () banked
   612  000058  6B89               	clrf	??_main& (0+255),b
   613  00005A  2B89               	incf	??_main& (0+255),f,b
   614  00005C  D002               	goto	u1868
   615  00005E                     u1850:
   616  00005E  0100               	movlb	0	; () banked
   617  000060  6B89               	clrf	??_main& (0+255),b
   618  000062                     u1868:
   619  000062  3B89               	swapf	??_main& (0+255),f,b
   620  000064  508A               	movf	3978,w,c	;volatile
   621  000066  1989               	xorwf	??_main& (0+255),w,b
   622  000068  0BEF               	andlw	-17
   623  00006A  1989               	xorwf	??_main& (0+255),w,b
   624  00006C  6E8A               	movwf	3978,c	;volatile
   625                           
   626                           ; BSR set to: 0
   627                           ;main.c: 105: if (recibi == 1) {
   628  00006E  0421               	decf	_recibi,w,c
   629  000070  A4D8               	btfss	status,2,c
   630  000072  D1B3               	goto	l232
   631                           
   632                           ; BSR set to: 0
   633                           ;main.c: 107: recibi = 0;
   634  000074  0E00               	movlw	0
   635  000076  6E21               	movwf	_recibi,c
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 109: if (palabra[0] == 'A') {
   639  000078  0E41               	movlw	65
   640  00007A  1960               	xorwf	_palabra& (0+255),w,b
   641  00007C  A4D8               	btfss	status,2,c
   642  00007E  D09B               	goto	l233
   643                           
   644                           ; BSR set to: 0
   645                           ;main.c: 111: caliber = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   646  000080  0ED0               	movlw	208
   647  000082  2561               	addwf	(_palabra+1)& (0+255),w,b
   648  000084  6F83               	movwf	___wmul@multiplier& (0+255),b
   649  000086  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   650  000088  0EFF               	movlw	255
   651  00008A  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   652  00008C  0E00               	movlw	0
   653  00008E  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   654  000090  0E0A               	movlw	10
   655  000092  6F85               	movwf	___wmul@multiplicand& (0+255),b
   656  000094  EC3F  F004         	call	___wmul	;wreg free
   657  000098  0100               	movlb	0	; () banked
   658  00009A  5162               	movf	(_palabra+2)& (0+255),w,b
   659  00009C  6F89               	movwf	??_main& (0+255),b
   660  00009E  6B8A               	clrf	(??_main+1)& (0+255),b
   661  0000A0  5183               	movf	?___wmul& (0+255),w,b
   662  0000A2  2789               	addwf	??_main& (0+255),f,b
   663  0000A4  5184               	movf	(?___wmul+1)& (0+255),w,b
   664  0000A6  238A               	addwfc	(??_main+1)& (0+255),f,b
   665  0000A8  0ED0               	movlw	208
   666  0000AA  2589               	addwf	??_main& (0+255),w,b
   667  0000AC  6E01               	movwf	_caliber,c
   668  0000AE  0EFF               	movlw	255
   669  0000B0  218A               	addwfc	(??_main+1)& (0+255),w,b
   670  0000B2  6E02               	movwf	_caliber+1,c
   671                           
   672                           ;main.c: 112: length = ((palabra[3] - 48) * 1000) + ((palabra[4] - 48) * 100) + ((palabr
      +                          a[5] - 48) * 10) + ((palabra[6] - 48));
   673  0000B4  0ED0               	movlw	208
   674  0000B6  2563               	addwf	(_palabra+3)& (0+255),w,b
   675  0000B8  6F83               	movwf	___wmul@multiplier& (0+255),b
   676  0000BA  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   677  0000BC  0EFF               	movlw	255
   678  0000BE  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   679  0000C0  0E03               	movlw	3
   680  0000C2  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   681  0000C4  0EE8               	movlw	232
   682  0000C6  6F85               	movwf	___wmul@multiplicand& (0+255),b
   683  0000C8  EC3F  F004         	call	___wmul	;wreg free
   684  0000CC  0100               	movlb	0	; () banked
   685  0000CE  5166               	movf	(_palabra+6)& (0+255),w,b
   686  0000D0  6F89               	movwf	??_main& (0+255),b
   687  0000D2  6B8A               	clrf	(??_main+1)& (0+255),b
   688  0000D4  5183               	movf	?___wmul& (0+255),w,b
   689  0000D6  2789               	addwf	??_main& (0+255),f,b
   690  0000D8  5184               	movf	(?___wmul+1)& (0+255),w,b
   691  0000DA  238A               	addwfc	(??_main+1)& (0+255),f,b
   692  0000DC  0ED0               	movlw	208
   693  0000DE  2564               	addwf	(_palabra+4)& (0+255),w,b
   694  0000E0  6F83               	movwf	___wmul@multiplier& (0+255),b
   695  0000E2  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   696  0000E4  0EFF               	movlw	255
   697  0000E6  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   698  0000E8  0E00               	movlw	0
   699  0000EA  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   700  0000EC  0E64               	movlw	100
   701  0000EE  6F85               	movwf	___wmul@multiplicand& (0+255),b
   702  0000F0  EC3F  F004         	call	___wmul	;wreg free
   703  0000F4  0100               	movlb	0	; () banked
   704  0000F6  5183               	movf	?___wmul& (0+255),w,b
   705  0000F8  2789               	addwf	??_main& (0+255),f,b
   706  0000FA  5184               	movf	(?___wmul+1)& (0+255),w,b
   707  0000FC  238A               	addwfc	(??_main+1)& (0+255),f,b
   708  0000FE  0ED0               	movlw	208
   709  000100  2565               	addwf	(_palabra+5)& (0+255),w,b
   710  000102  6F83               	movwf	___wmul@multiplier& (0+255),b
   711  000104  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   712  000106  0EFF               	movlw	255
   713  000108  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   714  00010A  0E00               	movlw	0
   715  00010C  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   716  00010E  0E0A               	movlw	10
   717  000110  6F85               	movwf	___wmul@multiplicand& (0+255),b
   718  000112  EC3F  F004         	call	___wmul	;wreg free
   719  000116  0100               	movlb	0	; () banked
   720  000118  5183               	movf	?___wmul& (0+255),w,b
   721  00011A  2789               	addwf	??_main& (0+255),f,b
   722  00011C  5184               	movf	(?___wmul+1)& (0+255),w,b
   723  00011E  238A               	addwfc	(??_main+1)& (0+255),f,b
   724  000120  0ED0               	movlw	208
   725  000122  2589               	addwf	??_main& (0+255),w,b
   726  000124  6E4E               	movwf	_length,c
   727  000126  0EFF               	movlw	255
   728  000128  218A               	addwfc	(??_main+1)& (0+255),w,b
   729  00012A  6E4F               	movwf	_length+1,c
   730                           
   731                           ;main.c: 113: turns = ((palabra[7] - 48) * 1000) + ((palabra[8] - 48) * 100) + ((palabra
      +                          [9] - 48) * 10) + ((palabra[10] - 48));
   732  00012C  0ED0               	movlw	208
   733  00012E  2567               	addwf	(_palabra+7)& (0+255),w,b
   734  000130  6F83               	movwf	___wmul@multiplier& (0+255),b
   735  000132  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   736  000134  0EFF               	movlw	255
   737  000136  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   738  000138  0E03               	movlw	3
   739  00013A  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   740  00013C  0EE8               	movlw	232
   741  00013E  6F85               	movwf	___wmul@multiplicand& (0+255),b
   742  000140  EC3F  F004         	call	___wmul	;wreg free
   743  000144  0100               	movlb	0	; () banked
   744  000146  516A               	movf	(_palabra+10)& (0+255),w,b
   745  000148  6F89               	movwf	??_main& (0+255),b
   746  00014A  6B8A               	clrf	(??_main+1)& (0+255),b
   747  00014C  5183               	movf	?___wmul& (0+255),w,b
   748  00014E  2789               	addwf	??_main& (0+255),f,b
   749  000150  5184               	movf	(?___wmul+1)& (0+255),w,b
   750  000152  238A               	addwfc	(??_main+1)& (0+255),f,b
   751  000154  0ED0               	movlw	208
   752  000156  2568               	addwf	(_palabra+8)& (0+255),w,b
   753  000158  6F83               	movwf	___wmul@multiplier& (0+255),b
   754  00015A  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   755  00015C  0EFF               	movlw	255
   756  00015E  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   757  000160  0E00               	movlw	0
   758  000162  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   759  000164  0E64               	movlw	100
   760  000166  6F85               	movwf	___wmul@multiplicand& (0+255),b
   761  000168  EC3F  F004         	call	___wmul	;wreg free
   762  00016C  0100               	movlb	0	; () banked
   763  00016E  5183               	movf	?___wmul& (0+255),w,b
   764  000170  2789               	addwf	??_main& (0+255),f,b
   765  000172  5184               	movf	(?___wmul+1)& (0+255),w,b
   766  000174  238A               	addwfc	(??_main+1)& (0+255),f,b
   767  000176  0ED0               	movlw	208
   768  000178  2569               	addwf	(_palabra+9)& (0+255),w,b
   769  00017A  6F83               	movwf	___wmul@multiplier& (0+255),b
   770  00017C  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   771  00017E  0EFF               	movlw	255
   772  000180  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   773  000182  0E00               	movlw	0
   774  000184  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   775  000186  0E0A               	movlw	10
   776  000188  6F85               	movwf	___wmul@multiplicand& (0+255),b
   777  00018A  EC3F  F004         	call	___wmul	;wreg free
   778  00018E  0100               	movlb	0	; () banked
   779  000190  5183               	movf	?___wmul& (0+255),w,b
   780  000192  2789               	addwf	??_main& (0+255),f,b
   781  000194  5184               	movf	(?___wmul+1)& (0+255),w,b
   782  000196  238A               	addwfc	(??_main+1)& (0+255),f,b
   783  000198  0ED0               	movlw	208
   784  00019A  2589               	addwf	??_main& (0+255),w,b
   785  00019C  6E50               	movwf	_turns,c
   786  00019E  0EFF               	movlw	255
   787  0001A0  218A               	addwfc	(??_main+1)& (0+255),w,b
   788  0001A2  6E51               	movwf	_turns+1,c
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 115: param_flag = 1;
   792  0001A4  0E01               	movlw	1
   793  0001A6  6E1C               	movwf	_param_flag,c
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 116: speed_select(caliber);
   797  0001A8  C001  F083         	movff	_caliber,speed_select@var
   798  0001AC  C002  F084         	movff	_caliber+1,speed_select@var+1
   799  0001B0  EC01  F004         	call	_speed_select	;wreg free
   800                           
   801                           ;main.c: 117: } else if (palabra[0] == 'B') {
   802  0001B4  D11E               	goto	l278
   803  0001B6                     l233:
   804  0001B6  0E42               	movlw	66
   805  0001B8  0100               	movlb	0	; () banked
   806  0001BA  1960               	xorwf	_palabra& (0+255),w,b
   807  0001BC  A4D8               	btfss	status,2,c
   808  0001BE  D01B               	goto	l235
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 119: PWM_duty = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   812  0001C0  0ED0               	movlw	208
   813  0001C2  2561               	addwf	(_palabra+1)& (0+255),w,b
   814  0001C4  6F83               	movwf	___wmul@multiplier& (0+255),b
   815  0001C6  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   816  0001C8  0EFF               	movlw	255
   817  0001CA  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   818  0001CC  0E00               	movlw	0
   819  0001CE  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   820  0001D0  0E0A               	movlw	10
   821  0001D2  6F85               	movwf	___wmul@multiplicand& (0+255),b
   822  0001D4  EC3F  F004         	call	___wmul	;wreg free
   823  0001D8  0100               	movlb	0	; () banked
   824  0001DA  5162               	movf	(_palabra+2)& (0+255),w,b
   825  0001DC  6F89               	movwf	??_main& (0+255),b
   826  0001DE  6B8A               	clrf	(??_main+1)& (0+255),b
   827  0001E0  5183               	movf	?___wmul& (0+255),w,b
   828  0001E2  2789               	addwf	??_main& (0+255),f,b
   829  0001E4  5184               	movf	(?___wmul+1)& (0+255),w,b
   830  0001E6  238A               	addwfc	(??_main+1)& (0+255),f,b
   831  0001E8  0ED0               	movlw	208
   832  0001EA  2589               	addwf	??_main& (0+255),w,b
   833  0001EC  6E48               	movwf	_PWM_duty,c
   834  0001EE  0EFF               	movlw	255
   835  0001F0  218A               	addwfc	(??_main+1)& (0+255),w,b
   836  0001F2  6E49               	movwf	_PWM_duty+1,c
   837                           
   838                           ;main.c: 120: } else if ((palabra[0] == 'D') && (zero_flag)) {
   839  0001F4  D0FE               	goto	l278
   840  0001F6                     l235:
   841                           
   842                           ; BSR set to: 0
   843                           
   844                           ; BSR set to: 0
   845  0001F6  0E44               	movlw	68
   846  0001F8  1960               	xorwf	_palabra& (0+255),w,b
   847  0001FA  A4D8               	btfss	status,2,c
   848  0001FC  D020               	goto	l237
   849                           
   850                           ; BSR set to: 0
   851  0001FE  5052               	movf	_zero_flag,w,c
   852  000200  B4D8               	btfsc	status,2,c
   853  000202  D01D               	goto	l237
   854                           
   855                           ; BSR set to: 0
   856                           ;main.c: 122: if (palabra[1] == '0') {
   857  000204  0E30               	movlw	48
   858  000206  1961               	xorwf	(_palabra+1)& (0+255),w,b
   859  000208  A4D8               	btfss	status,2,c
   860  00020A  D004               	goto	l238
   861  00020C                     u1920:
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 124: MOT_3 = 1;
   865  00020C  0E01               	movlw	1
   866  00020E  6E26               	movwf	_MOT_3,c
   867                           
   868                           ;main.c: 125: DIR_3 = 0;
   869  000210  0E00               	movlw	0
   870  000212  D038               	goto	L3
   871  000214                     l238:
   872                           
   873                           ; BSR set to: 0
   874                           
   875                           ; BSR set to: 0
   876  000214  0E31               	movlw	49
   877  000216  1961               	xorwf	(_palabra+1)& (0+255),w,b
   878  000218  B4D8               	btfsc	status,2,c
   879  00021A  D031               	goto	L6
   880                           
   881                           ; BSR set to: 0
   882                           
   883                           ; BSR set to: 0
   884                           
   885                           ;main.c: 130: } else if (palabra[1] == '2') {
   886                           
   887                           ;main.c: 129: DIR_3 = 1;
   888                           
   889                           ; BSR set to: 0
   890                           ;main.c: 128: MOT_3 = 1;
   891  00021C  0E32               	movlw	50
   892  00021E  1961               	xorwf	(_palabra+1)& (0+255),w,b
   893  000220  B4D8               	btfsc	status,2,c
   894  000222  D05C               	goto	u2130
   895                           
   896                           ; BSR set to: 0
   897                           
   898                           ; BSR set to: 0
   899                           
   900                           ;main.c: 133: } else if (palabra[1] == '3') {
   901                           
   902                           ; BSR set to: 0
   903                           ;main.c: 132: MOT_3 = 0;
   904  000224  0E33               	movlw	51
   905  000226  1961               	xorwf	(_palabra+1)& (0+255),w,b
   906  000228  A4D8               	btfss	status,2,c
   907  00022A  D0E3               	goto	l278
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 135: if ((MOT_3 == 0) && (param_flag)) {
   911  00022C  5026               	movf	_MOT_3,w,c
   912  00022E  A4D8               	btfss	status,2,c
   913  000230  D0E0               	goto	l278
   914                           
   915                           ; BSR set to: 0
   916  000232  501C               	movf	_param_flag,w,c
   917  000234  B4D8               	btfsc	status,2,c
   918  000236  D0DD               	goto	l278
   919                           
   920                           ; BSR set to: 0
   921                           ;main.c: 137: zero_mark();
   922  000238  ECAA  F004         	call	_zero_mark	;wreg free
   923                           
   924                           ;main.c: 138: }
   925                           ;main.c: 139: }
   926                           ;main.c: 140: } else if (palabra[0] == 'Q') {
   927  00023C  D0DA               	goto	l278
   928  00023E                     l237:
   929  00023E  0E51               	movlw	81
   930  000240  0100               	movlb	0	; () banked
   931  000242  1960               	xorwf	_palabra& (0+255),w,b
   932  000244  A4D8               	btfss	status,2,c
   933  000246  D00B               	goto	l247
   934                           
   935                           ; BSR set to: 0
   936                           ;main.c: 142: if (winding) {
   937  000248  5022               	movf	_winding,w,c
   938  00024A  B4D8               	btfsc	status,2,c
   939  00024C  D004               	goto	l248
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 143: trans_Char('N');
   943  00024E  0E4E               	movlw	78
   944  000250  ECB7  F004         	call	_trans_Char
   945                           
   946                           ;main.c: 144: } else {
   947  000254  D0CE               	goto	l278
   948  000256                     l248:
   949                           
   950                           ;main.c: 145: trans_Char('Y');
   951  000256  0E59               	movlw	89
   952  000258  ECB7  F004         	call	_trans_Char
   953                           
   954                           ;main.c: 146: }
   955                           ;main.c: 147: } else if ((palabra[0] == 'D') && (unwind_flag)) {
   956  00025C  D0CA               	goto	l278
   957  00025E                     l247:
   958  00025E  0E44               	movlw	68
   959  000260  0100               	movlb	0	; () banked
   960  000262  1960               	xorwf	_palabra& (0+255),w,b
   961  000264  A4D8               	btfss	status,2,c
   962  000266  D015               	goto	l251
   963                           
   964                           ; BSR set to: 0
   965  000268  5019               	movf	_unwind_flag,w,c
   966  00026A  B4D8               	btfsc	status,2,c
   967  00026C  D012               	goto	l251
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 149: if (palabra[1] == '0') {
   971  00026E  0E30               	movlw	48
   972  000270  1961               	xorwf	(_palabra+1)& (0+255),w,b
   973  000272  B4D8               	btfsc	status,2,c
   974  000274  D7CB               	goto	u1920
   975                           
   976                           ; BSR set to: 0
   977                           
   978                           ; BSR set to: 0
   979                           
   980                           ;main.c: 153: } else if (palabra[1] == '1') {
   981                           
   982                           ;main.c: 152: DIR_3 = 0;
   983                           
   984                           ; BSR set to: 0
   985                           ;main.c: 151: MOT_3 = 1;
   986  000276  0E31               	movlw	49
   987  000278  1961               	xorwf	(_palabra+1)& (0+255),w,b
   988  00027A  A4D8               	btfss	status,2,c
   989  00027C  D005               	goto	l254
   990  00027E                     L6:
   991                           
   992                           ; BSR set to: 0
   993                           ;main.c: 155: MOT_3 = 1;
   994  00027E  0E01               	movlw	1
   995  000280  6E26               	movwf	_MOT_3,c
   996                           
   997                           ;main.c: 156: DIR_3 = 1;
   998  000282  0E01               	movlw	1
   999  000284                     L3:
  1000  000284  6E25               	movwf	_DIR_3,c
  1001                           
  1002                           ;main.c: 157: } else if (palabra[1] == '2') {
  1003  000286  D0B5               	goto	l278
  1004  000288                     l254:
  1005                           
  1006                           ; BSR set to: 0
  1007                           
  1008                           ; BSR set to: 0
  1009  000288  0E32               	movlw	50
  1010  00028A  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1011  00028C  A4D8               	btfss	status,2,c
  1012  00028E  D0B1               	goto	l278
  1013  000290  D025               	goto	u2130
  1014  000292                     l251:
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;main.c: 165: else if (palabra[0] == 'M') {
  1018                           
  1019                           ; BSR set to: 0
  1020  000292  0E4D               	movlw	77
  1021  000294  1960               	xorwf	_palabra& (0+255),w,b
  1022  000296  A4D8               	btfss	status,2,c
  1023  000298  D024               	goto	l260
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 167: if (palabra[1] == '1') {
  1027  00029A  0E31               	movlw	49
  1028  00029C  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1029  00029E  A4D8               	btfss	status,2,c
  1030  0002A0  D008               	goto	l261
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 168: MOT_1 = !MOT_1;
  1034  0002A2  5027               	movf	_MOT_1,w,c
  1035  0002A4  A4D8               	btfss	status,2,c
  1036  0002A6  D002               	goto	u2070
  1037  0002A8  0E01               	movlw	1
  1038  0002AA  D001               	goto	u2080
  1039  0002AC                     u2070:
  1040  0002AC  0E00               	movlw	0
  1041  0002AE                     u2080:
  1042  0002AE  6E27               	movwf	_MOT_1,c
  1043                           
  1044                           ;main.c: 169: } else if (palabra[1] == '2') {
  1045  0002B0  D0A0               	goto	l278
  1046  0002B2                     l261:
  1047                           
  1048                           ; BSR set to: 0
  1049                           
  1050                           ; BSR set to: 0
  1051  0002B2  0E32               	movlw	50
  1052  0002B4  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1053  0002B6  A4D8               	btfss	status,2,c
  1054  0002B8  D008               	goto	l263
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;main.c: 170: MOT_2 = !MOT_2;
  1058  0002BA  5024               	movf	_MOT_2,w,c
  1059  0002BC  A4D8               	btfss	status,2,c
  1060  0002BE  D002               	goto	u2100
  1061  0002C0  0E01               	movlw	1
  1062  0002C2  D001               	goto	u2110
  1063  0002C4                     u2100:
  1064  0002C4  0E00               	movlw	0
  1065  0002C6                     u2110:
  1066  0002C6  6E24               	movwf	_MOT_2,c
  1067                           
  1068                           ;main.c: 171: } else if (palabra[1] == '3') {
  1069  0002C8  D094               	goto	l278
  1070  0002CA                     l263:
  1071                           
  1072                           ; BSR set to: 0
  1073                           
  1074                           ; BSR set to: 0
  1075  0002CA  0E33               	movlw	51
  1076  0002CC  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1077  0002CE  A4D8               	btfss	status,2,c
  1078  0002D0  D090               	goto	l278
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;main.c: 172: MOT_3 = !MOT_3;
  1082  0002D2  5026               	movf	_MOT_3,w,c
  1083  0002D4  A4D8               	btfss	status,2,c
  1084  0002D6  D002               	goto	u2130
  1085  0002D8  0E01               	movlw	1
  1086  0002DA  D001               	goto	u2140
  1087  0002DC                     u2130:
  1088  0002DC  0E00               	movlw	0
  1089  0002DE                     u2140:
  1090  0002DE  6E26               	movwf	_MOT_3,c
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;main.c: 173: }
  1094                           ;main.c: 174: } else if (palabra[0] == 'N') {
  1095                           
  1096                           ; BSR set to: 0
  1097                           
  1098                           ; BSR set to: 0
  1099  0002E0  D088               	goto	l278
  1100  0002E2                     l260:
  1101                           
  1102                           ; BSR set to: 0
  1103                           
  1104                           ; BSR set to: 0
  1105  0002E2  0E4E               	movlw	78
  1106  0002E4  1960               	xorwf	_palabra& (0+255),w,b
  1107  0002E6  A4D8               	btfss	status,2,c
  1108  0002E8  D008               	goto	l267
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 176: enable = !enable;
  1112  0002EA  501A               	movf	_enable,w,c
  1113  0002EC  A4D8               	btfss	status,2,c
  1114  0002EE  D002               	goto	u2160
  1115  0002F0  0E01               	movlw	1
  1116  0002F2  D001               	goto	u2170
  1117  0002F4                     u2160:
  1118  0002F4  0E00               	movlw	0
  1119  0002F6                     u2170:
  1120  0002F6  6E1A               	movwf	_enable,c
  1121                           
  1122                           ;main.c: 177: } else if (palabra[0] == 'W') {
  1123  0002F8  D07C               	goto	l278
  1124  0002FA                     l267:
  1125                           
  1126                           ; BSR set to: 0
  1127                           
  1128                           ; BSR set to: 0
  1129  0002FA  0E57               	movlw	87
  1130  0002FC  1960               	xorwf	_palabra& (0+255),w,b
  1131  0002FE  A4D8               	btfss	status,2,c
  1132  000300  D003               	goto	l269
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;main.c: 179: unwind();
  1136  000302  EC9A  F004         	call	_unwind	;wreg free
  1137                           
  1138                           ;main.c: 180: } else if (palabra[0] == 'R') {
  1139  000306  D075               	goto	l278
  1140  000308                     l269:
  1141  000308  0E52               	movlw	82
  1142  00030A  0100               	movlb	0	; () banked
  1143  00030C  1960               	xorwf	_palabra& (0+255),w,b
  1144  00030E  A4D8               	btfss	status,2,c
  1145  000310  D003               	goto	l271
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;main.c: 181: reset();
  1149  000312  ECCD  F004         	call	_reset	;wreg free
  1150                           
  1151                           ;main.c: 182: } else if (palabra[0] == 'E') {
  1152  000316  D06D               	goto	l278
  1153  000318                     l271:
  1154  000318  0E45               	movlw	69
  1155  00031A  0100               	movlb	0	; () banked
  1156  00031C  1960               	xorwf	_palabra& (0+255),w,b
  1157  00031E  A4D8               	btfss	status,2,c
  1158  000320  D068               	goto	l278
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 183: if (palabra[1] == 'D') {
  1162  000322  0E44               	movlw	68
  1163  000324  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1164  000326  A4D8               	btfss	status,2,c
  1165  000328  D026               	goto	l274
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;main.c: 185: DIR_4 = 1;
  1169  00032A  0E01               	movlw	1
  1170  00032C  6E1D               	movwf	_DIR_4,c
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 186: steps_4 = ((palabra[2] - 48) * 100) + ((palabra[3] - 48) * 10) + ((palabra
      +                          [4] - 48));
  1174  00032E  0ED0               	movlw	208
  1175  000330  2562               	addwf	(_palabra+2)& (0+255),w,b
  1176  000332  6F83               	movwf	___wmul@multiplier& (0+255),b
  1177  000334  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1178  000336  0EFF               	movlw	255
  1179  000338  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1180  00033A  0E00               	movlw	0
  1181  00033C  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1182  00033E  0E64               	movlw	100
  1183  000340  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1184  000342  EC3F  F004         	call	___wmul	;wreg free
  1185  000346  0100               	movlb	0	; () banked
  1186  000348  5164               	movf	(_palabra+4)& (0+255),w,b
  1187  00034A  6F89               	movwf	??_main& (0+255),b
  1188  00034C  6B8A               	clrf	(??_main+1)& (0+255),b
  1189  00034E  5183               	movf	?___wmul& (0+255),w,b
  1190  000350  2789               	addwf	??_main& (0+255),f,b
  1191  000352  5184               	movf	(?___wmul+1)& (0+255),w,b
  1192  000354  238A               	addwfc	(??_main+1)& (0+255),f,b
  1193  000356  0ED0               	movlw	208
  1194  000358  2563               	addwf	(_palabra+3)& (0+255),w,b
  1195  00035A  6F83               	movwf	___wmul@multiplier& (0+255),b
  1196  00035C  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1197  00035E  0EFF               	movlw	255
  1198  000360  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1199  000362  0E00               	movlw	0
  1200  000364  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1201  000366  0E0A               	movlw	10
  1202  000368  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1203  00036A  EC3F  F004         	call	___wmul	;wreg free
  1204  00036E  D029               	goto	L4
  1205  000370                     l2169:
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;main.c: 187: move_4 = 1;
  1209  000370  0E01               	movlw	1
  1210  000372  6E23               	movwf	_move_4,c
  1211                           
  1212                           ;main.c: 188: } else if (palabra[1] == 'I') {
  1213  000374  D03E               	goto	l278
  1214  000376                     l274:
  1215                           
  1216                           ; BSR set to: 0
  1217                           
  1218                           ; BSR set to: 0
  1219  000376  0E49               	movlw	73
  1220  000378  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1221  00037A  A4D8               	btfss	status,2,c
  1222  00037C  D03A               	goto	l278
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 190: DIR_4 = 0;
  1226  00037E  0E00               	movlw	0
  1227  000380  6E1D               	movwf	_DIR_4,c
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 191: steps_4 = ((palabra[2] - 48) * 100) + ((palabra[3] - 48) * 10) + ((palabra
      +                          [4] - 48));
  1231  000382  0ED0               	movlw	208
  1232  000384  2562               	addwf	(_palabra+2)& (0+255),w,b
  1233  000386  6F83               	movwf	___wmul@multiplier& (0+255),b
  1234  000388  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1235  00038A  0EFF               	movlw	255
  1236  00038C  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1237  00038E  0E00               	movlw	0
  1238  000390  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1239  000392  0E64               	movlw	100
  1240  000394  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1241  000396  EC3F  F004         	call	___wmul	;wreg free
  1242  00039A  0100               	movlb	0	; () banked
  1243  00039C  5164               	movf	(_palabra+4)& (0+255),w,b
  1244  00039E  6F89               	movwf	??_main& (0+255),b
  1245  0003A0  6B8A               	clrf	(??_main+1)& (0+255),b
  1246  0003A2  5183               	movf	?___wmul& (0+255),w,b
  1247  0003A4  2789               	addwf	??_main& (0+255),f,b
  1248  0003A6  5184               	movf	(?___wmul+1)& (0+255),w,b
  1249  0003A8  238A               	addwfc	(??_main+1)& (0+255),f,b
  1250  0003AA  0ED0               	movlw	208
  1251  0003AC  2563               	addwf	(_palabra+3)& (0+255),w,b
  1252  0003AE  6F83               	movwf	___wmul@multiplier& (0+255),b
  1253  0003B0  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1254  0003B2  0EFF               	movlw	255
  1255  0003B4  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1256  0003B6  0E00               	movlw	0
  1257  0003B8  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1258  0003BA  0E0A               	movlw	10
  1259  0003BC  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1260  0003BE  EC3F  F004         	call	___wmul	;wreg free
  1261  0003C2                     L4:
  1262  0003C2  0100               	movlb	0	; () banked
  1263  0003C4  5183               	movf	?___wmul& (0+255),w,b
  1264  0003C6  2789               	addwf	??_main& (0+255),f,b
  1265  0003C8  5184               	movf	(?___wmul+1)& (0+255),w,b
  1266  0003CA  238A               	addwfc	(??_main+1)& (0+255),f,b
  1267  0003CC  0ED0               	movlw	208
  1268  0003CE  2589               	addwf	??_main& (0+255),w,b
  1269  0003D0  6E17               	movwf	_steps_4,c
  1270  0003D2  0EFF               	movlw	255
  1271  0003D4  218A               	addwfc	(??_main+1)& (0+255),w,b
  1272  0003D6  6E18               	movwf	_steps_4+1,c
  1273  0003D8  D7CB               	goto	l2169
  1274  0003DA                     l232:
  1275                           
  1276                           ; BSR set to: 0
  1277  0003DA  B2C2               	btfsc	4034,1,c	;volatile
  1278  0003DC  D00A               	goto	l278
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;main.c: 199: _delay((unsigned long)((4)*(8000000/4000.0)));
  1282  0003DE  0E0B               	movlw	11
  1283  0003E0  0100               	movlb	0	; () banked
  1284  0003E2  6F89               	movwf	??_main& (0+255),b
  1285  0003E4  0E62               	movlw	98
  1286  0003E6                     u2267:
  1287  0003E6  2EE8               	decfsz	wreg,f,c
  1288  0003E8  D7FE               	bra	u2267
  1289  0003EA  2F89               	decfsz	??_main& (0+255),f,b
  1290  0003EC  D7FC               	bra	u2267
  1291  0003EE  F000               	nop	
  1292                           
  1293                           ;main.c: 201: GODONE = 1;
  1294  0003F0  82C2               	bsf	4034,1,c	;volatile
  1295  0003F2                     l278:
  1296                           
  1297                           ;main.c: 210: }
  1298                           ;main.c: 212: if (abs(ADC_previous_value - ADC_value_press) <= 20) {
  1299  0003F2  C00F  F089         	movff	_ADC_value_press,??_main
  1300  0003F6  C010  F08A         	movff	_ADC_value_press+1,??_main+1
  1301  0003FA  0100               	movlb	0	; () banked
  1302  0003FC  1F89               	comf	??_main& (0+255),f,b
  1303  0003FE  1F8A               	comf	(??_main+1)& (0+255),f,b
  1304  000400  4B89               	infsnz	??_main& (0+255),f,b
  1305  000402  2B8A               	incf	(??_main+1)& (0+255),f,b
  1306  000404  5015               	movf	_ADC_previous_value,w,c
  1307  000406  2589               	addwf	??_main& (0+255),w,b
  1308  000408  6F83               	movwf	abs@a& (0+255),b
  1309  00040A  5016               	movf	_ADC_previous_value+1,w,c
  1310  00040C  218A               	addwfc	(??_main+1)& (0+255),w,b
  1311  00040E  6F84               	movwf	(abs@a+1)& (0+255),b
  1312  000410  EC2A  F004         	call	_abs	;wreg free
  1313  000414  0100               	movlb	0	; () banked
  1314  000416  5184               	movf	(?_abs+1)& (0+255),w,b
  1315  000418  E103               	bnz	u2241
  1316  00041A  0E15               	movlw	21
  1317  00041C  5D83               	subwf	?_abs& (0+255),w,b
  1318  00041E  B0D8               	btfsc	status,0,c
  1319  000420                     u2241:
  1320  000420  D5FC               	goto	l231
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;main.c: 214: finish();
  1324  000422  EC78  F004         	call	_finish	;wreg free
  1325  000426  D5F9               	goto	l231
  1326  000428                     __end_of_main:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           postdec1	equ	0xFE5
  1335                           fsr1l	equ	0xFE1
  1336                           status	equ	0xFD8
  1337                           
  1338 ;; *************** function _zero_mark *****************
  1339 ;; Defined at:
  1340 ;;		line 239 in file "main.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;		None
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0
  1355 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1357 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1358 ;;Total ram usage:        0 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    3
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_main
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text1
  1369  000954                     __ptext1:
  1370                           	opt stack 0
  1371  000954                     _zero_mark:
  1372                           	opt stack 27
  1373                           
  1374                           ;main.c: 241: DIR_3 = 1;
  1375                           
  1376                           ;incstack = 0
  1377  000954  0E01               	movlw	1
  1378  000956  6E25               	movwf	_DIR_3,c
  1379                           
  1380                           ;main.c: 242: T1CONbits.TMR1ON = 0;
  1381  000958  90CD               	bcf	4045,0,c	;volatile
  1382                           
  1383                           ;main.c: 243: T0CONbits.TMR0ON = 1;
  1384  00095A  8ED5               	bsf	4053,7,c	;volatile
  1385                           
  1386                           ;main.c: 244: zero_flag = 0;
  1387  00095C  0E00               	movlw	0
  1388  00095E  6E52               	movwf	_zero_flag,c
  1389                           
  1390                           ;main.c: 245: winding = 1;
  1391  000960  0E01               	movlw	1
  1392  000962  6E22               	movwf	_winding,c
  1393                           
  1394                           ;main.c: 246: MOT_1 = 1;
  1395  000964  0E01               	movlw	1
  1396  000966  6E27               	movwf	_MOT_1,c
  1397                           
  1398                           ;main.c: 247: MOT_3 = 1;
  1399  000968  0E01               	movlw	1
  1400  00096A  6E26               	movwf	_MOT_3,c
  1401  00096C  0012               	return		;funcret
  1402  00096E                     __end_of_zero_mark:
  1403                           	opt stack 0
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _unwind *****************
  1415 ;; Defined at:
  1416 ;;		line 256 in file "main.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1433 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1434 ;;Total ram usage:        0 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    3
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text2
  1445  000934                     __ptext2:
  1446                           	opt stack 0
  1447  000934                     _unwind:
  1448                           	opt stack 27
  1449                           
  1450                           ;main.c: 258: enable = !enable;
  1451                           
  1452                           ;incstack = 0
  1453  000934  501A               	movf	_enable,w,c
  1454  000936  A4D8               	btfss	status,2,c
  1455  000938  D002               	goto	u1770
  1456  00093A  0E01               	movlw	1
  1457  00093C  D001               	goto	u1780
  1458  00093E                     u1770:
  1459  00093E  0E00               	movlw	0
  1460  000940                     u1780:
  1461  000940  6E1A               	movwf	_enable,c
  1462                           
  1463                           ;main.c: 259: T1CONbits.TMR1ON = 1;
  1464  000942  80CD               	bsf	4045,0,c	;volatile
  1465                           
  1466                           ;main.c: 260: T0CONbits.TMR0ON = 0;
  1467  000944  9ED5               	bcf	4053,7,c	;volatile
  1468                           
  1469                           ;main.c: 261: MOT_3 = 0;
  1470  000946  0E00               	movlw	0
  1471  000948  6E26               	movwf	_MOT_3,c
  1472                           
  1473                           ;main.c: 262: MOT_2 = 1;
  1474  00094A  0E01               	movlw	1
  1475  00094C  6E24               	movwf	_MOT_2,c
  1476                           
  1477                           ;main.c: 263: unwind_flag = 1;
  1478  00094E  0E01               	movlw	1
  1479  000950  6E19               	movwf	_unwind_flag,c
  1480  000952  0012               	return		;funcret
  1481  000954                     __end_of_unwind:
  1482                           	opt stack 0
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function _trans_Char *****************
  1494 ;; Defined at:
  1495 ;;		line 222 in file "main.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  out             1    wreg     unsigned char 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  out             1    0[BANK0 ] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1509 ;;      Params:         0       0       0       0       0       0       0       0       0
  1510 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1512 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1513 ;;Total ram usage:        1 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    3
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;;		_send_String
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text3
  1525  00096E                     __ptext3:
  1526                           	opt stack 0
  1527  00096E                     _trans_Char:
  1528                           	opt stack 27
  1529                           
  1530                           ;incstack = 0
  1531                           ;trans_Char@out stored from wreg
  1532  00096E  0100               	movlb	0	; () banked
  1533  000970  6F83               	movwf	trans_Char@out& (0+255),b
  1534  000972                     
  1535                           ;main.c: 223: while (TXIF == 0);
  1536  000972  A89E               	btfss	3998,4,c	;volatile
  1537  000974  D7FE               	goto	l2029
  1538                           
  1539                           ;main.c: 224: TXREG = out;
  1540  000976  C083  FFAD         	movff	trans_Char@out,4013	;volatile
  1541  00097A  0012               	return		;funcret
  1542  00097C                     __end_of_trans_Char:
  1543                           	opt stack 0
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1l	equ	0xFE1
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function _speed_select *****************
  1555 ;; Defined at:
  1556 ;;		line 285 in file "main.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  var             2    0[BANK0 ] unsigned int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1570 ;;      Params:         0       2       0       0       0       0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1572 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1573 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1574 ;;Total ram usage:        4 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    3
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text4
  1585  000802                     __ptext4:
  1586                           	opt stack 0
  1587  000802                     _speed_select:
  1588                           	opt stack 27
  1589                           
  1590                           ;main.c: 287: MOT_4 = 1;
  1591                           
  1592                           ;incstack = 0
  1593  000802  0E01               	movlw	1
  1594  000804  6E53               	movwf	_MOT_4,c
  1595                           
  1596                           ;main.c: 288: DIR_4 = 0;
  1597  000806  0E00               	movlw	0
  1598  000808  6E1D               	movwf	_DIR_4,c
  1599                           
  1600                           ;main.c: 289: switch (var) {
  1601  00080A  D011               	goto	l312
  1602  00080C                     
  1603                           ;main.c: 292: count_1 = 2;
  1604  00080C  0E00               	movlw	0
  1605  00080E  6E4D               	movwf	_count_1+1,c
  1606  000810  0E02               	movlw	2
  1607  000812  6E4C               	movwf	_count_1,c
  1608                           
  1609                           ;main.c: 293: count_3 = 132;
  1610  000814  0E00               	movlw	0
  1611  000816  6E4B               	movwf	_count_3+1,c
  1612  000818  0E84               	movlw	132
  1613  00081A  6E4A               	movwf	_count_3,c
  1614                           
  1615                           ;main.c: 294: steps_4 = 200;
  1616  00081C  0E00               	movlw	0
  1617  00081E  6E18               	movwf	_steps_4+1,c
  1618  000820  0EC8               	movlw	200
  1619  000822  D003               	goto	L5
  1620  000824                     
  1621                           ;main.c: 299: steps_4 = 400;
  1622  000824  0E01               	movlw	1
  1623  000826  6E18               	movwf	_steps_4+1,c
  1624  000828  0E90               	movlw	144
  1625  00082A                     L5:
  1626  00082A  6E17               	movwf	_steps_4,c
  1627                           
  1628                           ;main.c: 300: }
  1629  00082C  D010               	goto	l314
  1630  00082E                     l312:
  1631  00082E  C083  F085         	movff	speed_select@var,??_speed_select
  1632  000832  C084  F086         	movff	speed_select@var+1,??_speed_select+1
  1633                           
  1634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1635                           ; Switch size 1, requested type "space"
  1636                           ; Number of cases is 1, Range of values is 0 to 0
  1637                           ; switch strategies available:
  1638                           ; Name         Instructions Cycles
  1639                           ; simple_byte            4     3 (average)
  1640                           ;	Chosen strategy is simple_byte
  1641  000836  0100               	movlb	0	; () banked
  1642  000838  5186               	movf	(??_speed_select+1)& (0+255),w,b
  1643  00083A  0A00               	xorlw	0	; case 0
  1644  00083C  A4D8               	btfss	status,2,c
  1645  00083E  D007               	goto	l314
  1646                           
  1647                           ; BSR set to: 0
  1648                           ; Switch size 1, requested type "space"
  1649                           ; Number of cases is 2, Range of values is 25 to 33
  1650                           ; switch strategies available:
  1651                           ; Name         Instructions Cycles
  1652                           ; simple_byte            7     4 (average)
  1653                           ;	Chosen strategy is simple_byte
  1654  000840  5185               	movf	??_speed_select& (0+255),w,b
  1655  000842  0A19               	xorlw	25	; case 25
  1656  000844  B4D8               	btfsc	status,2,c
  1657  000846  D7E2               	goto	l313
  1658  000848  0A38               	xorlw	56	; case 33
  1659  00084A  B4D8               	btfsc	status,2,c
  1660  00084C  D7EB               	goto	l315
  1661  00084E                     l314:
  1662                           
  1663                           ;main.c: 301: move_4 = 1;
  1664                           
  1665                           ; BSR set to: 0
  1666  00084E  0E01               	movlw	1
  1667  000850  6E23               	movwf	_move_4,c
  1668  000852  0012               	return		;funcret
  1669  000854                     __end_of_speed_select:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1l	equ	0xFE1
  1679                           status	equ	0xFD8
  1680                           
  1681 ;; *************** function _reset *****************
  1682 ;; Defined at:
  1683 ;;		line 279 in file "main.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		None
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1697 ;;      Params:         0       0       0       0       0       0       0       0       0
  1698 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1700 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1701 ;;Total ram usage:        0 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    3
  1704 ;; This function calls:
  1705 ;;		Nothing
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text5
  1712  00099A                     __ptext5:
  1713                           	opt stack 0
  1714  00099A                     _reset:
  1715                           	opt stack 27
  1716                           
  1717                           ;incstack = 0
  1718  00099A  00FF               	reset		;# 
  1719  00099C  0012               	return		;funcret
  1720  00099E                     __end_of_reset:
  1721                           	opt stack 0
  1722                           tblptru	equ	0xFF8
  1723                           tblptrh	equ	0xFF7
  1724                           tblptrl	equ	0xFF6
  1725                           tablat	equ	0xFF5
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           postdec1	equ	0xFE5
  1729                           fsr1l	equ	0xFE1
  1730                           status	equ	0xFD8
  1731                           
  1732 ;; *************** function _finish *****************
  1733 ;; Defined at:
  1734 ;;		line 266 in file "main.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;		None
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;		None
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0
  1749 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1751 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1752 ;;Total ram usage:        0 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    3
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text6
  1763  0008F0                     __ptext6:
  1764                           	opt stack 0
  1765  0008F0                     _finish:
  1766                           	opt stack 27
  1767                           
  1768                           ;main.c: 268: T1CONbits.TMR1ON = 1;
  1769                           
  1770                           ;incstack = 0
  1771  0008F0  80CD               	bsf	4045,0,c	;volatile
  1772                           
  1773                           ;main.c: 269: T0CONbits.TMR0ON = 0;
  1774  0008F2  9ED5               	bcf	4053,7,c	;volatile
  1775                           
  1776                           ;main.c: 270: MOT_1 = MOT_3 = 0;
  1777  0008F4  0E00               	movlw	0
  1778  0008F6  6E26               	movwf	_MOT_3,c
  1779  0008F8  C026  F027         	movff	_MOT_3,_MOT_1
  1780                           
  1781                           ;main.c: 271: winding = 0;
  1782  0008FC  0E00               	movlw	0
  1783  0008FE  6E22               	movwf	_winding,c
  1784                           
  1785                           ;main.c: 272: MOT_4 = 1;
  1786  000900  0E01               	movlw	1
  1787  000902  6E53               	movwf	_MOT_4,c
  1788                           
  1789                           ;main.c: 273: DIR_4 = 1;
  1790  000904  0E01               	movlw	1
  1791  000906  6E1D               	movwf	_DIR_4,c
  1792                           
  1793                           ;main.c: 274: move_4 = 1;
  1794  000908  0E01               	movlw	1
  1795  00090A  6E23               	movwf	_move_4,c
  1796                           
  1797                           ;main.c: 276: finish_flag = 1;
  1798  00090C  0E01               	movlw	1
  1799  00090E  6E1B               	movwf	_finish_flag,c
  1800  000910  0012               	return		;funcret
  1801  000912                     __end_of_finish:
  1802                           	opt stack 0
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           status	equ	0xFD8
  1812                           
  1813 ;; *************** function _abs *****************
  1814 ;; Defined at:
  1815 ;;		line 304 in file "main.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  a               2    0[BANK0 ] int 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    0[BANK0 ] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1829 ;;      Params:         0       2       0       0       0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1831 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1832 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    3
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text7
  1844  000854                     __ptext7:
  1845                           	opt stack 0
  1846  000854                     _abs:
  1847                           	opt stack 27
  1848                           
  1849                           ;main.c: 305: if (a >= 0) {
  1850                           
  1851                           ;incstack = 0
  1852  000854  0100               	movlb	0	; () banked
  1853  000856  BF84               	btfsc	(abs@a+1)& (0+255),7,b
  1854  000858  D005               	goto	l319
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 306: return a;
  1858  00085A  C083  F083         	movff	abs@a,?_abs
  1859  00085E  C084  F084         	movff	abs@a+1,?_abs+1
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 307: } else {
  1863  000862  0012               	return	
  1864  000864                     l319:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 308: return -a;
  1868  000864  C083  F085         	movff	abs@a,??_abs
  1869  000868  C084  F086         	movff	abs@a+1,??_abs+1
  1870  00086C  1F85               	comf	??_abs& (0+255),f,b
  1871  00086E  1F86               	comf	(??_abs+1)& (0+255),f,b
  1872  000870  4B85               	infsnz	??_abs& (0+255),f,b
  1873  000872  2B86               	incf	(??_abs+1)& (0+255),f,b
  1874  000874  C085  F083         	movff	??_abs,?_abs
  1875  000878  C086  F084         	movff	??_abs+1,?_abs+1
  1876  00087C  0012               	return	
  1877  00087E                     __end_of_abs:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function ___wmul *****************
  1890 ;; Defined at:
  1891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1894 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  product         2    4[BANK0 ] unsigned int 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  2    0[BANK0 ] unsigned int 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2, status,0, prodl, prodh
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1906 ;;      Params:         0       4       0       0       0       0       0       0       0
  1907 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1908 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1909 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1910 ;;Total ram usage:        6 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    3
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text8
  1921  00087E                     __ptext8:
  1922                           	opt stack 0
  1923  00087E                     ___wmul:
  1924                           	opt stack 27
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;incstack = 0
  1928  00087E  0100               	movlb	0	; () banked
  1929  000880  5183               	movf	___wmul@multiplier& (0+255),w,b
  1930  000882  0385               	mulwf	___wmul@multiplicand& (0+255),b
  1931  000884  CFF3 F087          	movff	prodl,___wmul@product
  1932  000888  CFF4 F088          	movff	prodh,___wmul@product+1
  1933  00088C  5183               	movf	___wmul@multiplier& (0+255),w,b
  1934  00088E  0386               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1935  000890  50F3               	movf	prodl,w,c
  1936  000892  2788               	addwf	(___wmul@product+1)& (0+255),f,b
  1937  000894  5184               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1938  000896  0385               	mulwf	___wmul@multiplicand& (0+255),b
  1939  000898  50F3               	movf	prodl,w,c
  1940  00089A  2788               	addwf	(___wmul@product+1)& (0+255),f,b
  1941                           
  1942                           ; BSR set to: 0
  1943  00089C  C087  F083         	movff	___wmul@product,?___wmul
  1944  0008A0  C088  F084         	movff	___wmul@product+1,?___wmul+1
  1945  0008A4  0012               	return	
  1946  0008A6                     __end_of___wmul:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _InitApp *****************
  1961 ;; Defined at:
  1962 ;;		line 33 in file "user.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    3
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text9
  1991  0006E0                     __ptext9:
  1992                           	opt stack 0
  1993  0006E0                     _InitApp:
  1994                           	opt stack 27
  1995                           
  1996                           ;user.c: 35: PORTA = 0;
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;incstack = 0
  2000  0006E0  0E00               	movlw	0
  2001  0006E2  6E80               	movwf	3968,c	;volatile
  2002                           
  2003                           ;user.c: 36: LATA = 0;
  2004  0006E4  0E00               	movlw	0
  2005  0006E6  6E89               	movwf	3977,c	;volatile
  2006                           
  2007                           ;user.c: 37: PORTB = 0;
  2008  0006E8  0E00               	movlw	0
  2009  0006EA  6E81               	movwf	3969,c	;volatile
  2010                           
  2011                           ;user.c: 38: LATB = 0;
  2012  0006EC  0E00               	movlw	0
  2013  0006EE  6E8A               	movwf	3978,c	;volatile
  2014                           
  2015                           ;user.c: 39: PORTC = 0;
  2016  0006F0  0E00               	movlw	0
  2017  0006F2  6E82               	movwf	3970,c	;volatile
  2018                           
  2019                           ;user.c: 40: LATC = 0;
  2020  0006F4  0E00               	movlw	0
  2021  0006F6  6E8B               	movwf	3979,c	;volatile
  2022                           
  2023                           ;user.c: 42: ADCON1 = 0b1101;
  2024  0006F8  0E0D               	movlw	13
  2025  0006FA  6EC1               	movwf	4033,c	;volatile
  2026                           
  2027                           ;user.c: 43: TRISAbits.TRISA0 = 1;
  2028  0006FC  8092               	bsf	3986,0,c	;volatile
  2029                           
  2030                           ;user.c: 44: ADCON0bits.CHS = 0;
  2031  0006FE  94C2               	bcf	4034,2,c	;volatile
  2032  000700  96C2               	bcf	4034,3,c	;volatile
  2033  000702  98C2               	bcf	4034,4,c	;volatile
  2034  000704  9AC2               	bcf	4034,5,c	;volatile
  2035                           
  2036                           ;user.c: 45: ADCON2 = 0b10101100;
  2037  000706  0EAC               	movlw	172
  2038  000708  6EC0               	movwf	4032,c	;volatile
  2039                           
  2040                           ;user.c: 46: PIE1bits.ADIE = 1;
  2041  00070A  8C9D               	bsf	3997,6,c	;volatile
  2042                           
  2043                           ;user.c: 47: PIR1bits.ADIF = 0;
  2044  00070C  9C9E               	bcf	3998,6,c	;volatile
  2045                           
  2046                           ;user.c: 48: ADCON0bits.ADON = 1;
  2047  00070E  80C2               	bsf	4034,0,c	;volatile
  2048                           
  2049                           ;user.c: 50: TRISAbits.RA2 = 0;
  2050  000710  9492               	bcf	3986,2,c	;volatile
  2051                           
  2052                           ;user.c: 51: TRISAbits.RA3 = 0;
  2053  000712  9692               	bcf	3986,3,c	;volatile
  2054                           
  2055                           ;user.c: 52: TRISAbits.RA4 = 0;
  2056  000714  9892               	bcf	3986,4,c	;volatile
  2057                           
  2058                           ;user.c: 53: TRISAbits.RA5 = 0;
  2059  000716  9A92               	bcf	3986,5,c	;volatile
  2060                           
  2061                           ;user.c: 54: TRISCbits.RC0 = 0;
  2062  000718  9094               	bcf	3988,0,c	;volatile
  2063                           
  2064                           ;user.c: 55: TRISCbits.RC1 = 0;
  2065  00071A  9294               	bcf	3988,1,c	;volatile
  2066                           
  2067                           ;user.c: 56: TRISBbits.RB7 = 0;
  2068  00071C  9E93               	bcf	3987,7,c	;volatile
  2069                           
  2070                           ;user.c: 57: TRISBbits.RB6 = 0;
  2071  00071E  9C93               	bcf	3987,6,c	;volatile
  2072                           
  2073                           ;user.c: 58: TRISCbits.RC2 = 0;
  2074  000720  9494               	bcf	3988,2,c	;volatile
  2075                           
  2076                           ;user.c: 59: TRISBbits.RB4 = 0;
  2077  000722  9893               	bcf	3987,4,c	;volatile
  2078                           
  2079                           ;user.c: 60: TRISBbits.RB5 = 0;
  2080  000724  9A93               	bcf	3987,5,c	;volatile
  2081                           
  2082                           ;user.c: 62: RCONbits.IPEN = 0;
  2083  000726  9ED0               	bcf	4048,7,c	;volatile
  2084                           
  2085                           ;user.c: 64: INTCONbits.GIE = 1;
  2086  000728  8EF2               	bsf	intcon,7,c	;volatile
  2087                           
  2088                           ;user.c: 65: INTCONbits.PEIE = 1;
  2089  00072A  8CF2               	bsf	intcon,6,c	;volatile
  2090                           
  2091                           ;user.c: 66: INTCONbits.TMR0IE = 1;
  2092  00072C  8AF2               	bsf	intcon,5,c	;volatile
  2093                           
  2094                           ;user.c: 67: INTCONbits.TMR0IF = 0;
  2095  00072E  94F2               	bcf	intcon,2,c	;volatile
  2096                           
  2097                           ;user.c: 68: INTCON2bits.TMR0IP = 1;
  2098  000730  84F1               	bsf	intcon2,2,c	;volatile
  2099                           
  2100                           ;user.c: 69: T0CONbits.T08BIT = 1;
  2101  000732  8CD5               	bsf	4053,6,c	;volatile
  2102                           
  2103                           ;user.c: 70: T0CONbits.T0CS = 0;
  2104  000734  9AD5               	bcf	4053,5,c	;volatile
  2105                           
  2106                           ;user.c: 71: T0CONbits.PSA = 0;
  2107  000736  96D5               	bcf	4053,3,c	;volatile
  2108                           
  2109                           ;user.c: 72: T0CONbits.T0PS = 0b101;
  2110  000738  50D5               	movf	4053,w,c	;volatile
  2111  00073A  0BF8               	andlw	-8
  2112  00073C  0905               	iorlw	5
  2113  00073E  6ED5               	movwf	4053,c	;volatile
  2114                           
  2115                           ;user.c: 73: T0CONbits.TMR0ON = 0;
  2116  000740  9ED5               	bcf	4053,7,c	;volatile
  2117                           
  2118                           ;user.c: 74: TMR0 = 0x6;
  2119  000742  0E00               	movlw	0
  2120  000744  6ED7               	movwf	4055,c	;volatile
  2121  000746  0E06               	movlw	6
  2122  000748  6ED6               	movwf	4054,c	;volatile
  2123                           
  2124                           ;user.c: 76: PIE1bits.TMR1IE = 1;
  2125  00074A  809D               	bsf	3997,0,c	;volatile
  2126                           
  2127                           ;user.c: 77: PIR1bits.TMR1IF = 0;
  2128  00074C  909E               	bcf	3998,0,c	;volatile
  2129                           
  2130                           ;user.c: 78: IPR1bits.TMR1IP = 1;
  2131  00074E  809F               	bsf	3999,0,c	;volatile
  2132                           
  2133                           ;user.c: 79: T1CONbits.TMR1CS = 0;
  2134  000750  92CD               	bcf	4045,1,c	;volatile
  2135                           
  2136                           ;user.c: 80: T1CONbits.T1CKPS = 0b00;
  2137  000752  0ECF               	movlw	-49
  2138  000754  16CD               	andwf	4045,f,c	;volatile
  2139                           
  2140                           ;user.c: 81: T1CONbits.TMR1ON = 1;
  2141  000756  80CD               	bsf	4045,0,c	;volatile
  2142                           
  2143                           ;user.c: 85: TRISBbits.RB1 = 1;
  2144  000758  8293               	bsf	3987,1,c	;volatile
  2145                           
  2146                           ;user.c: 86: TRISBbits.RB2 = 1;
  2147  00075A  8493               	bsf	3987,2,c	;volatile
  2148                           
  2149                           ;user.c: 87: INTCON3bits.INT1IE = 1;
  2150  00075C  86F0               	bsf	intcon3,3,c	;volatile
  2151                           
  2152                           ;user.c: 88: INTCON3bits.INT2IE = 1;
  2153  00075E  88F0               	bsf	intcon3,4,c	;volatile
  2154                           
  2155                           ;user.c: 89: INTCON3bits.INT1IF = 0;
  2156  000760  90F0               	bcf	intcon3,0,c	;volatile
  2157                           
  2158                           ;user.c: 90: INTCON3bits.INT2IF = 0;
  2159  000762  92F0               	bcf	intcon3,1,c	;volatile
  2160                           
  2161                           ;user.c: 91: INTCON2bits.INTEDG1 = 0;
  2162  000764  9AF1               	bcf	intcon2,5,c	;volatile
  2163                           
  2164                           ;user.c: 92: INTCON2bits.INTEDG2 = 0;
  2165  000766  98F1               	bcf	intcon2,4,c	;volatile
  2166                           
  2167                           ;user.c: 94: TRISCbits.RC6 = 0;
  2168  000768  9C94               	bcf	3988,6,c	;volatile
  2169                           
  2170                           ;user.c: 95: TRISCbits.RC7 = 1;
  2171  00076A  8E94               	bsf	3988,7,c	;volatile
  2172                           
  2173                           ;user.c: 96: BRGH = 1;
  2174  00076C  84AC               	bsf	4012,2,c	;volatile
  2175                           
  2176                           ;user.c: 97: BRG16 = 1;
  2177  00076E  86B8               	bsf	4024,3,c	;volatile
  2178                           
  2179                           ;user.c: 98: SPBRG = 207;
  2180  000770  0ECF               	movlw	207
  2181  000772  6EAF               	movwf	4015,c	;volatile
  2182                           
  2183                           ;user.c: 99: SPEN = 1;
  2184  000774  8EAB               	bsf	4011,7,c	;volatile
  2185                           
  2186                           ;user.c: 100: SYNC = 0;
  2187  000776  98AC               	bcf	4012,4,c	;volatile
  2188                           
  2189                           ;user.c: 101: TXEN = 1;
  2190  000778  8AAC               	bsf	4012,5,c	;volatile
  2191                           
  2192                           ;user.c: 102: CREN = 1;
  2193  00077A  88AB               	bsf	4011,4,c	;volatile
  2194                           
  2195                           ;user.c: 103: TX9 = 0;
  2196  00077C  9CAC               	bcf	4012,6,c	;volatile
  2197                           
  2198                           ;user.c: 104: RX9 = 0;
  2199  00077E  9CAB               	bcf	4011,6,c	;volatile
  2200                           
  2201                           ;user.c: 105: RCIE = 1;
  2202  000780  8A9D               	bsf	3997,5,c	;volatile
  2203                           
  2204                           ;user.c: 106: TXIE = 0;
  2205  000782  989D               	bcf	3997,4,c	;volatile
  2206                           
  2207                           ;user.c: 108: PR2 = 99;
  2208  000784  0E63               	movlw	99
  2209  000786  6ECB               	movwf	4043,c	;volatile
  2210                           
  2211                           ;user.c: 109: CCP1CONbits.DC1B = 0;
  2212  000788  0ECF               	movlw	-49
  2213  00078A  16BD               	andwf	4029,f,c	;volatile
  2214                           
  2215                           ;user.c: 110: T2CONbits.T2CKPS = 0b00;
  2216  00078C  0EFC               	movlw	-4
  2217  00078E  16CA               	andwf	4042,f,c	;volatile
  2218                           
  2219                           ;user.c: 111: T2CONbits.TMR2ON = 1;
  2220  000790  84CA               	bsf	4042,2,c	;volatile
  2221                           
  2222                           ;user.c: 112: CCP1CONbits.CCP1M = 0b1111;
  2223  000792  80BD               	bsf	4029,0,c	;volatile
  2224  000794  82BD               	bsf	4029,1,c	;volatile
  2225  000796  84BD               	bsf	4029,2,c	;volatile
  2226  000798  86BD               	bsf	4029,3,c	;volatile
  2227  00079A  0012               	return		;funcret
  2228  00079C                     __end_of_InitApp:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           prodh	equ	0xFF4
  2235                           prodl	equ	0xFF3
  2236                           intcon	equ	0xFF2
  2237                           intcon2	equ	0xFF1
  2238                           intcon3	equ	0xFF0
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           postdec1	equ	0xFE5
  2242                           fsr1l	equ	0xFE1
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _ConfigureOscillator *****************
  2246 ;; Defined at:
  2247 ;;		line 24 in file "system.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2265 ;;Total ram usage:        0 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    3
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_main
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text10
  2276  000988                     __ptext10:
  2277                           	opt stack 0
  2278  000988                     _ConfigureOscillator:
  2279                           	opt stack 27
  2280                           
  2281                           ;system.c: 27: OSCCONbits.IRCF = 0b111;
  2282                           
  2283                           ;incstack = 0
  2284  000988  88D3               	bsf	4051,4,c	;volatile
  2285  00098A  8AD3               	bsf	4051,5,c	;volatile
  2286  00098C  8CD3               	bsf	4051,6,c	;volatile
  2287                           
  2288                           ;system.c: 28: OSCCONbits.SCS = 0b11;
  2289  00098E  0E03               	movlw	3
  2290  000990  12D3               	iorwf	4051,f,c	;volatile
  2291  000992  0012               	return		;funcret
  2292  000994                     __end_of_ConfigureOscillator:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           intcon	equ	0xFF2
  2301                           intcon2	equ	0xFF1
  2302                           intcon3	equ	0xFF0
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           fsr1l	equ	0xFE1
  2307                           status	equ	0xFD8
  2308                           
  2309 ;; *************** function _high_isr *****************
  2310 ;; Defined at:
  2311 ;;		line 69 in file "interrupts.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2327 ;;      Temps:         20       0       0       0       0       0       0       0       0
  2328 ;;      Totals:        20       0       0       0       0       0       0       0       0
  2329 ;;Total ram usage:       20 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    2
  2332 ;; This function calls:
  2333 ;;		_mot_3_step_count
  2334 ;;		i2_finish
  2335 ;; This function is called by:
  2336 ;;		Interrupt level 2
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	intcode
  2341  000008                     __pintcode:
  2342                           	opt stack 0
  2343  000008                     _high_isr:
  2344                           	opt stack 27
  2345                           
  2346                           ;incstack = 0
  2347  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2348  00000A  ED14  F002         	call	int_func,f	;refresh shadow registers
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           intcon	equ	0xFF2
  2356                           intcon2	equ	0xFF1
  2357                           intcon3	equ	0xFF0
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           postdec1	equ	0xFE5
  2361                           fsr1l	equ	0xFE1
  2362                           status	equ	0xFD8
  2363                           
  2364                           	psect	intcode_body
  2365  000428                     __pintcode_body:
  2366                           	opt stack 27
  2367  000428                     int_func:
  2368                           	opt stack 27
  2369  000428  0006               	pop		; remove dummy address from shadow register refresh
  2370  00042A  CFFA F036          	movff	pclath,??_high_isr+2
  2371  00042E  CFFB F037          	movff	pclatu,??_high_isr+3
  2372  000432  CFE9 F038          	movff	fsr0l,??_high_isr+4
  2373  000436  CFEA F039          	movff	fsr0h,??_high_isr+5
  2374  00043A  CFE1 F03A          	movff	fsr1l,??_high_isr+6
  2375  00043E  CFE2 F03B          	movff	fsr1h,??_high_isr+7
  2376  000442  CFD9 F03C          	movff	fsr2l,??_high_isr+8
  2377  000446  CFDA F03D          	movff	fsr2h,??_high_isr+9
  2378  00044A  CFF3 F03E          	movff	prodl,??_high_isr+10
  2379  00044E  CFF4 F03F          	movff	prodh,??_high_isr+11
  2380  000452  CFF6 F040          	movff	tblptrl,??_high_isr+12
  2381  000456  CFF7 F041          	movff	tblptrh,??_high_isr+13
  2382  00045A  CFF8 F042          	movff	tblptru,??_high_isr+14
  2383  00045E  CFF5 F043          	movff	tablat,??_high_isr+15
  2384  000462  C054  F044         	movff	btemp,??_high_isr+16
  2385  000466  C055  F045         	movff	btemp+1,??_high_isr+17
  2386  00046A  C056  F046         	movff	btemp+2,??_high_isr+18
  2387  00046E  C057  F047         	movff	btemp+3,??_high_isr+19
  2388                           
  2389                           ;interrupts.c: 70: if (INTCONbits.TMR0IF) {
  2390  000472  A4F2               	btfss	intcon,2,c	;volatile
  2391  000474  D078               	goto	i2l97
  2392                           
  2393                           ;interrupts.c: 72: INTCONbits.TMR0IF = 0;
  2394  000476  94F2               	bcf	intcon,2,c	;volatile
  2395                           
  2396                           ;interrupts.c: 73: TMR0 = 250;
  2397  000478  0E00               	movlw	0
  2398  00047A  6ED7               	movwf	4055,c	;volatile
  2399  00047C  0EFA               	movlw	250
  2400  00047E  6ED6               	movwf	4054,c	;volatile
  2401                           
  2402                           ;interrupts.c: 74: MOT_1_count++;
  2403  000480  4A0D               	infsnz	_MOT_1_count,f,c
  2404  000482  2A0E               	incf	_MOT_1_count+1,f,c
  2405                           
  2406                           ;interrupts.c: 75: MOT_2_count++;
  2407  000484  0100               	movlb	0	; () banked
  2408  000486  4B81               	infsnz	_MOT_2_count& (0+255),f,b
  2409  000488  2B82               	incf	(_MOT_2_count+1)& (0+255),f,b
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;interrupts.c: 76: MOT_3_count++;
  2413  00048A  4A0B               	infsnz	_MOT_3_count,f,c
  2414  00048C  2A0C               	incf	_MOT_3_count+1,f,c
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;interrupts.c: 77: MOT_4_count++;
  2418  00048E  4B7F               	infsnz	_MOT_4_count& (0+255),f,b
  2419  000490  2B80               	incf	(_MOT_4_count+1)& (0+255),f,b
  2420                           
  2421                           ;interrupts.c: 79: if (MOT_1) {
  2422  000492  5027               	movf	_MOT_1,w,c
  2423  000494  B4D8               	btfsc	status,2,c
  2424  000496  D02E               	goto	i2l101
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;interrupts.c: 81: if (MOT_1_count == count_1) {
  2428  000498  504C               	movf	_count_1,w,c
  2429  00049A  180D               	xorwf	_MOT_1_count,w,c
  2430  00049C  E12B               	bnz	i2l1667
  2431  00049E  504D               	movf	_count_1+1,w,c
  2432  0004A0  180E               	xorwf	_MOT_1_count+1,w,c
  2433  0004A2  A4D8               	btfss	status,2,c
  2434  0004A4  D027               	goto	i2l101
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;interrupts.c: 82: MOT_1_count = 0;
  2438  0004A6  0E00               	movlw	0
  2439  0004A8  6E0E               	movwf	_MOT_1_count+1,c
  2440  0004AA  0E00               	movlw	0
  2441  0004AC  6E0D               	movwf	_MOT_1_count,c
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;interrupts.c: 83: LATAbits.LA3 = !PORTAbits.RA3;
  2445  0004AE  B680               	btfsc	3968,3,c	;volatile
  2446  0004B0  D003               	goto	i2u95_40
  2447  0004B2  6A34               	clrf	??_high_isr& (0+255),c
  2448  0004B4  2A34               	incf	??_high_isr& (0+255),f,c
  2449  0004B6  D001               	goto	i2u96_48
  2450  0004B8                     i2u95_40:
  2451  0004B8  6A34               	clrf	??_high_isr& (0+255),c
  2452  0004BA                     i2u96_48:
  2453  0004BA  4634               	rlncf	??_high_isr,f,c
  2454  0004BC  4634               	rlncf	??_high_isr,f,c
  2455  0004BE  4634               	rlncf	??_high_isr,f,c
  2456  0004C0  5089               	movf	3977,w,c	;volatile
  2457  0004C2  1834               	xorwf	??_high_isr,w,c
  2458  0004C4  0BF7               	andlw	-9
  2459  0004C6  1834               	xorwf	??_high_isr,w,c
  2460  0004C8  6E89               	movwf	3977,c	;volatile
  2461                           
  2462                           ;interrupts.c: 84: mot_1_steps++;
  2463  0004CA  4A09               	infsnz	_mot_1_steps,f,c
  2464  0004CC  2A0A               	incf	_mot_1_steps+1,f,c
  2465                           
  2466                           ;interrupts.c: 85: if (mot_1_steps == 200) {
  2467  0004CE  0EC8               	movlw	200
  2468  0004D0  1809               	xorwf	_mot_1_steps,w,c
  2469  0004D2  100A               	iorwf	_mot_1_steps+1,w,c
  2470  0004D4  A4D8               	btfss	status,2,c
  2471  0004D6  D006               	goto	i2l100
  2472                           
  2473                           ;interrupts.c: 87: mot_1_steps = 0;
  2474  0004D8  0E00               	movlw	0
  2475  0004DA  6E0A               	movwf	_mot_1_steps+1,c
  2476  0004DC  0E00               	movlw	0
  2477  0004DE  6E09               	movwf	_mot_1_steps,c
  2478                           
  2479                           ;interrupts.c: 88: turns_count++;
  2480  0004E0  4A03               	infsnz	_turns_count,f,c
  2481  0004E2  2A04               	incf	_turns_count+1,f,c
  2482  0004E4                     i2l100:
  2483                           
  2484                           ;interrupts.c: 89: }
  2485                           ;interrupts.c: 90: if (turns_count == turns) {
  2486  0004E4  5050               	movf	_turns,w,c
  2487  0004E6  1803               	xorwf	_turns_count,w,c
  2488  0004E8  E105               	bnz	i2l1667
  2489  0004EA  5051               	movf	_turns+1,w,c
  2490  0004EC  1804               	xorwf	_turns_count+1,w,c
  2491  0004EE  B4D8               	btfsc	status,2,c
  2492                           
  2493                           ;interrupts.c: 92: finish();
  2494  0004F0  EC89  F004         	call	i2_finish	;wreg free
  2495  0004F4                     i2l101:
  2496  0004F4                     i2l1667:
  2497                           
  2498                           ;interrupts.c: 93: }
  2499                           ;interrupts.c: 94: }
  2500                           ;interrupts.c: 95: }
  2501                           ;interrupts.c: 97: if (MOT_3) {
  2502  0004F4  5026               	movf	_MOT_3,w,c
  2503  0004F6  B4D8               	btfsc	status,2,c
  2504  0004F8  D0CD               	goto	i2l127
  2505                           
  2506                           ;interrupts.c: 99: if (MOT_3_count == count_3) {
  2507  0004FA  504A               	movf	_count_3,w,c
  2508  0004FC  180B               	xorwf	_MOT_3_count,w,c
  2509  0004FE  E103               	bnz	i2u100_41
  2510  000500  504B               	movf	_count_3+1,w,c
  2511  000502  180C               	xorwf	_MOT_3_count+1,w,c
  2512  000504  A4D8               	btfss	status,2,c
  2513  000506                     i2u100_41:
  2514  000506  D0C6               	goto	i2l127
  2515                           
  2516                           ;interrupts.c: 100: MOT_3_count = 0;
  2517  000508  0E00               	movlw	0
  2518  00050A  6E0C               	movwf	_MOT_3_count+1,c
  2519  00050C  0E00               	movlw	0
  2520  00050E  6E0B               	movwf	_MOT_3_count,c
  2521                           
  2522                           ;interrupts.c: 101: LATCbits.LC1 = !PORTCbits.RC1;
  2523  000510  B282               	btfsc	3970,1,c	;volatile
  2524  000512  D003               	goto	i2u101_40
  2525  000514  6A34               	clrf	??_high_isr& (0+255),c
  2526  000516  2A34               	incf	??_high_isr& (0+255),f,c
  2527  000518  D001               	goto	i2u102_48
  2528  00051A                     i2u101_40:
  2529  00051A  6A34               	clrf	??_high_isr& (0+255),c
  2530  00051C                     i2u102_48:
  2531  00051C  4634               	rlncf	??_high_isr,f,c
  2532  00051E  508B               	movf	3979,w,c	;volatile
  2533  000520  1834               	xorwf	??_high_isr,w,c
  2534  000522  0BFD               	andlw	-3
  2535  000524  1834               	xorwf	??_high_isr,w,c
  2536  000526  6E8B               	movwf	3979,c	;volatile
  2537                           
  2538                           ;interrupts.c: 102: mot_3_steps++;
  2539  000528  4A07               	infsnz	_mot_3_steps,f,c
  2540  00052A  2A08               	incf	_mot_3_steps+1,f,c
  2541                           
  2542                           ;interrupts.c: 104: if (mot_3_steps == mot_3_step_count(length, 1)) {
  2543  00052C  C04E  F02E         	movff	_length,mot_3_step_count@l
  2544  000530  C04F  F02F         	movff	_length+1,mot_3_step_count@l+1
  2545  000534  0E00               	movlw	0
  2546  000536  6E31               	movwf	mot_3_step_count@ms+1,c
  2547  000538  0E01               	movlw	1
  2548  00053A  6E30               	movwf	mot_3_step_count@ms,c
  2549  00053C  EC66  F004         	call	_mot_3_step_count	;wreg free
  2550  000540  5007               	movf	_mot_3_steps,w,c
  2551  000542  182E               	xorwf	?_mot_3_step_count,w,c
  2552  000544  E103               	bnz	i2u103_41
  2553  000546  5008               	movf	_mot_3_steps+1,w,c
  2554  000548  182F               	xorwf	?_mot_3_step_count+1,w,c
  2555  00054A  A4D8               	btfss	status,2,c
  2556  00054C                     i2u103_41:
  2557  00054C  D0A3               	goto	i2l127
  2558                           
  2559                           ;interrupts.c: 106: DIR_3 = !DIR_3;
  2560  00054E  5025               	movf	_DIR_3,w,c
  2561  000550  A4D8               	btfss	status,2,c
  2562  000552  D002               	goto	i2u104_40
  2563  000554  0E01               	movlw	1
  2564  000556  D001               	goto	i2u105_40
  2565  000558                     i2u104_40:
  2566  000558  0E00               	movlw	0
  2567  00055A                     i2u105_40:
  2568  00055A  6E25               	movwf	_DIR_3,c
  2569                           
  2570                           ;interrupts.c: 107: mot_3_steps = 0;
  2571  00055C  0E00               	movlw	0
  2572  00055E  6E08               	movwf	_mot_3_steps+1,c
  2573  000560  0E00               	movlw	0
  2574  000562  6E07               	movwf	_mot_3_steps,c
  2575                           
  2576                           ;interrupts.c: 108: }
  2577                           ;interrupts.c: 109: }
  2578                           ;interrupts.c: 110: }
  2579                           ;interrupts.c: 120: } else if (PIR1bits.TMR1IF) {
  2580  000564  D097               	goto	i2l127
  2581  000566                     i2l97:
  2582  000566  A09E               	btfss	3998,0,c	;volatile
  2583  000568  D04F               	goto	i2l106
  2584                           
  2585                           ;interrupts.c: 122: PIR1bits.TMR1IF = 0;
  2586  00056A  909E               	bcf	3998,0,c	;volatile
  2587                           
  2588                           ;interrupts.c: 123: TMR1 = 0xD8F0;
  2589  00056C  0ED8               	movlw	216
  2590  00056E  6ECF               	movwf	4047,c	;volatile
  2591  000570  0EF0               	movlw	240
  2592  000572  6ECE               	movwf	4046,c	;volatile
  2593                           
  2594                           ;interrupts.c: 124: if (MOT_2) {
  2595  000574  5024               	movf	_MOT_2,w,c
  2596  000576  B4D8               	btfsc	status,2,c
  2597  000578  D00D               	goto	i2l107
  2598                           
  2599                           ;interrupts.c: 126: LATAbits.LA5 = !PORTAbits.RA5;
  2600  00057A  BA80               	btfsc	3968,5,c	;volatile
  2601  00057C  D003               	goto	i2u108_40
  2602  00057E  6A34               	clrf	??_high_isr& (0+255),c
  2603  000580  2A34               	incf	??_high_isr& (0+255),f,c
  2604  000582  D001               	goto	i2u109_48
  2605  000584                     i2u108_40:
  2606  000584  6A34               	clrf	??_high_isr& (0+255),c
  2607  000586                     i2u109_48:
  2608  000586  3A34               	swapf	??_high_isr,f,c
  2609  000588  4634               	rlncf	??_high_isr,f,c
  2610  00058A  5089               	movf	3977,w,c	;volatile
  2611  00058C  1834               	xorwf	??_high_isr,w,c
  2612  00058E  0BDF               	andlw	-33
  2613  000590  1834               	xorwf	??_high_isr,w,c
  2614  000592  6E89               	movwf	3977,c	;volatile
  2615  000594                     i2l107:
  2616                           
  2617                           ;interrupts.c: 127: }
  2618                           ;interrupts.c: 129: if (MOT_3) {
  2619  000594  5026               	movf	_MOT_3,w,c
  2620  000596  B4D8               	btfsc	status,2,c
  2621  000598  D00C               	goto	i2l108
  2622                           
  2623                           ;interrupts.c: 131: LATCbits.LC1 = !PORTCbits.RC1;
  2624  00059A  B282               	btfsc	3970,1,c	;volatile
  2625  00059C  D003               	goto	i2u111_40
  2626  00059E  6A34               	clrf	??_high_isr& (0+255),c
  2627  0005A0  2A34               	incf	??_high_isr& (0+255),f,c
  2628  0005A2  D001               	goto	i2u112_48
  2629  0005A4                     i2u111_40:
  2630  0005A4  6A34               	clrf	??_high_isr& (0+255),c
  2631  0005A6                     i2u112_48:
  2632  0005A6  4634               	rlncf	??_high_isr,f,c
  2633  0005A8  508B               	movf	3979,w,c	;volatile
  2634  0005AA  1834               	xorwf	??_high_isr,w,c
  2635  0005AC  0BFD               	andlw	-3
  2636  0005AE  1834               	xorwf	??_high_isr,w,c
  2637  0005B0  6E8B               	movwf	3979,c	;volatile
  2638  0005B2                     i2l108:
  2639                           
  2640                           ;interrupts.c: 132: }
  2641                           ;interrupts.c: 134: if (MOT_4) {
  2642  0005B2  5053               	movf	_MOT_4,w,c
  2643  0005B4  B4D8               	btfsc	status,2,c
  2644  0005B6  D06E               	goto	i2l127
  2645                           
  2646                           ;interrupts.c: 136: if(move_4) {
  2647  0005B8  5023               	movf	_move_4,w,c
  2648  0005BA  B4D8               	btfsc	status,2,c
  2649  0005BC  D06B               	goto	i2l127
  2650                           
  2651                           ;interrupts.c: 137: LATBbits.LB6 = !PORTBbits.RB6;
  2652  0005BE  BC81               	btfsc	3969,6,c	;volatile
  2653  0005C0  D003               	goto	i2u115_40
  2654  0005C2  6A34               	clrf	??_high_isr& (0+255),c
  2655  0005C4  2A34               	incf	??_high_isr& (0+255),f,c
  2656  0005C6  D001               	goto	i2u116_48
  2657  0005C8                     i2u115_40:
  2658  0005C8  6A34               	clrf	??_high_isr& (0+255),c
  2659  0005CA                     i2u116_48:
  2660  0005CA  3A34               	swapf	??_high_isr,f,c
  2661  0005CC  4634               	rlncf	??_high_isr,f,c
  2662  0005CE  4634               	rlncf	??_high_isr,f,c
  2663  0005D0  508A               	movf	3978,w,c	;volatile
  2664  0005D2  1834               	xorwf	??_high_isr,w,c
  2665  0005D4  0BBF               	andlw	-65
  2666  0005D6  1834               	xorwf	??_high_isr,w,c
  2667  0005D8  6E8A               	movwf	3978,c	;volatile
  2668                           
  2669                           ;interrupts.c: 139: if (mot_4_steps == 2*steps_4) {
  2670  0005DA  C017  F034         	movff	_steps_4,??_high_isr
  2671  0005DE  C018  F035         	movff	_steps_4+1,??_high_isr+1
  2672  0005E2  90D8               	bcf	status,0,c
  2673  0005E4  3634               	rlcf	??_high_isr,f,c
  2674  0005E6  3635               	rlcf	??_high_isr+1,f,c
  2675  0005E8  5005               	movf	_mot_4_steps,w,c
  2676  0005EA  1834               	xorwf	??_high_isr,w,c
  2677  0005EC  E10A               	bnz	i2l1699
  2678  0005EE  5006               	movf	_mot_4_steps+1,w,c
  2679  0005F0  1835               	xorwf	??_high_isr+1,w,c
  2680  0005F2  A4D8               	btfss	status,2,c
  2681  0005F4  D006               	goto	i2l111
  2682                           
  2683                           ;interrupts.c: 140: move_4 = 0;
  2684  0005F6  0E00               	movlw	0
  2685  0005F8  6E23               	movwf	_move_4,c
  2686                           
  2687                           ;interrupts.c: 141: mot_4_steps = 0;
  2688  0005FA  0E00               	movlw	0
  2689  0005FC  6E06               	movwf	_mot_4_steps+1,c
  2690  0005FE  0E00               	movlw	0
  2691  000600  6E05               	movwf	_mot_4_steps,c
  2692  000602                     i2l111:
  2693  000602                     i2l1699:
  2694                           
  2695                           ;interrupts.c: 142: }
  2696                           ;interrupts.c: 143: mot_4_steps++;
  2697  000602  4A05               	infsnz	_mot_4_steps,f,c
  2698  000604  2A06               	incf	_mot_4_steps+1,f,c
  2699                           
  2700                           ;interrupts.c: 144: }
  2701                           ;interrupts.c: 145: }
  2702                           ;interrupts.c: 152: } else if (PIR1bits.RCIF) {
  2703  000606  D046               	goto	i2l127
  2704  000608                     i2l106:
  2705  000608  AA9E               	btfss	3998,5,c	;volatile
  2706  00060A  D01A               	goto	i2l113
  2707                           
  2708                           ;interrupts.c: 154: PIR1bits.RCIF = 0;
  2709  00060C  9A9E               	bcf	3998,5,c	;volatile
  2710                           
  2711                           ;interrupts.c: 155: palabra[n] = RCREG;
  2712  00060E  0E60               	movlw	low _palabra
  2713  000610  2413               	addwf	_n,w,c
  2714  000612  6ED9               	movwf	fsr2l,c
  2715  000614  0E00               	movlw	high _palabra
  2716  000616  2014               	addwfc	_n+1,w,c
  2717  000618  6EDA               	movwf	fsr2h,c
  2718  00061A  CFAE FFDF          	movff	4014,indf2	;volatile
  2719                           
  2720                           ;interrupts.c: 156: n++;
  2721  00061E  4A13               	infsnz	_n,f,c
  2722  000620  2A14               	incf	_n+1,f,c
  2723                           
  2724                           ;interrupts.c: 157: if (RCREG == '\n') {
  2725  000622  0E0A               	movlw	10
  2726  000624  18AE               	xorwf	4014,w,c	;volatile
  2727  000626  A4D8               	btfss	status,2,c
  2728  000628  D035               	goto	i2l127
  2729                           
  2730                           ;interrupts.c: 158: TXREG = palabra[0];
  2731  00062A  C060  FFAD         	movff	_palabra,4013	;volatile
  2732  00062E  A89E               	btfss	3998,4,c	;volatile
  2733  000630  D7FE               	goto	i2l116
  2734                           
  2735                           ;interrupts.c: 160: recibi = 1;
  2736  000632  0E01               	movlw	1
  2737  000634  6E21               	movwf	_recibi,c
  2738                           
  2739                           ;interrupts.c: 161: n = 0;
  2740  000636  0E00               	movlw	0
  2741  000638  6E14               	movwf	_n+1,c
  2742  00063A  0E00               	movlw	0
  2743  00063C  6E13               	movwf	_n,c
  2744                           
  2745                           ;interrupts.c: 162: }
  2746                           ;interrupts.c: 163: } else if (PIR1bits.ADIF) {
  2747  00063E  D02A               	goto	i2l127
  2748  000640                     i2l113:
  2749  000640  AC9E               	btfss	3998,6,c	;volatile
  2750  000642  D00A               	goto	i2l119
  2751                           
  2752                           ;interrupts.c: 165: PIR1bits.ADIF = 0;
  2753  000644  9C9E               	bcf	3998,6,c	;volatile
  2754                           
  2755                           ;interrupts.c: 171: ADC_previous_value = ADC_value_press;
  2756  000646  C00F  F015         	movff	_ADC_value_press,_ADC_previous_value
  2757  00064A  C010  F016         	movff	_ADC_value_press+1,_ADC_previous_value+1
  2758                           
  2759                           ;interrupts.c: 172: ADC_value_press = ADRES;
  2760  00064E  CFC3 F00F          	movff	4035,_ADC_value_press	;volatile
  2761  000652  CFC4 F010          	movff	4036,_ADC_value_press+1	;volatile
  2762                           
  2763                           ;interrupts.c: 174: } else if (INTCON3bits.INT1IF) {
  2764  000656  D01E               	goto	i2l127
  2765  000658                     i2l119:
  2766  000658  A0F0               	btfss	intcon3,0,c	;volatile
  2767  00065A  D00C               	goto	i2l121
  2768                           
  2769                           ;interrupts.c: 176: INTCON3bits.INT1IF = 0;
  2770  00065C  90F0               	bcf	intcon3,0,c	;volatile
  2771                           
  2772                           ;interrupts.c: 178: if (winding) {
  2773  00065E  5022               	movf	_winding,w,c
  2774  000660  B4D8               	btfsc	status,2,c
  2775  000662  D003               	goto	i2l122
  2776                           
  2777                           ;interrupts.c: 180: finish();
  2778  000664  EC89  F004         	call	i2_finish	;wreg free
  2779                           
  2780                           ;interrupts.c: 185: } else {
  2781  000668  D015               	goto	i2l127
  2782  00066A                     i2l122:
  2783                           
  2784                           ;interrupts.c: 187: DIR_3 = !DIR_3;
  2785  00066A  5025               	movf	_DIR_3,w,c
  2786  00066C  A4D8               	btfss	status,2,c
  2787  00066E  D010               	goto	i2u128_40
  2788  000670  0E01               	movlw	1
  2789  000672  D00F               	goto	i2u129_40
  2790  000674                     i2l121:
  2791  000674  A2F0               	btfss	intcon3,1,c	;volatile
  2792  000676  D00E               	goto	i2l127
  2793                           
  2794                           ;interrupts.c: 192: INTCON3bits.INT2IF = 0;
  2795  000678  92F0               	bcf	intcon3,1,c	;volatile
  2796                           
  2797                           ;interrupts.c: 194: if (winding) {
  2798  00067A  5022               	movf	_winding,w,c
  2799  00067C  B4D8               	btfsc	status,2,c
  2800  00067E  D003               	goto	i2l126
  2801                           
  2802                           ;interrupts.c: 196: finish();
  2803  000680  EC89  F004         	call	i2_finish	;wreg free
  2804                           
  2805                           ;interrupts.c: 201: } else {
  2806  000684  D007               	goto	i2l127
  2807  000686                     i2l126:
  2808                           
  2809                           ;interrupts.c: 203: DIR_3 = !DIR_3;
  2810  000686  5025               	movf	_DIR_3,w,c
  2811  000688  A4D8               	btfss	status,2,c
  2812  00068A  D002               	goto	i2u128_40
  2813  00068C  0E01               	movlw	1
  2814  00068E  D001               	goto	i2u129_40
  2815  000690                     i2u128_40:
  2816  000690  0E00               	movlw	0
  2817  000692                     i2u129_40:
  2818  000692  6E25               	movwf	_DIR_3,c
  2819  000694                     i2l127:
  2820  000694  C047  F057         	movff	??_high_isr+19,btemp+3
  2821  000698  C046  F056         	movff	??_high_isr+18,btemp+2
  2822  00069C  C045  F055         	movff	??_high_isr+17,btemp+1
  2823  0006A0  C044  F054         	movff	??_high_isr+16,btemp
  2824  0006A4  C043  FFF5         	movff	??_high_isr+15,tablat
  2825  0006A8  C042  FFF8         	movff	??_high_isr+14,tblptru
  2826  0006AC  C041  FFF7         	movff	??_high_isr+13,tblptrh
  2827  0006B0  C040  FFF6         	movff	??_high_isr+12,tblptrl
  2828  0006B4  C03F  FFF4         	movff	??_high_isr+11,prodh
  2829  0006B8  C03E  FFF3         	movff	??_high_isr+10,prodl
  2830  0006BC  C03D  FFDA         	movff	??_high_isr+9,fsr2h
  2831  0006C0  C03C  FFD9         	movff	??_high_isr+8,fsr2l
  2832  0006C4  C03B  FFE2         	movff	??_high_isr+7,fsr1h
  2833  0006C8  C03A  FFE1         	movff	??_high_isr+6,fsr1l
  2834  0006CC  C039  FFEA         	movff	??_high_isr+5,fsr0h
  2835  0006D0  C038  FFE9         	movff	??_high_isr+4,fsr0l
  2836  0006D4  C037  FFFB         	movff	??_high_isr+3,pclatu
  2837  0006D8  C036  FFFA         	movff	??_high_isr+2,pclath
  2838  0006DC  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2839  0006DE  0011               	retfie		f
  2840  0006E0                     __end_of_high_isr:
  2841                           	opt stack 0
  2842                           pclatu	equ	0xFFB
  2843                           pclath	equ	0xFFA
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           intcon2	equ	0xFF1
  2852                           intcon3	equ	0xFF0
  2853                           postinc0	equ	0xFEE
  2854                           fsr0h	equ	0xFEA
  2855                           fsr0l	equ	0xFE9
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1h	equ	0xFE2
  2859                           fsr1l	equ	0xFE1
  2860                           indf2	equ	0xFDF
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function i2_finish *****************
  2866 ;; Defined at:
  2867 ;;		line 266 in file "main.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2881 ;;      Params:         0       0       0       0       0       0       0       0       0
  2882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2884 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2885 ;;Total ram usage:        0 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_high_isr
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text12
  2895  000912                     __ptext12:
  2896                           	opt stack 0
  2897  000912                     i2_finish:
  2898                           	opt stack 28
  2899                           
  2900                           ;main.c: 268: T1CONbits.TMR1ON = 1;
  2901                           
  2902                           ;incstack = 0
  2903  000912  80CD               	bsf	4045,0,c	;volatile
  2904                           
  2905                           ;main.c: 269: T0CONbits.TMR0ON = 0;
  2906  000914  9ED5               	bcf	4053,7,c	;volatile
  2907                           
  2908                           ;main.c: 270: MOT_1 = MOT_3 = 0;
  2909  000916  0E00               	movlw	0
  2910  000918  6E26               	movwf	_MOT_3,c
  2911  00091A  C026  F027         	movff	_MOT_3,_MOT_1
  2912                           
  2913                           ;main.c: 271: winding = 0;
  2914  00091E  0E00               	movlw	0
  2915  000920  6E22               	movwf	_winding,c
  2916                           
  2917                           ;main.c: 272: MOT_4 = 1;
  2918  000922  0E01               	movlw	1
  2919  000924  6E53               	movwf	_MOT_4,c
  2920                           
  2921                           ;main.c: 273: DIR_4 = 1;
  2922  000926  0E01               	movlw	1
  2923  000928  6E1D               	movwf	_DIR_4,c
  2924                           
  2925                           ;main.c: 274: move_4 = 1;
  2926  00092A  0E01               	movlw	1
  2927  00092C  6E23               	movwf	_move_4,c
  2928                           
  2929                           ;main.c: 276: finish_flag = 1;
  2930  00092E  0E01               	movlw	1
  2931  000930  6E1B               	movwf	_finish_flag,c
  2932  000932  0012               	return		;funcret
  2933  000934                     __end_ofi2_finish:
  2934                           	opt stack 0
  2935                           pclatu	equ	0xFFB
  2936                           pclath	equ	0xFFA
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           prodh	equ	0xFF4
  2942                           prodl	equ	0xFF3
  2943                           intcon	equ	0xFF2
  2944                           intcon2	equ	0xFF1
  2945                           intcon3	equ	0xFF0
  2946                           postinc0	equ	0xFEE
  2947                           fsr0h	equ	0xFEA
  2948                           fsr0l	equ	0xFE9
  2949                           wreg	equ	0xFE8
  2950                           postdec1	equ	0xFE5
  2951                           fsr1h	equ	0xFE2
  2952                           fsr1l	equ	0xFE1
  2953                           indf2	equ	0xFDF
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _mot_3_step_count *****************
  2959 ;; Defined at:
  2960 ;;		line 234 in file "main.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  l               2    6[COMRAM] unsigned int 
  2963 ;;  ms              2    8[COMRAM] unsigned int 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  2    6[COMRAM] unsigned int 
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2975 ;;      Params:         4       0       0       0       0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2977 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2978 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2979 ;;Total ram usage:        6 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    1
  2982 ;; This function calls:
  2983 ;;		i2___wmul
  2984 ;; This function is called by:
  2985 ;;		_high_isr
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text13
  2990  0008CC                     __ptext13:
  2991                           	opt stack 0
  2992  0008CC                     _mot_3_step_count:
  2993                           	opt stack 27
  2994                           
  2995                           ;main.c: 236: return (ms * l) / 2;
  2996                           
  2997                           ;incstack = 0
  2998  0008CC  C030  F028         	movff	mot_3_step_count@ms,i2___wmul@multiplier
  2999  0008D0  C031  F029         	movff	mot_3_step_count@ms+1,i2___wmul@multiplier+1
  3000  0008D4  C02E  F02A         	movff	mot_3_step_count@l,i2___wmul@multiplicand
  3001  0008D8  C02F  F02B         	movff	mot_3_step_count@l+1,i2___wmul@multiplicand+1
  3002  0008DC  EC53  F004         	call	i2___wmul	;wreg free
  3003  0008E0  90D8               	bcf	status,0,c
  3004  0008E2  3029               	rrcf	?i2___wmul+1,w,c
  3005  0008E4  6E32               	movwf	??_mot_3_step_count& (0+255),c
  3006  0008E6  3028               	rrcf	?i2___wmul,w,c
  3007  0008E8  6E2E               	movwf	?_mot_3_step_count,c
  3008  0008EA  C032  F02F         	movff	??_mot_3_step_count,?_mot_3_step_count+1
  3009  0008EE  0012               	return	
  3010  0008F0                     __end_of_mot_3_step_count:
  3011                           	opt stack 0
  3012                           pclatu	equ	0xFFB
  3013                           pclath	equ	0xFFA
  3014                           tblptru	equ	0xFF8
  3015                           tblptrh	equ	0xFF7
  3016                           tblptrl	equ	0xFF6
  3017                           tablat	equ	0xFF5
  3018                           prodh	equ	0xFF4
  3019                           prodl	equ	0xFF3
  3020                           intcon	equ	0xFF2
  3021                           intcon2	equ	0xFF1
  3022                           intcon3	equ	0xFF0
  3023                           postinc0	equ	0xFEE
  3024                           fsr0h	equ	0xFEA
  3025                           fsr0l	equ	0xFE9
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1h	equ	0xFE2
  3029                           fsr1l	equ	0xFE1
  3030                           indf2	equ	0xFDF
  3031                           fsr2h	equ	0xFDA
  3032                           fsr2l	equ	0xFD9
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function i2___wmul *****************
  3036 ;; Defined at:
  3037 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  multiplier      2    0[COMRAM] unsigned int 
  3040 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  __wmul          2    4[COMRAM] unsigned int 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  2    0[COMRAM] unsigned int 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0, prodl, prodh
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3052 ;;      Params:         4       0       0       0       0       0       0       0       0
  3053 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3055 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3056 ;;Total ram usage:        6 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_mot_3_step_count
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text14
  3066  0008A6                     __ptext14:
  3067                           	opt stack 0
  3068  0008A6                     i2___wmul:
  3069                           	opt stack 27
  3070                           
  3071                           ;incstack = 0
  3072  0008A6  5028               	movf	i2___wmul@multiplier,w,c
  3073  0008A8  022A               	mulwf	i2___wmul@multiplicand,c
  3074  0008AA  CFF3 F02C          	movff	prodl,i2___wmul@product
  3075  0008AE  CFF4 F02D          	movff	prodh,i2___wmul@product+1
  3076  0008B2  5028               	movf	i2___wmul@multiplier,w,c
  3077  0008B4  022B               	mulwf	i2___wmul@multiplicand+1,c
  3078  0008B6  50F3               	movf	prodl,w,c
  3079  0008B8  262D               	addwf	i2___wmul@product+1,f,c
  3080  0008BA  5029               	movf	i2___wmul@multiplier+1,w,c
  3081  0008BC  022A               	mulwf	i2___wmul@multiplicand,c
  3082  0008BE  50F3               	movf	prodl,w,c
  3083  0008C0  262D               	addwf	i2___wmul@product+1,f,c
  3084  0008C2  C02C  F028         	movff	i2___wmul@product,?i2___wmul
  3085  0008C6  C02D  F029         	movff	i2___wmul@product+1,?i2___wmul+1
  3086  0008CA  0012               	return	
  3087  0008CC                     __end_ofi2___wmul:
  3088                           	opt stack 0
  3089  0000                     pclatu	equ	0xFFB
  3090                           pclath	equ	0xFFA
  3091                           tblptru	equ	0xFF8
  3092                           tblptrh	equ	0xFF7
  3093                           tblptrl	equ	0xFF6
  3094                           tablat	equ	0xFF5
  3095                           prodh	equ	0xFF4
  3096                           prodl	equ	0xFF3
  3097                           intcon	equ	0xFF2
  3098                           intcon2	equ	0xFF1
  3099                           intcon3	equ	0xFF0
  3100                           postinc0	equ	0xFEE
  3101                           fsr0h	equ	0xFEA
  3102                           fsr0l	equ	0xFE9
  3103                           wreg	equ	0xFE8
  3104                           postdec1	equ	0xFE5
  3105                           fsr1h	equ	0xFE2
  3106                           fsr1l	equ	0xFE1
  3107                           indf2	equ	0xFDF
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           pclatu	equ	0xFFB
  3112                           pclath	equ	0xFFA
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           intcon2	equ	0xFF1
  3121                           intcon3	equ	0xFF0
  3122                           postinc0	equ	0xFEE
  3123                           fsr0h	equ	0xFEA
  3124                           fsr0l	equ	0xFE9
  3125                           wreg	equ	0xFE8
  3126                           postdec1	equ	0xFE5
  3127                           fsr1h	equ	0xFE2
  3128                           fsr1l	equ	0xFE1
  3129                           indf2	equ	0xFDF
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134                           	psect	rparam
  3135  0000                     pclatu	equ	0xFFB
  3136                           pclath	equ	0xFFA
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           intcon2	equ	0xFF1
  3145                           intcon3	equ	0xFF0
  3146                           postinc0	equ	0xFEE
  3147                           fsr0h	equ	0xFEA
  3148                           fsr0l	equ	0xFE9
  3149                           wreg	equ	0xFE8
  3150                           postdec1	equ	0xFE5
  3151                           fsr1h	equ	0xFE2
  3152                           fsr1l	equ	0xFE1
  3153                           indf2	equ	0xFDF
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158                           	psect	temp
  3159  000054                     btemp:
  3160                           	opt stack 0
  3161  000054                     	ds	1
  3162  0000                     int$flags	set	btemp
  3163  0000                     wtemp6	set	btemp+1
  3164                           pclatu	equ	0xFFB
  3165                           pclath	equ	0xFFA
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           intcon2	equ	0xFF1
  3174                           intcon3	equ	0xFF0
  3175                           postinc0	equ	0xFEE
  3176                           fsr0h	equ	0xFEA
  3177                           fsr0l	equ	0xFE9
  3178                           wreg	equ	0xFE8
  3179                           postdec1	equ	0xFE5
  3180                           fsr1h	equ	0xFE2
  3181                           fsr1l	equ	0xFE1
  3182                           indf2	equ	0xFDF
  3183                           fsr2h	equ	0xFDA
  3184                           fsr2l	equ	0xFD9
  3185                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      83
    BANK0           160      8      49
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_mot_3_step_count
    _mot_3_step_count->i2___wmul

Critical Paths under _main in BANK0

    _main->___wmul

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2843
                                              6 BANK0      2     2      0
                _ConfigureOscillator
                            _InitApp
                             ___wmul
                                _abs
                             _finish
                              _reset
                       _speed_select
                         _trans_Char
                             _unwind
                          _zero_mark
 ---------------------------------------------------------------------------------
 (1) _zero_mark                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _unwind                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _trans_Char                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _speed_select                                         4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _finish                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     183
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2508
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _high_isr                                            20    20      0     405
                                             12 COMRAM    20    20      0
                   _mot_3_step_count
                           i2_finish
 ---------------------------------------------------------------------------------
 (3) i2_finish                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _mot_3_step_count                                     6     2      4     405
                                              6 COMRAM     6     2      4
                           i2___wmul
 ---------------------------------------------------------------------------------
 (4) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___wmul
   _abs
   _finish
   _reset
   _speed_select
   _trans_Char
   _unwind
   _zero_mark

 _high_isr (ROOT)
   _mot_3_step_count
     i2___wmul
   i2_finish

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      31       5       30.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      53       1       88.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84      20        0.0%
DATA                 0      0      84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 19 14:50:42 2019

                           _n 0013           ___wmul@multiplicand 0085                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l231 001A                           l312 082E  
                         l232 03DA                           l313 080C                           l233 01B6  
                         l314 084E                           l315 0824                           l251 0292  
                         l235 01F6                           l260 02E2                           l261 02B2  
                         l237 023E                           l254 0288                           l238 0214  
                         l319 0864                           l271 0318                           l263 02CA  
                         l247 025E                           l248 0256                           l274 0376  
                         l267 02FA                           l269 0308                           l278 03F2  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                  __CFG_CPD$OFF 000000  
                         _RX9 007D5E                           _TX9 007D66                  __CFG_BOR$OFF 000000  
                         _abs 0854                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          ?_abs 0083                          l2029 0972  
                        l2169 0370                          _BRGH 007D62                          _CREN 007D5C  
                        u2100 02C4                          u2110 02C6                          u2130 02DC  
                        u2140 02DE                          _LATA 000F89                          u2070 02AC  
                        _LATB 000F8A                          _LATC 000F8B                          u2160 02F4  
                        u2080 02AE                          u2241 0420                          u2170 02F6  
                        u2267 03E6                          u1805 0026                          u1806 0028  
                        u1815 0030                          u1920 020C                          u1816 0032  
                        u1825 003A                          u1770 093E                          u1850 005E  
                        u1826 003C                          u1835 0044                          u1780 0940  
                        u1836 0046                          u1845 004E                          u1846 0050  
                        u1868 0062                          _RCIE 007CED                          i2l97 0566  
                        _TMR0 000FD6                          _TMR1 000FCE                          _SPEN 007D5F  
                        _TXIE 007CEC                          _TXIF 007CF4                          _TXEN 007D65  
                        _SYNC 007D64                          abs@a 0083                          _main 0012  
                        _send 0074                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0054  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             __end_of_InitApp 079C                   _unwind_flag 0019                         ??_abs 0085  
               __CFG_PLLDIV$1 000000                __CFG_CCP2MX$ON 000000                         ?_main 0028  
                       _ADRES 000FC3                         _BRG16 007DC3                         _DIR_1 001F  
                       _DIR_2 001E                         _DIR_3 0025                         _DIR_4 001D  
                       i2l100 04E4                         i2l101 04F4                         i2l111 0602  
                       i2l121 0674                         i2l113 0640                         i2l122 066A  
                       i2l106 0608                         i2l107 0594                         i2l116 062E  
                       i2l108 05B2                         i2l126 0686                         i2l127 0694  
                       i2l119 0658                         _RCREG 000FAE                         _MOT_1 0027  
                       _MOT_2 0024                         _MOT_3 0026                         _MOT_4 0053  
                       _SPBRG 000FAF                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                 __CFG_USBDIV$1 000000                         _TXREG 000FAD  
         _ConfigureOscillator 0988                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _reset 099A                         _turns 0050                   _turns_count 0003  
                       pclath 000FFA                         tablat 000FF5              __end_ofi2___wmul 08CC  
                       status 000FD8                         wtemp6 0055              __end_ofi2_finish 0934  
        ?_ConfigureOscillator 0028               __initialization 079C                  __end_of_main 0428  
                      ??_main 0089                 __activetblptr 000002                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        _CCPR1L 000FBE                        ?_reset 0028  
                      _GODONE 007E11                        i2l1667 04F4                        i2l1699 0602  
                   ??_InitApp 0083         ??_ConfigureOscillator 0083                __CFG_XINST$OFF 000000  
            __end_of_high_isr 06E0     __size_of_mot_3_step_count 0024                        ___wmul 087E  
                      _enable 001A                        _finish 08F0                        _length 004E  
                      _recibi 0021                        clear_0 07E2                        clear_1 07EE  
                      _move_4 0023                        _motor1 008B                        _motor2 007D  
                      _unwind 0934                  __pdataCOMRAM 0048                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0060  
     __end_of__initialization 07F4               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
              __pcstackCOMRAM 0028                  __pidataBANK0 0994                 __end_of_reset 099E  
                   ?i2___wmul 0028                     ?i2_finish 0028                 trans_Char@out 0083  
                     ??_reset 0083                    __pbssBANK0 0060                       ?___wmul 0083  
                     ?_finish 0028            _ADC_previous_value 0015                       ?_unwind 0028  
                  ??i2___wmul 002C                    ??i2_finish 0028                       i2u95_40 04B8  
                     i2u96_48 04BA                     ?_high_isr 0028               __CFG_VREGEN$OFF 000000  
          __size_of_zero_mark 001A                       _InitApp 06E0                       __Hparam 0000  
                     __Lparam 0000              _mot_3_step_count 08CC               __size_of___wmul 0028  
                     _caliber 0001               __size_of_finish 0022               __CFG_STVREN$OFF 000000  
                     __pcinit 079C                       __ramtop 0800                       __ptext0 0012  
                     __ptext1 0954                       __ptext2 0934                       __ptext3 096E  
                     __ptext4 0802                       __ptext5 099A                       __ptext6 08F0  
                     __ptext7 0854                       __ptext8 087E                       __ptext9 06E0  
                  _param_flag 001C                     _T0CONbits 000FD5                       _count_1 004C  
                     _count_2 008F                       _count_3 004A                       _count_4 008D  
             __size_of_unwind 0020                     _T1CONbits 000FCD                       _palabra 0060  
                   _T2CONbits 000FCA                  __size_of_abs 002A                       _winding 0022  
            _mot_4_step_count 007B                       _steps_4 0017                    ??_high_isr 0034  
              __pintcode_body 0428          end_of_initialization 07F4                 __Lmediumconst 0000  
                     int_func 0428           i2___wmul@multiplier 0028                 ?_speed_select 0083  
                     postdec1 000FE5                       postinc0 000FEE                     _PORTAbits 000F80  
                   _PORTBbits 000F81                     _PORTCbits 000F82             __end_of_zero_mark 096E  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
                  _trans_Char 096E   __end_of_ConfigureOscillator 0994                   _CCP1CONbits 000FBD  
              ??_speed_select 0085                __end_of___wmul 08A6                 __pidataCOMRAM 097C  
              __end_of_finish 0912              i2___wmul@product 002C                __end_of_unwind 0954  
         start_initialization 079C             __size_ofi2___wmul 0026                   __end_of_abs 087E  
           __size_ofi2_finish 0022                      ??___wmul 0087                      ??_finish 0083  
                 __pdataBANK0 008B              __CFG_LPT1OSC$OFF 000000                      ??_unwind 0083  
                 __pbssCOMRAM 0001                 __pcstackBANK0 0083                   ?_trans_Char 0028  
    __end_of_mot_3_step_count 08F0             __size_of_high_isr 06D8                      ?_InitApp 0028  
                   __pintcode 0008          __end_of_speed_select 0854                __size_of_reset 0004  
              ___wmul@product 0087                      _LATAbits 000F89                      _LATBbits 000F8A  
                    _LATCbits 000F8B                      _IPR1bits 000F9F                      _PIE1bits 000F9D  
                    _RA0state 0020                      i2u100_41 0506                      i2u101_40 051A  
                    i2u111_40 05A4                      i2u102_48 051C                      i2u103_41 054C  
                    i2u104_40 0558                      i2u112_48 05A6                      i2u105_40 055A  
                    i2u115_40 05C8                      i2u108_40 0584                      i2u116_48 05CA  
                    i2u109_48 0586                      i2u128_40 0690                      i2u129_40 0692  
                    _PIR1bits 000F9E                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
         __size_of_trans_Char 000E                   _finish_flag 001B                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0083                      i2___wmul 08A6                      _PWM_duty 0048  
                    i2_finish 0912               _ADC_value_press 000F                     _zero_flag 0052  
                   _zero_mark 0954                   _INTCON2bits 000FF1                   _INTCON3bits 000FF0  
                   copy_data0 07B0                     copy_data1 07D0              __size_of_InitApp 00BC  
                    __Hrparam 0000                      __Lrparam 0000         i2___wmul@multiplicand 002A  
                  ?_zero_mark 0028                      __ptext10 0988                      __ptext12 0912  
                    __ptext13 08CC                      __ptext14 08A6                      _high_isr 0008  
               __size_of_main 0416                   _mot_1_steps 0009                   _mot_3_steps 0007  
                 _mot_4_steps 0005  __size_of_ConfigureOscillator 000C                      _overflow 0011  
                    int$flags 0054            mot_3_step_count@ms 0030         __size_of_speed_select 0052  
       __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2                  ??_trans_Char 0083  
                 _MOT_1_count 000D                   _MOT_2_count 0081                   _MOT_3_count 000B  
                 _MOT_4_count 007F             ?_mot_3_step_count 002E                      intlevel2 0000  
          ??_mot_3_step_count 0032                    _OSCCONbits 000FD3                  _speed_select 0802  
           mot_3_step_count@l 002E            __end_of_trans_Char 097C           __CFG_FOSC$INTOSC_EC 000000  
                 ??_zero_mark 0083               speed_select@var 0083  

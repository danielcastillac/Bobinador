

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 18 19:11:32 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.45
    36                           ; Generated 16/11/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F2550 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  000ABA                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _count_3
    75  000ABA  0084               	dw	132
    76                           
    77                           ;initializer for _count_1
    78  000ABC  0002               	dw	2
    79                           
    80                           ;initializer for _length
    81  000ABE  2422               	dw	9250
    82                           
    83                           ;initializer for _turns
    84  000AC0  0FA0               	dw	4000
    85                           
    86                           ;initializer for _zero_flag
    87  000AC2  01                 	db	1
    88                           
    89                           ;initializer for _MOT_4
    90  000AC3  01                 	db	1
    91                           
    92                           	psect	idataBANK0
    93  000AC4                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _PWM_duty
    97  000AC4  0032               	dw	50
    98                           
    99                           ;initializer for _motor1
   100  000AC6  0001               	dw	1
   101                           
   102                           ;initializer for _count_4
   103  000AC8  0005               	dw	5
   104                           
   105                           ;initializer for _count_2
   106  000ACA  0001               	dw	1
   107  0000                     _ADRES	set	4035
   108  0000                     _TMR1	set	4046
   109  0000                     _TMR0	set	4054
   110  0000                     _T2CONbits	set	4042
   111  0000                     _CCP1CONbits	set	4029
   112  0000                     _PR2	set	4043
   113  0000                     _SPBRG	set	4015
   114  0000                     _IPR1bits	set	3999
   115  0000                     _INTCON2bits	set	4081
   116  0000                     _RCONbits	set	4048
   117  0000                     _TRISBbits	set	3987
   118  0000                     _TRISCbits	set	3988
   119  0000                     _PIE1bits	set	3997
   120  0000                     _ADCON2	set	4032
   121  0000                     _ADCON0bits	set	4034
   122  0000                     _TRISAbits	set	3986
   123  0000                     _ADCON1	set	4033
   124  0000                     _LATC	set	3979
   125  0000                     _PORTC	set	3970
   126  0000                     _LATB	set	3978
   127  0000                     _PORTB	set	3969
   128  0000                     _LATA	set	3977
   129  0000                     _PORTA	set	3968
   130  0000                     _OSCCONbits	set	4051
   131  0000                     _T0CONbits	set	4053
   132  0000                     _T1CONbits	set	4045
   133  0000                     _CCPR1L	set	4030
   134  0000                     _INTCON3bits	set	4080
   135  0000                     _TXREG	set	4013
   136  0000                     _RCREG	set	4014
   137  0000                     _PORTBbits	set	3969
   138  0000                     _LATBbits	set	3978
   139  0000                     _PIR1bits	set	3998
   140  0000                     _PORTCbits	set	3970
   141  0000                     _LATCbits	set	3979
   142  0000                     _PORTAbits	set	3968
   143  0000                     _LATAbits	set	3977
   144  0000                     _INTCONbits	set	4082
   145  0000                     _TXIE	set	31980
   146  0000                     _RCIE	set	31981
   147  0000                     _RX9	set	32094
   148  0000                     _TX9	set	32102
   149  0000                     _CREN	set	32092
   150  0000                     _TXEN	set	32101
   151  0000                     _SYNC	set	32100
   152  0000                     _SPEN	set	32095
   153  0000                     _BRG16	set	32195
   154  0000                     _BRGH	set	32098
   155  0000                     _GODONE	set	32273
   156  0000                     _TXIF	set	31988
   157                           
   158                           ; #config settings
   159  0000                     
   160                           	psect	cinit
   161  000860                     __pcinit:
   162                           	opt stack 0
   163  000860                     start_initialization:
   164                           	opt stack 0
   165  000860                     __initialization:
   166                           	opt stack 0
   167                           
   168                           ; Initialize objects allocated to BANK0 (8 bytes)
   169                           ; load TBLPTR registers with __pidataBANK0
   170  000860  0EC4               	movlw	low __pidataBANK0
   171  000862  6EF6               	movwf	tblptrl,c
   172  000864  0E0A               	movlw	high __pidataBANK0
   173  000866  6EF7               	movwf	tblptrh,c
   174  000868  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   175  00086A  6EF8               	movwf	tblptru,c
   176  00086C  EE00  F099         	lfsr	0,__pdataBANK0
   177  000870  EE10 F008          	lfsr	1,8
   178  000874                     copy_data0:
   179  000874  0009               	tblrd		*+
   180  000876  CFF5 FFEE          	movff	tablat,postinc0
   181  00087A  50E5               	movf	postdec1,w,c
   182  00087C  50E1               	movf	fsr1l,w,c
   183  00087E  E1FA               	bnz	copy_data0
   184                           
   185                           ; Initialize objects allocated to COMRAM (10 bytes)
   186                           ; load TBLPTR registers with __pidataCOMRAM
   187  000880  0EBA               	movlw	low __pidataCOMRAM
   188  000882  6EF6               	movwf	tblptrl,c
   189  000884  0E0A               	movlw	high __pidataCOMRAM
   190  000886  6EF7               	movwf	tblptrh,c
   191  000888  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   192  00088A  6EF8               	movwf	tblptru,c
   193  00088C  EE00  F041         	lfsr	0,__pdataCOMRAM
   194  000890  EE10 F00A          	lfsr	1,10
   195  000894                     copy_data1:
   196  000894  0009               	tblrd		*+
   197  000896  CFF5 FFEE          	movff	tablat,postinc0
   198  00089A  50E5               	movf	postdec1,w,c
   199  00089C  50E1               	movf	fsr1l,w,c
   200  00089E  E1FA               	bnz	copy_data1
   201                           
   202                           ; Clear objects allocated to BANK0 (39 bytes)
   203  0008A0  EE00  F060         	lfsr	0,__pbssBANK0
   204  0008A4  0E27               	movlw	39
   205  0008A6                     clear_0:
   206  0008A6  6AEE               	clrf	postinc0,c
   207  0008A8  06E8               	decf	wreg,f,c
   208  0008AA  E1FD               	bnz	clear_0
   209                           
   210                           ; Clear objects allocated to COMRAM (32 bytes)
   211  0008AC  EE00  F001         	lfsr	0,__pbssCOMRAM
   212  0008B0  0E20               	movlw	32
   213  0008B2                     clear_1:
   214  0008B2  6AEE               	clrf	postinc0,c
   215  0008B4  06E8               	decf	wreg,f,c
   216  0008B6  E1FD               	bnz	clear_1
   217  0008B8                     end_of_initialization:
   218                           	opt stack 0
   219  0008B8                     __end_of__initialization:
   220                           	opt stack 0
   221  0008B8  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   222  0008BA  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   223  0008BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   224  0008BE  6EF8               	movwf	tblptru,c
   225  0008C0  0100               	movlb	0
   226  0008C2  EF09  F000         	goto	_main	;jump to C main() function
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           postdec1	equ	0xFE5
   234                           fsr1l	equ	0xFE1
   235                           
   236                           	psect	bssCOMRAM
   237  000001                     __pbssCOMRAM:
   238                           	opt stack 0
   239  000001                     _turns_count:
   240                           	opt stack 0
   241  000001                     	ds	2
   242  000003                     _mot_4_steps:
   243                           	opt stack 0
   244  000003                     	ds	2
   245  000005                     _mot_3_steps:
   246                           	opt stack 0
   247  000005                     	ds	2
   248  000007                     _mot_1_steps:
   249                           	opt stack 0
   250  000007                     	ds	2
   251  000009                     _MOT_3_count:
   252                           	opt stack 0
   253  000009                     	ds	2
   254  00000B                     _MOT_1_count:
   255                           	opt stack 0
   256  00000B                     	ds	2
   257  00000D                     _ADC_value_press:
   258                           	opt stack 0
   259  00000D                     	ds	2
   260  00000F                     _n:
   261                           	opt stack 0
   262  00000F                     	ds	2
   263  000011                     _steps_4:
   264                           	opt stack 0
   265  000011                     	ds	2
   266  000013                     _enable:
   267                           	opt stack 0
   268  000013                     	ds	1
   269  000014                     _finish_flag:
   270                           	opt stack 0
   271  000014                     	ds	1
   272  000015                     _param_flag:
   273                           	opt stack 0
   274  000015                     	ds	1
   275  000016                     _DIR_4:
   276                           	opt stack 0
   277  000016                     	ds	1
   278  000017                     _DIR_2:
   279                           	opt stack 0
   280  000017                     	ds	1
   281  000018                     _DIR_1:
   282                           	opt stack 0
   283  000018                     	ds	1
   284  000019                     _RA0state:
   285                           	opt stack 0
   286  000019                     	ds	1
   287  00001A                     _recibi:
   288                           	opt stack 0
   289  00001A                     	ds	1
   290  00001B                     _winding:
   291                           	opt stack 0
   292  00001B                     	ds	1
   293  00001C                     _move_4:
   294                           	opt stack 0
   295  00001C                     	ds	1
   296  00001D                     _MOT_2:
   297                           	opt stack 0
   298  00001D                     	ds	1
   299  00001E                     _DIR_3:
   300                           	opt stack 0
   301  00001E                     	ds	1
   302  00001F                     _MOT_3:
   303                           	opt stack 0
   304  00001F                     	ds	1
   305  000020                     _MOT_1:
   306                           	opt stack 0
   307  000020                     	ds	1
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           postdec1	equ	0xFE5
   315                           fsr1l	equ	0xFE1
   316                           
   317                           	psect	dataCOMRAM
   318  000041                     __pdataCOMRAM:
   319                           	opt stack 0
   320  000041                     _count_3:
   321                           	opt stack 0
   322  000041                     	ds	2
   323  000043                     _count_1:
   324                           	opt stack 0
   325  000043                     	ds	2
   326  000045                     _length:
   327                           	opt stack 0
   328  000045                     	ds	2
   329  000047                     _turns:
   330                           	opt stack 0
   331  000047                     	ds	2
   332  000049                     _zero_flag:
   333                           	opt stack 0
   334  000049                     	ds	1
   335  00004A                     _MOT_4:
   336                           	opt stack 0
   337  00004A                     	ds	1
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	bssBANK0
   348  000060                     __pbssBANK0:
   349                           	opt stack 0
   350  000060                     _palabra:
   351                           	opt stack 0
   352  000060                     	ds	20
   353  000074                     _mot_4_step_count:
   354                           	opt stack 0
   355  000074                     	ds	2
   356  000076                     _caliber:
   357                           	opt stack 0
   358  000076                     	ds	2
   359  000078                     _motor2:
   360                           	opt stack 0
   361  000078                     	ds	2
   362  00007A                     _MOT_4_count:
   363                           	opt stack 0
   364  00007A                     	ds	2
   365  00007C                     _MOT_2_count:
   366                           	opt stack 0
   367  00007C                     	ds	2
   368  00007E                     _overflow:
   369                           	opt stack 0
   370  00007E                     	ds	2
   371  000080                     _send:
   372                           	opt stack 0
   373  000080                     	ds	7
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           postdec1	equ	0xFE5
   381                           fsr1l	equ	0xFE1
   382                           
   383                           	psect	dataBANK0
   384  000099                     __pdataBANK0:
   385                           	opt stack 0
   386  000099                     _PWM_duty:
   387                           	opt stack 0
   388  000099                     	ds	2
   389  00009B                     _motor1:
   390                           	opt stack 0
   391  00009B                     	ds	2
   392  00009D                     _count_4:
   393                           	opt stack 0
   394  00009D                     	ds	2
   395  00009F                     _count_2:
   396                           	opt stack 0
   397  00009F                     	ds	2
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           postinc0	equ	0xFEE
   403                           wreg	equ	0xFE8
   404                           postdec1	equ	0xFE5
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	cstackBANK0
   408  000087                     __pcstackBANK0:
   409                           	opt stack 0
   410  000087                     ?___wmul:
   411                           	opt stack 0
   412  000087                     ?___lwmod:
   413                           	opt stack 0
   414  000087                     trans_Char@out:
   415                           	opt stack 0
   416  000087                     speed_select@var:
   417                           	opt stack 0
   418  000087                     ___wmul@multiplier:
   419                           	opt stack 0
   420  000087                     ___lwmod@dividend:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x0
   424  000087                     	ds	1
   425  000088                     send_String@out:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x1
   429  000088                     	ds	1
   430  000089                     ??_speed_select:
   431  000089                     ___wmul@multiplicand:
   432                           	opt stack 0
   433  000089                     ___lwmod@divisor:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437  000089                     	ds	1
   438  00008A                     
   439                           ; 1 bytes @ 0x3
   440  00008A                     	ds	1
   441  00008B                     ___lwmod@counter:
   442                           	opt stack 0
   443  00008B                     ___wmul@product:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x4
   447  00008B                     	ds	1
   448  00008C                     ?___lwdiv:
   449                           	opt stack 0
   450  00008C                     ___lwdiv@dividend:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x5
   454  00008C                     	ds	2
   455  00008E                     ___lwdiv@divisor:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x7
   459  00008E                     	ds	2
   460  000090                     ___lwdiv@counter:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x9
   464  000090                     	ds	1
   465  000091                     ___lwdiv@quotient:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0xA
   469  000091                     	ds	2
   470  000093                     ??_main:
   471                           
   472                           ; 1 bytes @ 0xC
   473  000093                     	ds	2
   474  000095                     _main$1966:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0xE
   478  000095                     	ds	2
   479  000097                     _main$1965:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x10
   483  000097                     	ds	2
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           postdec1	equ	0xFE5
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackCOMRAM
   494  000021                     __pcstackCOMRAM:
   495                           	opt stack 0
   496  000021                     ?i2___wmul:
   497                           	opt stack 0
   498  000021                     i2___wmul@multiplier:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x0
   502  000021                     	ds	2
   503  000023                     i2___wmul@multiplicand:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x2
   507  000023                     	ds	2
   508  000025                     i2___wmul@product:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x4
   512  000025                     	ds	2
   513  000027                     ?_mot_3_step_count:
   514                           	opt stack 0
   515  000027                     mot_3_step_count@l:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x6
   519  000027                     	ds	2
   520  000029                     mot_3_step_count@ms:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x8
   524  000029                     	ds	2
   525  00002B                     ??_mot_3_step_count:
   526                           
   527                           ; 1 bytes @ 0xA
   528  00002B                     	ds	2
   529  00002D                     ??_high_isr:
   530                           
   531                           ; 1 bytes @ 0xC
   532  00002D                     	ds	20
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1l	equ	0xFE1
   541                           
   542 ;;
   543 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   544 ;;
   545 ;; *************** function _main *****************
   546 ;; Defined at:
   547 ;;		line 84 in file "main.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   561 ;;      Params:         0       0       0       0       0       0       0       0       0
   562 ;;      Locals:         0       4       0       0       0       0       0       0       0
   563 ;;      Temps:          0       2       0       0       0       0       0       0       0
   564 ;;      Totals:         0       6       0       0       0       0       0       0       0
   565 ;;Total ram usage:        6 bytes
   566 ;; Hardware stack levels required when called:    5
   567 ;; This function calls:
   568 ;;		_ConfigureOscillator
   569 ;;		_InitApp
   570 ;;		___lwdiv
   571 ;;		___lwmod
   572 ;;		___wmul
   573 ;;		_reset
   574 ;;		_send_String
   575 ;;		_speed_select
   576 ;;		_unwind
   577 ;;		_zero_mark
   578 ;; This function is called by:
   579 ;;		Startup code after reset
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text0
   584  000012                     __ptext0:
   585                           	opt stack 0
   586  000012                     _main:
   587                           	opt stack 26
   588                           
   589                           ;main.c: 86: ConfigureOscillator();
   590                           
   591                           ;incstack = 0
   592  000012  EC57  F005         	call	_ConfigureOscillator	;wreg free
   593                           
   594                           ;main.c: 89: InitApp();
   595  000016  ECD2  F003         	call	_InitApp	;wreg free
   596  00001A                     
   597                           ;main.c: 92: CCPR1L = PWM_duty;
   598  00001A  C099  FFBE         	movff	_PWM_duty,4030	;volatile
   599                           
   600                           ;main.c: 94: LATAbits.LA2 = DIR_1;
   601  00001E  B018               	btfsc	_DIR_1,0,c
   602  000020  D002               	bra	u1805
   603  000022  9489               	bcf	3977,2,c	;volatile
   604  000024  D001               	bra	u1806
   605  000026                     u1805:
   606  000026  8489               	bsf	3977,2,c	;volatile
   607  000028                     u1806:
   608                           
   609                           ;main.c: 95: LATAbits.LA4 = DIR_2;
   610  000028  B017               	btfsc	_DIR_2,0,c
   611  00002A  D002               	bra	u1815
   612  00002C  9889               	bcf	3977,4,c	;volatile
   613  00002E  D001               	bra	u1816
   614  000030                     u1815:
   615  000030  8889               	bsf	3977,4,c	;volatile
   616  000032                     u1816:
   617                           
   618                           ;main.c: 96: LATCbits.LC0 = DIR_3;
   619  000032  B01E               	btfsc	_DIR_3,0,c
   620  000034  D002               	bra	u1825
   621  000036  908B               	bcf	3979,0,c	;volatile
   622  000038  D001               	bra	u1826
   623  00003A                     u1825:
   624  00003A  808B               	bsf	3979,0,c	;volatile
   625  00003C                     u1826:
   626                           
   627                           ;main.c: 97: LATBbits.LB7 = DIR_4;
   628  00003C  B016               	btfsc	_DIR_4,0,c
   629  00003E  D002               	bra	u1835
   630  000040  9E8A               	bcf	3978,7,c	;volatile
   631  000042  D001               	bra	u1836
   632  000044                     u1835:
   633  000044  8E8A               	bsf	3978,7,c	;volatile
   634  000046                     u1836:
   635                           
   636                           ;main.c: 98: LATBbits.LB5 = enable;
   637  000046  B013               	btfsc	_enable,0,c
   638  000048  D002               	bra	u1845
   639  00004A  9A8A               	bcf	3978,5,c	;volatile
   640  00004C  D001               	bra	u1846
   641  00004E                     u1845:
   642  00004E  8A8A               	bsf	3978,5,c	;volatile
   643  000050                     u1846:
   644                           
   645                           ;main.c: 99: LATBbits.LB4 = !enable;
   646  000050  5013               	movf	_enable,w,c
   647  000052  A4D8               	btfss	status,2,c
   648  000054  D004               	goto	u1850
   649  000056  0100               	movlb	0	; () banked
   650  000058  6B93               	clrf	??_main& (0+255),b
   651  00005A  2B93               	incf	??_main& (0+255),f,b
   652  00005C  D002               	goto	u1868
   653  00005E                     u1850:
   654  00005E  0100               	movlb	0	; () banked
   655  000060  6B93               	clrf	??_main& (0+255),b
   656  000062                     u1868:
   657  000062  3B93               	swapf	??_main& (0+255),f,b
   658  000064  508A               	movf	3978,w,c	;volatile
   659  000066  1993               	xorwf	??_main& (0+255),w,b
   660  000068  0BEF               	andlw	-17
   661  00006A  1993               	xorwf	??_main& (0+255),w,b
   662  00006C  6E8A               	movwf	3978,c	;volatile
   663                           
   664                           ; BSR set to: 0
   665                           ;main.c: 101: if (recibi == 1) {
   666  00006E  041A               	decf	_recibi,w,c
   667  000070  A4D8               	btfss	status,2,c
   668  000072  D1A0               	goto	l224
   669                           
   670                           ; BSR set to: 0
   671                           ;main.c: 103: recibi = 0;
   672  000074  0E00               	movlw	0
   673  000076  6E1A               	movwf	_recibi,c
   674                           
   675                           ; BSR set to: 0
   676                           ;main.c: 105: if (palabra[0] == 'A') {
   677  000078  0E41               	movlw	65
   678  00007A  1960               	xorwf	_palabra& (0+255),w,b
   679  00007C  A4D8               	btfss	status,2,c
   680  00007E  D0AC               	goto	l225
   681                           
   682                           ; BSR set to: 0
   683                           ;main.c: 107: caliber = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   684  000080  0ED0               	movlw	208
   685  000082  2561               	addwf	(_palabra+1)& (0+255),w,b
   686  000084  6F87               	movwf	___wmul@multiplier& (0+255),b
   687  000086  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   688  000088  0EFF               	movlw	255
   689  00008A  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   690  00008C  0E00               	movlw	0
   691  00008E  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   692  000090  0E0A               	movlw	10
   693  000092  6F89               	movwf	___wmul@multiplicand& (0+255),b
   694  000094  ECD8  F004         	call	___wmul	;wreg free
   695  000098  0100               	movlb	0	; () banked
   696  00009A  5162               	movf	(_palabra+2)& (0+255),w,b
   697  00009C  6F93               	movwf	??_main& (0+255),b
   698  00009E  6B94               	clrf	(??_main+1)& (0+255),b
   699  0000A0  5187               	movf	?___wmul& (0+255),w,b
   700  0000A2  2793               	addwf	??_main& (0+255),f,b
   701  0000A4  5188               	movf	(?___wmul+1)& (0+255),w,b
   702  0000A6  2394               	addwfc	(??_main+1)& (0+255),f,b
   703  0000A8  0ED0               	movlw	208
   704  0000AA  2593               	addwf	??_main& (0+255),w,b
   705  0000AC  6F76               	movwf	_caliber& (0+255),b
   706  0000AE  0EFF               	movlw	255
   707  0000B0  2194               	addwfc	(??_main+1)& (0+255),w,b
   708  0000B2  6F77               	movwf	(_caliber+1)& (0+255),b
   709                           
   710                           ;main.c: 108: length = ((palabra[3] - 48) * 10000) + ((palabra[4] - 48) * 1000) + ((pala
      +                          bra[5] - 48) * 100) + ((palabra[6] - 48) * 10) + ((palabra[7] - 48));
   711  0000B4  0ED0               	movlw	208
   712  0000B6  2563               	addwf	(_palabra+3)& (0+255),w,b
   713  0000B8  6F87               	movwf	___wmul@multiplier& (0+255),b
   714  0000BA  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   715  0000BC  0EFF               	movlw	255
   716  0000BE  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   717  0000C0  0E27               	movlw	39
   718  0000C2  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   719  0000C4  0E10               	movlw	16
   720  0000C6  6F89               	movwf	___wmul@multiplicand& (0+255),b
   721  0000C8  ECD8  F004         	call	___wmul	;wreg free
   722  0000CC  0100               	movlb	0	; () banked
   723  0000CE  5167               	movf	(_palabra+7)& (0+255),w,b
   724  0000D0  6F93               	movwf	??_main& (0+255),b
   725  0000D2  6B94               	clrf	(??_main+1)& (0+255),b
   726  0000D4  5187               	movf	?___wmul& (0+255),w,b
   727  0000D6  2793               	addwf	??_main& (0+255),f,b
   728  0000D8  5188               	movf	(?___wmul+1)& (0+255),w,b
   729  0000DA  2394               	addwfc	(??_main+1)& (0+255),f,b
   730  0000DC  0ED0               	movlw	208
   731  0000DE  2564               	addwf	(_palabra+4)& (0+255),w,b
   732  0000E0  6F87               	movwf	___wmul@multiplier& (0+255),b
   733  0000E2  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   734  0000E4  0EFF               	movlw	255
   735  0000E6  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   736  0000E8  0E03               	movlw	3
   737  0000EA  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   738  0000EC  0EE8               	movlw	232
   739  0000EE  6F89               	movwf	___wmul@multiplicand& (0+255),b
   740  0000F0  ECD8  F004         	call	___wmul	;wreg free
   741  0000F4  0100               	movlb	0	; () banked
   742  0000F6  5187               	movf	?___wmul& (0+255),w,b
   743  0000F8  2793               	addwf	??_main& (0+255),f,b
   744  0000FA  5188               	movf	(?___wmul+1)& (0+255),w,b
   745  0000FC  2394               	addwfc	(??_main+1)& (0+255),f,b
   746  0000FE  0ED0               	movlw	208
   747  000100  2565               	addwf	(_palabra+5)& (0+255),w,b
   748  000102  6F87               	movwf	___wmul@multiplier& (0+255),b
   749  000104  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   750  000106  0EFF               	movlw	255
   751  000108  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   752  00010A  0E00               	movlw	0
   753  00010C  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   754  00010E  0E64               	movlw	100
   755  000110  6F89               	movwf	___wmul@multiplicand& (0+255),b
   756  000112  ECD8  F004         	call	___wmul	;wreg free
   757  000116  0100               	movlb	0	; () banked
   758  000118  5187               	movf	?___wmul& (0+255),w,b
   759  00011A  2793               	addwf	??_main& (0+255),f,b
   760  00011C  5188               	movf	(?___wmul+1)& (0+255),w,b
   761  00011E  2394               	addwfc	(??_main+1)& (0+255),f,b
   762  000120  0ED0               	movlw	208
   763  000122  2566               	addwf	(_palabra+6)& (0+255),w,b
   764  000124  6F87               	movwf	___wmul@multiplier& (0+255),b
   765  000126  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   766  000128  0EFF               	movlw	255
   767  00012A  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   768  00012C  0E00               	movlw	0
   769  00012E  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   770  000130  0E0A               	movlw	10
   771  000132  6F89               	movwf	___wmul@multiplicand& (0+255),b
   772  000134  ECD8  F004         	call	___wmul	;wreg free
   773  000138  0100               	movlb	0	; () banked
   774  00013A  5187               	movf	?___wmul& (0+255),w,b
   775  00013C  2793               	addwf	??_main& (0+255),f,b
   776  00013E  5188               	movf	(?___wmul+1)& (0+255),w,b
   777  000140  2394               	addwfc	(??_main+1)& (0+255),f,b
   778  000142  0ED0               	movlw	208
   779  000144  2593               	addwf	??_main& (0+255),w,b
   780  000146  6E45               	movwf	_length,c
   781  000148  0EFF               	movlw	255
   782  00014A  2194               	addwfc	(??_main+1)& (0+255),w,b
   783  00014C  6E46               	movwf	_length+1,c
   784                           
   785                           ;main.c: 109: turns = ((palabra[8] - 48) * 1000) + ((palabra[9] - 48) * 100) + ((palabra
      +                          [10] - 48) * 10) + ((palabra[11] - 48));
   786  00014E  0ED0               	movlw	208
   787  000150  2568               	addwf	(_palabra+8)& (0+255),w,b
   788  000152  6F87               	movwf	___wmul@multiplier& (0+255),b
   789  000154  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   790  000156  0EFF               	movlw	255
   791  000158  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   792  00015A  0E03               	movlw	3
   793  00015C  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   794  00015E  0EE8               	movlw	232
   795  000160  6F89               	movwf	___wmul@multiplicand& (0+255),b
   796  000162  ECD8  F004         	call	___wmul	;wreg free
   797  000166  0100               	movlb	0	; () banked
   798  000168  516B               	movf	(_palabra+11)& (0+255),w,b
   799  00016A  6F93               	movwf	??_main& (0+255),b
   800  00016C  6B94               	clrf	(??_main+1)& (0+255),b
   801  00016E  5187               	movf	?___wmul& (0+255),w,b
   802  000170  2793               	addwf	??_main& (0+255),f,b
   803  000172  5188               	movf	(?___wmul+1)& (0+255),w,b
   804  000174  2394               	addwfc	(??_main+1)& (0+255),f,b
   805  000176  0ED0               	movlw	208
   806  000178  2569               	addwf	(_palabra+9)& (0+255),w,b
   807  00017A  6F87               	movwf	___wmul@multiplier& (0+255),b
   808  00017C  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   809  00017E  0EFF               	movlw	255
   810  000180  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   811  000182  0E00               	movlw	0
   812  000184  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   813  000186  0E64               	movlw	100
   814  000188  6F89               	movwf	___wmul@multiplicand& (0+255),b
   815  00018A  ECD8  F004         	call	___wmul	;wreg free
   816  00018E  0100               	movlb	0	; () banked
   817  000190  5187               	movf	?___wmul& (0+255),w,b
   818  000192  2793               	addwf	??_main& (0+255),f,b
   819  000194  5188               	movf	(?___wmul+1)& (0+255),w,b
   820  000196  2394               	addwfc	(??_main+1)& (0+255),f,b
   821  000198  0ED0               	movlw	208
   822  00019A  256A               	addwf	(_palabra+10)& (0+255),w,b
   823  00019C  6F87               	movwf	___wmul@multiplier& (0+255),b
   824  00019E  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   825  0001A0  0EFF               	movlw	255
   826  0001A2  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   827  0001A4  0E00               	movlw	0
   828  0001A6  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   829  0001A8  0E0A               	movlw	10
   830  0001AA  6F89               	movwf	___wmul@multiplicand& (0+255),b
   831  0001AC  ECD8  F004         	call	___wmul	;wreg free
   832  0001B0  0100               	movlb	0	; () banked
   833  0001B2  5187               	movf	?___wmul& (0+255),w,b
   834  0001B4  2793               	addwf	??_main& (0+255),f,b
   835  0001B6  5188               	movf	(?___wmul+1)& (0+255),w,b
   836  0001B8  2394               	addwfc	(??_main+1)& (0+255),f,b
   837  0001BA  0ED0               	movlw	208
   838  0001BC  2593               	addwf	??_main& (0+255),w,b
   839  0001BE  6E47               	movwf	_turns,c
   840  0001C0  0EFF               	movlw	255
   841  0001C2  2194               	addwfc	(??_main+1)& (0+255),w,b
   842  0001C4  6E48               	movwf	_turns+1,c
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 111: param_flag = 1;
   846  0001C6  0E01               	movlw	1
   847  0001C8  6E15               	movwf	_param_flag,c
   848                           
   849                           ; BSR set to: 0
   850                           ;main.c: 112: speed_select(caliber);
   851  0001CA  C076  F087         	movff	_caliber,speed_select@var
   852  0001CE  C077  F088         	movff	_caliber+1,speed_select@var+1
   853  0001D2  EC8D  F004         	call	_speed_select	;wreg free
   854                           
   855                           ;main.c: 113: } else if (palabra[0] == 'B') {
   856  0001D6  D721               	goto	l223
   857  0001D8                     l225:
   858  0001D8  0E42               	movlw	66
   859  0001DA  0100               	movlb	0	; () banked
   860  0001DC  1960               	xorwf	_palabra& (0+255),w,b
   861  0001DE  A4D8               	btfss	status,2,c
   862  0001E0  D01B               	goto	l227
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 115: PWM_duty = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   866  0001E2  0ED0               	movlw	208
   867  0001E4  2561               	addwf	(_palabra+1)& (0+255),w,b
   868  0001E6  6F87               	movwf	___wmul@multiplier& (0+255),b
   869  0001E8  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
   870  0001EA  0EFF               	movlw	255
   871  0001EC  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   872  0001EE  0E00               	movlw	0
   873  0001F0  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
   874  0001F2  0E0A               	movlw	10
   875  0001F4  6F89               	movwf	___wmul@multiplicand& (0+255),b
   876  0001F6  ECD8  F004         	call	___wmul	;wreg free
   877  0001FA  0100               	movlb	0	; () banked
   878  0001FC  5162               	movf	(_palabra+2)& (0+255),w,b
   879  0001FE  6F93               	movwf	??_main& (0+255),b
   880  000200  6B94               	clrf	(??_main+1)& (0+255),b
   881  000202  5187               	movf	?___wmul& (0+255),w,b
   882  000204  2793               	addwf	??_main& (0+255),f,b
   883  000206  5188               	movf	(?___wmul+1)& (0+255),w,b
   884  000208  2394               	addwfc	(??_main+1)& (0+255),f,b
   885  00020A  0ED0               	movlw	208
   886  00020C  2593               	addwf	??_main& (0+255),w,b
   887  00020E  6F99               	movwf	_PWM_duty& (0+255),b
   888  000210  0EFF               	movlw	255
   889  000212  2194               	addwfc	(??_main+1)& (0+255),w,b
   890  000214  6F9A               	movwf	(_PWM_duty+1)& (0+255),b
   891                           
   892                           ;main.c: 116: } else if ((palabra[0] == 'D') && (zero_flag)) {
   893  000216  D701               	goto	l223
   894  000218                     l227:
   895                           
   896                           ; BSR set to: 0
   897                           
   898                           ; BSR set to: 0
   899  000218  0E44               	movlw	68
   900  00021A  1960               	xorwf	_palabra& (0+255),w,b
   901  00021C  A4D8               	btfss	status,2,c
   902  00021E  D025               	goto	l229
   903                           
   904                           ; BSR set to: 0
   905  000220  5049               	movf	_zero_flag,w,c
   906  000222  B4D8               	btfsc	status,2,c
   907  000224  D022               	goto	l229
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 118: if (palabra[1] == '0') {
   911  000226  0E30               	movlw	48
   912  000228  1961               	xorwf	(_palabra+1)& (0+255),w,b
   913  00022A  A4D8               	btfss	status,2,c
   914  00022C  D004               	goto	l230
   915                           
   916                           ; BSR set to: 0
   917                           ;main.c: 120: MOT_3 = 1;
   918  00022E  0E01               	movlw	1
   919  000230  6E1F               	movwf	_MOT_3,c
   920                           
   921                           ;main.c: 121: DIR_3 = 0;
   922  000232  0E00               	movlw	0
   923  000234  D007               	goto	L1
   924  000236                     l230:
   925                           
   926                           ; BSR set to: 0
   927                           
   928                           ; BSR set to: 0
   929  000236  0E31               	movlw	49
   930  000238  1961               	xorwf	(_palabra+1)& (0+255),w,b
   931  00023A  A4D8               	btfss	status,2,c
   932  00023C  D005               	goto	l232
   933                           
   934                           ; BSR set to: 0
   935                           ;main.c: 124: MOT_3 = 1;
   936  00023E  0E01               	movlw	1
   937  000240  6E1F               	movwf	_MOT_3,c
   938                           
   939                           ;main.c: 125: DIR_3 = 1;
   940  000242  0E01               	movlw	1
   941  000244                     L1:
   942  000244  6E1E               	movwf	_DIR_3,c
   943                           
   944                           ;main.c: 126: } else if (palabra[1] == '2') {
   945  000246  D6E9               	goto	l223
   946  000248                     l232:
   947                           
   948                           ; BSR set to: 0
   949                           
   950                           ; BSR set to: 0
   951  000248  0E32               	movlw	50
   952  00024A  1961               	xorwf	(_palabra+1)& (0+255),w,b
   953  00024C  B4D8               	btfsc	status,2,c
   954  00024E  D033               	goto	u2060
   955                           
   956                           ; BSR set to: 0
   957                           
   958                           ; BSR set to: 0
   959                           
   960                           ;main.c: 129: } else if (palabra[1] == '3') {
   961                           
   962                           ; BSR set to: 0
   963                           ;main.c: 128: MOT_3 = 0;
   964  000250  0E33               	movlw	51
   965  000252  1961               	xorwf	(_palabra+1)& (0+255),w,b
   966  000254  A4D8               	btfss	status,2,c
   967  000256  D6E1               	goto	l223
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 131: if ((MOT_3 == 0) && (param_flag)) {
   971  000258  501F               	movf	_MOT_3,w,c
   972  00025A  A4D8               	btfss	status,2,c
   973  00025C  D6DE               	goto	l223
   974                           
   975                           ; BSR set to: 0
   976  00025E  5015               	movf	_param_flag,w,c
   977  000260  B4D8               	btfsc	status,2,c
   978  000262  D6DB               	goto	l223
   979                           
   980                           ; BSR set to: 0
   981                           ;main.c: 133: zero_mark();
   982  000264  EC43  F005         	call	_zero_mark	;wreg free
   983                           
   984                           ;main.c: 134: }
   985                           ;main.c: 135: }
   986                           ;main.c: 138: } else if (palabra[0] == 'M') {
   987  000268  D6D8               	goto	l223
   988  00026A                     l229:
   989  00026A  0E4D               	movlw	77
   990  00026C  0100               	movlb	0	; () banked
   991  00026E  1960               	xorwf	_palabra& (0+255),w,b
   992  000270  A4D8               	btfss	status,2,c
   993  000272  D024               	goto	l239
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 140: if (palabra[1] == '1') {
   997  000274  0E31               	movlw	49
   998  000276  1961               	xorwf	(_palabra+1)& (0+255),w,b
   999  000278  A4D8               	btfss	status,2,c
  1000  00027A  D008               	goto	l240
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 141: MOT_1 = !MOT_1;
  1004  00027C  5020               	movf	_MOT_1,w,c
  1005  00027E  A4D8               	btfss	status,2,c
  1006  000280  D002               	goto	u2000
  1007  000282  0E01               	movlw	1
  1008  000284  D001               	goto	u2010
  1009  000286                     u2000:
  1010  000286  0E00               	movlw	0
  1011  000288                     u2010:
  1012  000288  6E20               	movwf	_MOT_1,c
  1013                           
  1014                           ;main.c: 142: } else if (palabra[1] == '2') {
  1015  00028A  D6C7               	goto	l223
  1016  00028C                     l240:
  1017                           
  1018                           ; BSR set to: 0
  1019                           
  1020                           ; BSR set to: 0
  1021  00028C  0E32               	movlw	50
  1022  00028E  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1023  000290  A4D8               	btfss	status,2,c
  1024  000292  D008               	goto	l242
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;main.c: 143: MOT_2 = !MOT_2;
  1028  000294  501D               	movf	_MOT_2,w,c
  1029  000296  A4D8               	btfss	status,2,c
  1030  000298  D002               	goto	u2030
  1031  00029A  0E01               	movlw	1
  1032  00029C  D001               	goto	u2040
  1033  00029E                     u2030:
  1034  00029E  0E00               	movlw	0
  1035  0002A0                     u2040:
  1036  0002A0  6E1D               	movwf	_MOT_2,c
  1037                           
  1038                           ;main.c: 144: } else if (palabra[1] == '3') {
  1039  0002A2  D6BB               	goto	l223
  1040  0002A4                     l242:
  1041                           
  1042                           ; BSR set to: 0
  1043                           
  1044                           ; BSR set to: 0
  1045  0002A4  0E33               	movlw	51
  1046  0002A6  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1047  0002A8  A4D8               	btfss	status,2,c
  1048  0002AA  D6B7               	goto	l223
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 145: MOT_3 = !MOT_3;
  1052  0002AC  501F               	movf	_MOT_3,w,c
  1053  0002AE  A4D8               	btfss	status,2,c
  1054  0002B0  D002               	goto	u2060
  1055  0002B2  0E01               	movlw	1
  1056  0002B4  D001               	goto	u2070
  1057  0002B6                     u2060:
  1058  0002B6  0E00               	movlw	0
  1059  0002B8                     u2070:
  1060  0002B8  6E1F               	movwf	_MOT_3,c
  1061                           
  1062                           ; BSR set to: 0
  1063                           ;main.c: 146: }
  1064                           ;main.c: 147: } else if (palabra[0] == 'N') {
  1065                           
  1066                           ; BSR set to: 0
  1067                           
  1068                           ; BSR set to: 0
  1069  0002BA  D6AF               	goto	l223
  1070  0002BC                     l239:
  1071                           
  1072                           ; BSR set to: 0
  1073                           
  1074                           ; BSR set to: 0
  1075  0002BC  0E4E               	movlw	78
  1076  0002BE  1960               	xorwf	_palabra& (0+255),w,b
  1077  0002C0  A4D8               	btfss	status,2,c
  1078  0002C2  D008               	goto	l246
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;main.c: 149: enable = !enable;
  1082  0002C4  5013               	movf	_enable,w,c
  1083  0002C6  A4D8               	btfss	status,2,c
  1084  0002C8  D002               	goto	u2090
  1085  0002CA  0E01               	movlw	1
  1086  0002CC  D001               	goto	u2100
  1087  0002CE                     u2090:
  1088  0002CE  0E00               	movlw	0
  1089  0002D0                     u2100:
  1090  0002D0  6E13               	movwf	_enable,c
  1091                           
  1092                           ;main.c: 150: } else if (palabra[0] == 'W') {
  1093  0002D2  D6A3               	goto	l223
  1094  0002D4                     l246:
  1095                           
  1096                           ; BSR set to: 0
  1097                           
  1098                           ; BSR set to: 0
  1099  0002D4  0E57               	movlw	87
  1100  0002D6  1960               	xorwf	_palabra& (0+255),w,b
  1101  0002D8  A4D8               	btfss	status,2,c
  1102  0002DA  D003               	goto	l248
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 152: unwind();
  1106  0002DC  EC35  F005         	call	_unwind	;wreg free
  1107                           
  1108                           ;main.c: 153: } else if (palabra[0] == 'R') {
  1109  0002E0  D69C               	goto	l223
  1110  0002E2                     l248:
  1111  0002E2  0E52               	movlw	82
  1112  0002E4  0100               	movlb	0	; () banked
  1113  0002E6  1960               	xorwf	_palabra& (0+255),w,b
  1114  0002E8  A4D8               	btfss	status,2,c
  1115  0002EA  D003               	goto	l250
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 154: reset();
  1119  0002EC  EC66  F005         	call	_reset	;wreg free
  1120                           
  1121                           ;main.c: 155: } else if (palabra[0] == 'E') {
  1122  0002F0  D694               	goto	l223
  1123  0002F2                     l250:
  1124  0002F2  0E45               	movlw	69
  1125  0002F4  0100               	movlb	0	; () banked
  1126  0002F6  1960               	xorwf	_palabra& (0+255),w,b
  1127  0002F8  A4D8               	btfss	status,2,c
  1128  0002FA  D68F               	goto	l223
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;main.c: 156: if (palabra[1] == 'D') {
  1132  0002FC  0E44               	movlw	68
  1133  0002FE  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1134  000300  A4D8               	btfss	status,2,c
  1135  000302  D026               	goto	l253
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 158: DIR_4 = 1;
  1139  000304  0E01               	movlw	1
  1140  000306  6E16               	movwf	_DIR_4,c
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 159: steps_4 = ((palabra[2] - 48) * 100) + ((palabra[3] - 48) * 10) + ((palabra
      +                          [4] - 48));
  1144  000308  0ED0               	movlw	208
  1145  00030A  2562               	addwf	(_palabra+2)& (0+255),w,b
  1146  00030C  6F87               	movwf	___wmul@multiplier& (0+255),b
  1147  00030E  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
  1148  000310  0EFF               	movlw	255
  1149  000312  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1150  000314  0E00               	movlw	0
  1151  000316  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1152  000318  0E64               	movlw	100
  1153  00031A  6F89               	movwf	___wmul@multiplicand& (0+255),b
  1154  00031C  ECD8  F004         	call	___wmul	;wreg free
  1155  000320  0100               	movlb	0	; () banked
  1156  000322  5164               	movf	(_palabra+4)& (0+255),w,b
  1157  000324  6F93               	movwf	??_main& (0+255),b
  1158  000326  6B94               	clrf	(??_main+1)& (0+255),b
  1159  000328  5187               	movf	?___wmul& (0+255),w,b
  1160  00032A  2793               	addwf	??_main& (0+255),f,b
  1161  00032C  5188               	movf	(?___wmul+1)& (0+255),w,b
  1162  00032E  2394               	addwfc	(??_main+1)& (0+255),f,b
  1163  000330  0ED0               	movlw	208
  1164  000332  2563               	addwf	(_palabra+3)& (0+255),w,b
  1165  000334  6F87               	movwf	___wmul@multiplier& (0+255),b
  1166  000336  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
  1167  000338  0EFF               	movlw	255
  1168  00033A  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1169  00033C  0E00               	movlw	0
  1170  00033E  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1171  000340  0E0A               	movlw	10
  1172  000342  6F89               	movwf	___wmul@multiplicand& (0+255),b
  1173  000344  ECD8  F004         	call	___wmul	;wreg free
  1174  000348  D029               	goto	L2
  1175  00034A                     l2186:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;main.c: 160: move_4 = 1;
  1179  00034A  0E01               	movlw	1
  1180  00034C  6E1C               	movwf	_move_4,c
  1181                           
  1182                           ;main.c: 161: } else if (palabra[1] == 'I') {
  1183  00034E  D665               	goto	l223
  1184  000350                     l253:
  1185                           
  1186                           ; BSR set to: 0
  1187                           
  1188                           ; BSR set to: 0
  1189  000350  0E49               	movlw	73
  1190  000352  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1191  000354  A4D8               	btfss	status,2,c
  1192  000356  D661               	goto	l223
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 163: DIR_4 = 0;
  1196  000358  0E00               	movlw	0
  1197  00035A  6E16               	movwf	_DIR_4,c
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;main.c: 164: steps_4 = ((palabra[2] - 48) * 100) + ((palabra[3] - 48) * 10) + ((palabra
      +                          [4] - 48));
  1201  00035C  0ED0               	movlw	208
  1202  00035E  2562               	addwf	(_palabra+2)& (0+255),w,b
  1203  000360  6F87               	movwf	___wmul@multiplier& (0+255),b
  1204  000362  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
  1205  000364  0EFF               	movlw	255
  1206  000366  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1207  000368  0E00               	movlw	0
  1208  00036A  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1209  00036C  0E64               	movlw	100
  1210  00036E  6F89               	movwf	___wmul@multiplicand& (0+255),b
  1211  000370  ECD8  F004         	call	___wmul	;wreg free
  1212  000374  0100               	movlb	0	; () banked
  1213  000376  5164               	movf	(_palabra+4)& (0+255),w,b
  1214  000378  6F93               	movwf	??_main& (0+255),b
  1215  00037A  6B94               	clrf	(??_main+1)& (0+255),b
  1216  00037C  5187               	movf	?___wmul& (0+255),w,b
  1217  00037E  2793               	addwf	??_main& (0+255),f,b
  1218  000380  5188               	movf	(?___wmul+1)& (0+255),w,b
  1219  000382  2394               	addwfc	(??_main+1)& (0+255),f,b
  1220  000384  0ED0               	movlw	208
  1221  000386  2563               	addwf	(_palabra+3)& (0+255),w,b
  1222  000388  6F87               	movwf	___wmul@multiplier& (0+255),b
  1223  00038A  6B88               	clrf	(___wmul@multiplier+1)& (0+255),b
  1224  00038C  0EFF               	movlw	255
  1225  00038E  2388               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1226  000390  0E00               	movlw	0
  1227  000392  6F8A               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1228  000394  0E0A               	movlw	10
  1229  000396  6F89               	movwf	___wmul@multiplicand& (0+255),b
  1230  000398  ECD8  F004         	call	___wmul	;wreg free
  1231  00039C                     L2:
  1232  00039C  0100               	movlb	0	; () banked
  1233  00039E  5187               	movf	?___wmul& (0+255),w,b
  1234  0003A0  2793               	addwf	??_main& (0+255),f,b
  1235  0003A2  5188               	movf	(?___wmul+1)& (0+255),w,b
  1236  0003A4  2394               	addwfc	(??_main+1)& (0+255),f,b
  1237  0003A6  0ED0               	movlw	208
  1238  0003A8  2593               	addwf	??_main& (0+255),w,b
  1239  0003AA  6E11               	movwf	_steps_4,c
  1240  0003AC  0EFF               	movlw	255
  1241  0003AE  2194               	addwfc	(??_main+1)& (0+255),w,b
  1242  0003B0  6E12               	movwf	_steps_4+1,c
  1243  0003B2  D7CB               	goto	l2186
  1244  0003B4                     l224:
  1245                           
  1246                           ; BSR set to: 0
  1247  0003B4  B2C2               	btfsc	4034,1,c	;volatile
  1248  0003B6  D631               	goto	l223
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 172: _delay((unsigned long)((4)*(8000000/4000.0)));
  1252  0003B8  0E0B               	movlw	11
  1253  0003BA  0100               	movlb	0	; () banked
  1254  0003BC  6F93               	movwf	??_main& (0+255),b
  1255  0003BE  0E62               	movlw	98
  1256  0003C0                     u2177:
  1257  0003C0  2EE8               	decfsz	wreg,f,c
  1258  0003C2  D7FE               	bra	u2177
  1259  0003C4  2F93               	decfsz	??_main& (0+255),f,b
  1260  0003C6  D7FC               	bra	u2177
  1261  0003C8  F000               	nop	
  1262                           
  1263                           ;main.c: 174: GODONE = 1;
  1264  0003CA  82C2               	bsf	4034,1,c	;volatile
  1265                           
  1266                           ;main.c: 175: send[0] = 'A';
  1267  0003CC  0E41               	movlw	65
  1268  0003CE  0100               	movlb	0	; () banked
  1269  0003D0  6F80               	movwf	_send& (0+255),b
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 176: send[1] = '0' + (ADC_value_press / 1000);
  1273  0003D2  C00D  F08C         	movff	_ADC_value_press,___lwdiv@dividend
  1274  0003D6  C00E  F08D         	movff	_ADC_value_press+1,___lwdiv@dividend+1
  1275  0003DA  0E03               	movlw	3
  1276  0003DC  6F8F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1277  0003DE  0EE8               	movlw	232
  1278  0003E0  6F8E               	movwf	___lwdiv@divisor& (0+255),b
  1279  0003E2  EC63  F004         	call	___lwdiv	;wreg free
  1280  0003E6  0100               	movlb	0	; () banked
  1281  0003E8  518C               	movf	?___lwdiv& (0+255),w,b
  1282  0003EA  0F30               	addlw	48
  1283  0003EC  6F81               	movwf	(_send+1)& (0+255),b
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;main.c: 177: send[2] = '0' + ((ADC_value_press % 1000) / 100);
  1287  0003EE  0E03               	movlw	3
  1288  0003F0  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1289  0003F2  0EE8               	movlw	232
  1290  0003F4  6F89               	movwf	___lwmod@divisor& (0+255),b
  1291  0003F6  C00D  F087         	movff	_ADC_value_press,___lwmod@dividend
  1292  0003FA  C00E  F088         	movff	_ADC_value_press+1,___lwmod@dividend+1
  1293  0003FE  ECB6  F004         	call	___lwmod	;wreg free
  1294  000402  C087  F08C         	movff	?___lwmod,___lwdiv@dividend
  1295  000406  C088  F08D         	movff	?___lwmod+1,___lwdiv@dividend+1
  1296  00040A  0E00               	movlw	0
  1297  00040C  0100               	movlb	0	; () banked
  1298  00040E  6F8F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1299  000410  0E64               	movlw	100
  1300  000412  6F8E               	movwf	___lwdiv@divisor& (0+255),b
  1301  000414  EC63  F004         	call	___lwdiv	;wreg free
  1302  000418  0100               	movlb	0	; () banked
  1303  00041A  518C               	movf	?___lwdiv& (0+255),w,b
  1304  00041C  0F30               	addlw	48
  1305  00041E  6F82               	movwf	(_send+2)& (0+255),b
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;main.c: 178: send[3] = '0' + (((ADC_value_press % 1000) % 100) / 10);
  1309  000420  0E03               	movlw	3
  1310  000422  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1311  000424  0EE8               	movlw	232
  1312  000426  6F89               	movwf	___lwmod@divisor& (0+255),b
  1313  000428  C00D  F087         	movff	_ADC_value_press,___lwmod@dividend
  1314  00042C  C00E  F088         	movff	_ADC_value_press+1,___lwmod@dividend+1
  1315  000430  ECB6  F004         	call	___lwmod	;wreg free
  1316  000434  C087  F097         	movff	?___lwmod,_main$1965
  1317  000438  C088  F098         	movff	?___lwmod+1,_main$1965+1
  1318                           
  1319                           ;main.c: 178: send[3] = '0' + (((ADC_value_press % 1000) % 100) / 10);
  1320  00043C  0E00               	movlw	0
  1321  00043E  0100               	movlb	0	; () banked
  1322  000440  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1323  000442  0E64               	movlw	100
  1324  000444  6F89               	movwf	___lwmod@divisor& (0+255),b
  1325  000446  C097  F087         	movff	_main$1965,___lwmod@dividend
  1326  00044A  C098  F088         	movff	_main$1965+1,___lwmod@dividend+1
  1327  00044E  ECB6  F004         	call	___lwmod	;wreg free
  1328  000452  C087  F08C         	movff	?___lwmod,___lwdiv@dividend
  1329  000456  C088  F08D         	movff	?___lwmod+1,___lwdiv@dividend+1
  1330  00045A  0E00               	movlw	0
  1331  00045C  0100               	movlb	0	; () banked
  1332  00045E  6F8F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1333  000460  0E0A               	movlw	10
  1334  000462  6F8E               	movwf	___lwdiv@divisor& (0+255),b
  1335  000464  EC63  F004         	call	___lwdiv	;wreg free
  1336  000468  0100               	movlb	0	; () banked
  1337  00046A  518C               	movf	?___lwdiv& (0+255),w,b
  1338  00046C  0F30               	addlw	48
  1339  00046E  6F83               	movwf	(_send+3)& (0+255),b
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 179: send[4] = '0' + ((((ADC_value_press % 1000) % 100) / 10) % 10);
  1343  000470  0E03               	movlw	3
  1344  000472  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1345  000474  0EE8               	movlw	232
  1346  000476  6F89               	movwf	___lwmod@divisor& (0+255),b
  1347  000478  C00D  F087         	movff	_ADC_value_press,___lwmod@dividend
  1348  00047C  C00E  F088         	movff	_ADC_value_press+1,___lwmod@dividend+1
  1349  000480  ECB6  F004         	call	___lwmod	;wreg free
  1350  000484  C087  F097         	movff	?___lwmod,_main$1965
  1351  000488  C088  F098         	movff	?___lwmod+1,_main$1965+1
  1352                           
  1353                           ;main.c: 179: send[4] = '0' + ((((ADC_value_press % 1000) % 100) / 10) % 10);
  1354  00048C  0E00               	movlw	0
  1355  00048E  0100               	movlb	0	; () banked
  1356  000490  6F8F               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1357  000492  0E0A               	movlw	10
  1358  000494  6F8E               	movwf	___lwdiv@divisor& (0+255),b
  1359  000496  0E00               	movlw	0
  1360  000498  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1361  00049A  0E64               	movlw	100
  1362  00049C  6F89               	movwf	___lwmod@divisor& (0+255),b
  1363  00049E  C097  F087         	movff	_main$1965,___lwmod@dividend
  1364  0004A2  C098  F088         	movff	_main$1965+1,___lwmod@dividend+1
  1365  0004A6  ECB6  F004         	call	___lwmod	;wreg free
  1366  0004AA  C087  F08C         	movff	?___lwmod,___lwdiv@dividend
  1367  0004AE  C088  F08D         	movff	?___lwmod+1,___lwdiv@dividend+1
  1368  0004B2  EC63  F004         	call	___lwdiv	;wreg free
  1369  0004B6  C08C  F095         	movff	?___lwdiv,_main$1966
  1370  0004BA  C08D  F096         	movff	?___lwdiv+1,_main$1966+1
  1371                           
  1372                           ;main.c: 179: send[4] = '0' + ((((ADC_value_press % 1000) % 100) / 10) % 10);
  1373  0004BE  C095  F087         	movff	_main$1966,___lwmod@dividend
  1374  0004C2  C096  F088         	movff	_main$1966+1,___lwmod@dividend+1
  1375  0004C6  0E00               	movlw	0
  1376  0004C8  0100               	movlb	0	; () banked
  1377  0004CA  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1378  0004CC  0E0A               	movlw	10
  1379  0004CE  6F89               	movwf	___lwmod@divisor& (0+255),b
  1380  0004D0  ECB6  F004         	call	___lwmod	;wreg free
  1381  0004D4  0100               	movlb	0	; () banked
  1382  0004D6  5187               	movf	?___lwmod& (0+255),w,b
  1383  0004D8  0F30               	addlw	48
  1384  0004DA  6F84               	movwf	(_send+4)& (0+255),b
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 180: send[5] = '\n';
  1388  0004DC  0E0A               	movlw	10
  1389  0004DE  6F85               	movwf	(_send+5)& (0+255),b
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 181: send_String(send);
  1393  0004E0  0E80               	movlw	low _send
  1394  0004E2  6F88               	movwf	send_String@out& (0+255),b
  1395  0004E4  0E00               	movlw	high _send
  1396  0004E6  6F89               	movwf	(send_String@out+1)& (0+255),b
  1397  0004E8  ECEC  F004         	call	_send_String	;wreg free
  1398  0004EC  D596               	goto	l223
  1399  0004EE                     __end_of_main:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           postdec1	equ	0xFE5
  1408                           fsr1l	equ	0xFE1
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function _zero_mark *****************
  1412 ;; Defined at:
  1413 ;;		line 207 in file "main.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0
  1428 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1430 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1431 ;;Total ram usage:        0 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    3
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_main
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text1
  1442  000A86                     __ptext1:
  1443                           	opt stack 0
  1444  000A86                     _zero_mark:
  1445                           	opt stack 27
  1446                           
  1447                           ;main.c: 209: DIR_3 = 1;
  1448                           
  1449                           ;incstack = 0
  1450  000A86  0E01               	movlw	1
  1451  000A88  6E1E               	movwf	_DIR_3,c
  1452                           
  1453                           ;main.c: 210: T1CONbits.TMR1ON = 0;
  1454  000A8A  90CD               	bcf	4045,0,c	;volatile
  1455                           
  1456                           ;main.c: 211: T0CONbits.TMR0ON = 1;
  1457  000A8C  8ED5               	bsf	4053,7,c	;volatile
  1458                           
  1459                           ;main.c: 212: zero_flag = 0;
  1460  000A8E  0E00               	movlw	0
  1461  000A90  6E49               	movwf	_zero_flag,c
  1462                           
  1463                           ;main.c: 213: winding = 1;
  1464  000A92  0E01               	movlw	1
  1465  000A94  6E1B               	movwf	_winding,c
  1466                           
  1467                           ;main.c: 214: MOT_1 = 1;
  1468  000A96  0E01               	movlw	1
  1469  000A98  6E20               	movwf	_MOT_1,c
  1470                           
  1471                           ;main.c: 215: MOT_3 = 1;
  1472  000A9A  0E01               	movlw	1
  1473  000A9C  6E1F               	movwf	_MOT_3,c
  1474  000A9E  0012               	return		;funcret
  1475  000AA0                     __end_of_zero_mark:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1l	equ	0xFE1
  1485                           status	equ	0xFD8
  1486                           
  1487 ;; *************** function _unwind *****************
  1488 ;; Defined at:
  1489 ;;		line 224 in file "main.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1506 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1507 ;;Total ram usage:        0 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    3
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text2
  1518  000A6A                     __ptext2:
  1519                           	opt stack 0
  1520  000A6A                     _unwind:
  1521                           	opt stack 27
  1522                           
  1523                           ;main.c: 226: enable = !enable;
  1524                           
  1525                           ;incstack = 0
  1526  000A6A  5013               	movf	_enable,w,c
  1527  000A6C  A4D8               	btfss	status,2,c
  1528  000A6E  D002               	goto	u1710
  1529  000A70  0E01               	movlw	1
  1530  000A72  D001               	goto	u1720
  1531  000A74                     u1710:
  1532  000A74  0E00               	movlw	0
  1533  000A76                     u1720:
  1534  000A76  6E13               	movwf	_enable,c
  1535                           
  1536                           ;main.c: 227: T1CONbits.TMR1ON = 1;
  1537  000A78  80CD               	bsf	4045,0,c	;volatile
  1538                           
  1539                           ;main.c: 228: T0CONbits.TMR0ON = 0;
  1540  000A7A  9ED5               	bcf	4053,7,c	;volatile
  1541                           
  1542                           ;main.c: 229: MOT_3 = 0;
  1543  000A7C  0E00               	movlw	0
  1544  000A7E  6E1F               	movwf	_MOT_3,c
  1545                           
  1546                           ;main.c: 230: MOT_2 = 1;
  1547  000A80  0E01               	movlw	1
  1548  000A82  6E1D               	movwf	_MOT_2,c
  1549  000A84  0012               	return		;funcret
  1550  000A86                     __end_of_unwind:
  1551                           	opt stack 0
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _speed_select *****************
  1563 ;; Defined at:
  1564 ;;		line 252 in file "main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  var             2    0[BANK0 ] unsigned int 
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         0       2       0       0       0       0       0       0       0
  1579 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1580 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1581 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        4 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    3
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_main
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text3
  1593  00091A                     __ptext3:
  1594                           	opt stack 0
  1595  00091A                     _speed_select:
  1596                           	opt stack 27
  1597                           
  1598                           ;main.c: 254: MOT_4 = 1;
  1599                           
  1600                           ;incstack = 0
  1601  00091A  0E01               	movlw	1
  1602  00091C  6E4A               	movwf	_MOT_4,c
  1603                           
  1604                           ;main.c: 255: DIR_4 = 0;
  1605  00091E  0E00               	movlw	0
  1606  000920  6E16               	movwf	_DIR_4,c
  1607                           
  1608                           ;main.c: 256: switch (var) {
  1609  000922  D011               	goto	l290
  1610  000924                     
  1611                           ;main.c: 259: count_1 = 2;
  1612  000924  0E00               	movlw	0
  1613  000926  6E44               	movwf	_count_1+1,c
  1614  000928  0E02               	movlw	2
  1615  00092A  6E43               	movwf	_count_1,c
  1616                           
  1617                           ;main.c: 260: count_3 = 132;
  1618  00092C  0E00               	movlw	0
  1619  00092E  6E42               	movwf	_count_3+1,c
  1620  000930  0E84               	movlw	132
  1621  000932  6E41               	movwf	_count_3,c
  1622                           
  1623                           ;main.c: 261: steps_4 = 200;
  1624  000934  0E00               	movlw	0
  1625  000936  6E12               	movwf	_steps_4+1,c
  1626  000938  0EC8               	movlw	200
  1627  00093A  D003               	goto	L3
  1628  00093C                     
  1629                           ;main.c: 266: steps_4 = 400;
  1630  00093C  0E01               	movlw	1
  1631  00093E  6E12               	movwf	_steps_4+1,c
  1632  000940  0E90               	movlw	144
  1633  000942                     L3:
  1634  000942  6E11               	movwf	_steps_4,c
  1635                           
  1636                           ;main.c: 267: }
  1637  000944  D010               	goto	l292
  1638  000946                     l290:
  1639  000946  C087  F089         	movff	speed_select@var,??_speed_select
  1640  00094A  C088  F08A         	movff	speed_select@var+1,??_speed_select+1
  1641                           
  1642                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1643                           ; Switch size 1, requested type "space"
  1644                           ; Number of cases is 1, Range of values is 0 to 0
  1645                           ; switch strategies available:
  1646                           ; Name         Instructions Cycles
  1647                           ; simple_byte            4     3 (average)
  1648                           ;	Chosen strategy is simple_byte
  1649  00094E  0100               	movlb	0	; () banked
  1650  000950  518A               	movf	(??_speed_select+1)& (0+255),w,b
  1651  000952  0A00               	xorlw	0	; case 0
  1652  000954  A4D8               	btfss	status,2,c
  1653  000956  D007               	goto	l292
  1654                           
  1655                           ; BSR set to: 0
  1656                           ; Switch size 1, requested type "space"
  1657                           ; Number of cases is 2, Range of values is 25 to 33
  1658                           ; switch strategies available:
  1659                           ; Name         Instructions Cycles
  1660                           ; simple_byte            7     4 (average)
  1661                           ;	Chosen strategy is simple_byte
  1662  000958  5189               	movf	??_speed_select& (0+255),w,b
  1663  00095A  0A19               	xorlw	25	; case 25
  1664  00095C  B4D8               	btfsc	status,2,c
  1665  00095E  D7E2               	goto	l291
  1666  000960  0A38               	xorlw	56	; case 33
  1667  000962  B4D8               	btfsc	status,2,c
  1668  000964  D7EB               	goto	l293
  1669  000966                     l292:
  1670                           
  1671                           ;main.c: 268: move_4 = 1;
  1672                           
  1673                           ; BSR set to: 0
  1674  000966  0E01               	movlw	1
  1675  000968  6E1C               	movwf	_move_4,c
  1676  00096A  0012               	return		;funcret
  1677  00096C                     __end_of_speed_select:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1l	equ	0xFE1
  1687                           status	equ	0xFD8
  1688                           
  1689 ;; *************** function _send_String *****************
  1690 ;; Defined at:
  1691 ;;		line 195 in file "main.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;  out             2    1[BANK0 ] PTR const unsigned char 
  1694 ;;		 -> send(7), 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1706 ;;      Params:         0       2       0       0       0       0       0       0       0
  1707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1709 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1710 ;;Total ram usage:        2 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    4
  1713 ;; This function calls:
  1714 ;;		_trans_Char
  1715 ;; This function is called by:
  1716 ;;		_main
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           	psect	text4
  1721  0009D8                     __ptext4:
  1722                           	opt stack 0
  1723  0009D8                     _send_String:
  1724                           	opt stack 26
  1725                           
  1726                           ;main.c: 196: while (*out != '\0') {
  1727                           
  1728                           ;incstack = 0
  1729  0009D8  D00A               	goto	l269
  1730  0009DA                     
  1731                           ;main.c: 197: trans_Char(*out);
  1732  0009DA  C088  FFD9         	movff	send_String@out,fsr2l
  1733  0009DE  C089  FFDA         	movff	send_String@out+1,fsr2h
  1734  0009E2  50DF               	movf	indf2,w,c
  1735  0009E4  EC50  F005         	call	_trans_Char
  1736                           
  1737                           ;main.c: 198: out++;
  1738  0009E8  0100               	movlb	0	; () banked
  1739  0009EA  4B88               	infsnz	send_String@out& (0+255),f,b
  1740  0009EC  2B89               	incf	(send_String@out+1)& (0+255),f,b
  1741  0009EE                     l269:
  1742                           
  1743                           ; BSR set to: 0
  1744  0009EE  C088  FFD9         	movff	send_String@out,fsr2l
  1745  0009F2  C089  FFDA         	movff	send_String@out+1,fsr2h
  1746  0009F6  50DF               	movf	indf2,w,c
  1747  0009F8  B4D8               	btfsc	status,2,c
  1748  0009FA  0012               	return	
  1749  0009FC  D7EE               	goto	l270
  1750  0009FE                     __end_of_send_String:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           postdec1	equ	0xFE5
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _trans_Char *****************
  1766 ;; Defined at:
  1767 ;;		line 190 in file "main.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  out             1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  out             1    0[BANK0 ] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0
  1782 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1784 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    3
  1788 ;; This function calls:
  1789 ;;		Nothing
  1790 ;; This function is called by:
  1791 ;;		_send_String
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text5
  1796  000AA0                     __ptext5:
  1797                           	opt stack 0
  1798  000AA0                     _trans_Char:
  1799                           	opt stack 26
  1800                           
  1801                           ;incstack = 0
  1802                           ;trans_Char@out stored from wreg
  1803  000AA0  0100               	movlb	0	; () banked
  1804  000AA2  6F87               	movwf	trans_Char@out& (0+255),b
  1805  000AA4                     
  1806                           ;main.c: 191: while (TXIF == 0);
  1807  000AA4  A89E               	btfss	3998,4,c	;volatile
  1808  000AA6  D7FE               	goto	l1900
  1809                           
  1810                           ;main.c: 192: TXREG = out;
  1811  000AA8  C087  FFAD         	movff	trans_Char@out,4013	;volatile
  1812  000AAC  0012               	return		;funcret
  1813  000AAE                     __end_of_trans_Char:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postdec1	equ	0xFE5
  1822                           fsr1l	equ	0xFE1
  1823                           indf2	equ	0xFDF
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function _reset *****************
  1829 ;; Defined at:
  1830 ;;		line 246 in file "main.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		None
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1847 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1848 ;;Total ram usage:        0 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    3
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text6
  1859  000ACC                     __ptext6:
  1860                           	opt stack 0
  1861  000ACC                     _reset:
  1862                           	opt stack 27
  1863                           
  1864                           ;incstack = 0
  1865  000ACC  00FF               	reset		;# 
  1866  000ACE  0012               	return		;funcret
  1867  000AD0                     __end_of_reset:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postdec1	equ	0xFE5
  1876                           fsr1l	equ	0xFE1
  1877                           indf2	equ	0xFDF
  1878                           fsr2h	equ	0xFDA
  1879                           fsr2l	equ	0xFD9
  1880                           status	equ	0xFD8
  1881                           
  1882 ;; *************** function ___wmul *****************
  1883 ;; Defined at:
  1884 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1887 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  product         2    4[BANK0 ] unsigned int 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  2    0[BANK0 ] unsigned int 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0, prodl, prodh
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1899 ;;      Params:         0       4       0       0       0       0       0       0       0
  1900 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1902 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1903 ;;Total ram usage:        6 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    3
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text7
  1914  0009B0                     __ptext7:
  1915                           	opt stack 0
  1916  0009B0                     ___wmul:
  1917                           	opt stack 27
  1918                           
  1919                           ;incstack = 0
  1920  0009B0  0100               	movlb	0	; () banked
  1921  0009B2  5187               	movf	___wmul@multiplier& (0+255),w,b
  1922  0009B4  0389               	mulwf	___wmul@multiplicand& (0+255),b
  1923  0009B6  CFF3 F08B          	movff	prodl,___wmul@product
  1924  0009BA  CFF4 F08C          	movff	prodh,___wmul@product+1
  1925  0009BE  5187               	movf	___wmul@multiplier& (0+255),w,b
  1926  0009C0  038A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1927  0009C2  50F3               	movf	prodl,w,c
  1928  0009C4  278C               	addwf	(___wmul@product+1)& (0+255),f,b
  1929  0009C6  5188               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1930  0009C8  0389               	mulwf	___wmul@multiplicand& (0+255),b
  1931  0009CA  50F3               	movf	prodl,w,c
  1932  0009CC  278C               	addwf	(___wmul@product+1)& (0+255),f,b
  1933                           
  1934                           ; BSR set to: 0
  1935  0009CE  C08B  F087         	movff	___wmul@product,?___wmul
  1936  0009D2  C08C  F088         	movff	___wmul@product+1,?___wmul+1
  1937  0009D6  0012               	return	
  1938  0009D8                     __end_of___wmul:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postdec1	equ	0xFE5
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           fsr2h	equ	0xFDA
  1952                           fsr2l	equ	0xFD9
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function ___lwmod *****************
  1956 ;; Defined at:
  1957 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  dividend        2    0[BANK0 ] unsigned int 
  1960 ;;  divisor         2    2[BANK0 ] unsigned int 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  counter         1    4[BANK0 ] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  2    0[BANK0 ] unsigned int 
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1972 ;;      Params:         0       4       0       0       0       0       0       0       0
  1973 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1975 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1976 ;;Total ram usage:        5 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    3
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text8
  1987  00096C                     __ptext8:
  1988                           	opt stack 0
  1989  00096C                     ___lwmod:
  1990                           	opt stack 27
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;incstack = 0
  1994  00096C  0100               	movlb	0	; () banked
  1995  00096E  5189               	movf	___lwmod@divisor& (0+255),w,b
  1996  000970  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1997  000972  B4D8               	btfsc	status,2,c
  1998  000974  D018               	goto	l793
  1999                           
  2000                           ; BSR set to: 0
  2001  000976  0E01               	movlw	1
  2002  000978  6F8B               	movwf	___lwmod@counter& (0+255),b
  2003  00097A  D004               	goto	l788
  2004  00097C                     
  2005                           ; BSR set to: 0
  2006                           
  2007                           ; BSR set to: 0
  2008  00097C  90D8               	bcf	status,0,c
  2009  00097E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  2010  000980  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2011  000982  2B8B               	incf	___lwmod@counter& (0+255),f,b
  2012  000984                     l788:
  2013                           
  2014                           ; BSR set to: 0
  2015                           
  2016                           ; BSR set to: 0
  2017  000984  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2018  000986  D7FA               	goto	l789
  2019  000988                     u1780:
  2020                           
  2021                           ; BSR set to: 0
  2022                           
  2023                           ; BSR set to: 0
  2024                           
  2025                           ; BSR set to: 0
  2026  000988  5189               	movf	___lwmod@divisor& (0+255),w,b
  2027  00098A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  2028  00098C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2029  00098E  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2030  000990  A0D8               	btfss	status,0,c
  2031  000992  D004               	goto	l792
  2032                           
  2033                           ; BSR set to: 0
  2034  000994  5189               	movf	___lwmod@divisor& (0+255),w,b
  2035  000996  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  2036  000998  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2037  00099A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2038  00099C                     l792:
  2039                           
  2040                           ; BSR set to: 0
  2041                           
  2042                           ; BSR set to: 0
  2043  00099C  90D8               	bcf	status,0,c
  2044  00099E  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2045  0009A0  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  2046                           
  2047                           ; BSR set to: 0
  2048  0009A2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  2049  0009A4  D7F1               	goto	u1780
  2050  0009A6                     l793:
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055  0009A6  C087  F087         	movff	___lwmod@dividend,?___lwmod
  2056  0009AA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  2057                           
  2058                           ; BSR set to: 0
  2059  0009AE  0012               	return		;funcret
  2060  0009B0                     __end_of___lwmod:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           postdec1	equ	0xFE5
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function ___lwdiv *****************
  2078 ;; Defined at:
  2079 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  dividend        2    5[BANK0 ] unsigned int 
  2082 ;;  divisor         2    7[BANK0 ] unsigned int 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  quotient        2   10[BANK0 ] unsigned int 
  2085 ;;  counter         1    9[BANK0 ] unsigned char 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  2    5[BANK0 ] unsigned int 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2095 ;;      Params:         0       4       0       0       0       0       0       0       0
  2096 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2098 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2099 ;;Total ram usage:        7 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    3
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text9
  2110  0008C6                     __ptext9:
  2111                           	opt stack 0
  2112  0008C6                     ___lwdiv:
  2113                           	opt stack 27
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;incstack = 0
  2117  0008C6  0E00               	movlw	0
  2118  0008C8  0100               	movlb	0	; () banked
  2119  0008CA  6F92               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2120  0008CC  0E00               	movlw	0
  2121  0008CE  6F91               	movwf	___lwdiv@quotient& (0+255),b
  2122                           
  2123                           ; BSR set to: 0
  2124  0008D0  518E               	movf	___lwdiv@divisor& (0+255),w,b
  2125  0008D2  118F               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2126  0008D4  B4D8               	btfsc	status,2,c
  2127  0008D6  D01C               	goto	l783
  2128                           
  2129                           ; BSR set to: 0
  2130  0008D8  0E01               	movlw	1
  2131  0008DA  6F90               	movwf	___lwdiv@counter& (0+255),b
  2132  0008DC  D004               	goto	l778
  2133  0008DE                     
  2134                           ; BSR set to: 0
  2135                           
  2136                           ; BSR set to: 0
  2137  0008DE  90D8               	bcf	status,0,c
  2138  0008E0  378E               	rlcf	___lwdiv@divisor& (0+255),f,b
  2139  0008E2  378F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2140  0008E4  2B90               	incf	___lwdiv@counter& (0+255),f,b
  2141  0008E6                     l778:
  2142                           
  2143                           ; BSR set to: 0
  2144                           
  2145                           ; BSR set to: 0
  2146  0008E6  AF8F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2147  0008E8  D7FA               	goto	l779
  2148  0008EA                     u1750:
  2149                           
  2150                           ; BSR set to: 0
  2151                           
  2152                           ; BSR set to: 0
  2153                           
  2154                           ; BSR set to: 0
  2155  0008EA  90D8               	bcf	status,0,c
  2156  0008EC  3791               	rlcf	___lwdiv@quotient& (0+255),f,b
  2157  0008EE  3792               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2158                           
  2159                           ; BSR set to: 0
  2160  0008F0  518E               	movf	___lwdiv@divisor& (0+255),w,b
  2161  0008F2  5D8C               	subwf	___lwdiv@dividend& (0+255),w,b
  2162  0008F4  518F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2163  0008F6  598D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2164  0008F8  A0D8               	btfss	status,0,c
  2165  0008FA  D005               	goto	l782
  2166                           
  2167                           ; BSR set to: 0
  2168  0008FC  518E               	movf	___lwdiv@divisor& (0+255),w,b
  2169  0008FE  5F8C               	subwf	___lwdiv@dividend& (0+255),f,b
  2170  000900  518F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2171  000902  5B8D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2172                           
  2173                           ; BSR set to: 0
  2174  000904  8191               	bsf	___lwdiv@quotient& (0+255),0,b
  2175  000906                     l782:
  2176                           
  2177                           ; BSR set to: 0
  2178                           
  2179                           ; BSR set to: 0
  2180  000906  90D8               	bcf	status,0,c
  2181  000908  338F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2182  00090A  338E               	rrcf	___lwdiv@divisor& (0+255),f,b
  2183                           
  2184                           ; BSR set to: 0
  2185  00090C  2F90               	decfsz	___lwdiv@counter& (0+255),f,b
  2186  00090E  D7ED               	goto	u1750
  2187  000910                     l783:
  2188                           
  2189                           ; BSR set to: 0
  2190                           
  2191                           ; BSR set to: 0
  2192  000910  C091  F08C         	movff	___lwdiv@quotient,?___lwdiv
  2193  000914  C092  F08D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2194                           
  2195                           ; BSR set to: 0
  2196  000918  0012               	return		;funcret
  2197  00091A                     __end_of___lwdiv:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           prodh	equ	0xFF4
  2204                           prodl	equ	0xFF3
  2205                           postinc0	equ	0xFEE
  2206                           wreg	equ	0xFE8
  2207                           postdec1	equ	0xFE5
  2208                           fsr1l	equ	0xFE1
  2209                           indf2	equ	0xFDF
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _InitApp *****************
  2215 ;; Defined at:
  2216 ;;		line 33 in file "user.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg, status,2
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2230 ;;      Params:         0       0       0       0       0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2233 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    3
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text10
  2245  0007A4                     __ptext10:
  2246                           	opt stack 0
  2247  0007A4                     _InitApp:
  2248                           	opt stack 27
  2249                           
  2250                           ;user.c: 35: PORTA = 0;
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;incstack = 0
  2254  0007A4  0E00               	movlw	0
  2255  0007A6  6E80               	movwf	3968,c	;volatile
  2256                           
  2257                           ;user.c: 36: LATA = 0;
  2258  0007A8  0E00               	movlw	0
  2259  0007AA  6E89               	movwf	3977,c	;volatile
  2260                           
  2261                           ;user.c: 37: PORTB = 0;
  2262  0007AC  0E00               	movlw	0
  2263  0007AE  6E81               	movwf	3969,c	;volatile
  2264                           
  2265                           ;user.c: 38: LATB = 0;
  2266  0007B0  0E00               	movlw	0
  2267  0007B2  6E8A               	movwf	3978,c	;volatile
  2268                           
  2269                           ;user.c: 39: PORTC = 0;
  2270  0007B4  0E00               	movlw	0
  2271  0007B6  6E82               	movwf	3970,c	;volatile
  2272                           
  2273                           ;user.c: 40: LATC = 0;
  2274  0007B8  0E00               	movlw	0
  2275  0007BA  6E8B               	movwf	3979,c	;volatile
  2276                           
  2277                           ;user.c: 42: ADCON1 = 0b1101;
  2278  0007BC  0E0D               	movlw	13
  2279  0007BE  6EC1               	movwf	4033,c	;volatile
  2280                           
  2281                           ;user.c: 43: TRISAbits.TRISA0 = 1;
  2282  0007C0  8092               	bsf	3986,0,c	;volatile
  2283                           
  2284                           ;user.c: 44: ADCON0bits.CHS = 0;
  2285  0007C2  94C2               	bcf	4034,2,c	;volatile
  2286  0007C4  96C2               	bcf	4034,3,c	;volatile
  2287  0007C6  98C2               	bcf	4034,4,c	;volatile
  2288  0007C8  9AC2               	bcf	4034,5,c	;volatile
  2289                           
  2290                           ;user.c: 45: ADCON2 = 0b10101100;
  2291  0007CA  0EAC               	movlw	172
  2292  0007CC  6EC0               	movwf	4032,c	;volatile
  2293                           
  2294                           ;user.c: 46: PIE1bits.ADIE = 1;
  2295  0007CE  8C9D               	bsf	3997,6,c	;volatile
  2296                           
  2297                           ;user.c: 47: PIR1bits.ADIF = 0;
  2298  0007D0  9C9E               	bcf	3998,6,c	;volatile
  2299                           
  2300                           ;user.c: 48: ADCON0bits.ADON = 1;
  2301  0007D2  80C2               	bsf	4034,0,c	;volatile
  2302                           
  2303                           ;user.c: 50: TRISAbits.RA2 = 0;
  2304  0007D4  9492               	bcf	3986,2,c	;volatile
  2305                           
  2306                           ;user.c: 51: TRISAbits.RA3 = 0;
  2307  0007D6  9692               	bcf	3986,3,c	;volatile
  2308                           
  2309                           ;user.c: 52: TRISAbits.RA4 = 0;
  2310  0007D8  9892               	bcf	3986,4,c	;volatile
  2311                           
  2312                           ;user.c: 53: TRISAbits.RA5 = 0;
  2313  0007DA  9A92               	bcf	3986,5,c	;volatile
  2314                           
  2315                           ;user.c: 54: TRISCbits.RC0 = 0;
  2316  0007DC  9094               	bcf	3988,0,c	;volatile
  2317                           
  2318                           ;user.c: 55: TRISCbits.RC1 = 0;
  2319  0007DE  9294               	bcf	3988,1,c	;volatile
  2320                           
  2321                           ;user.c: 56: TRISBbits.RB7 = 0;
  2322  0007E0  9E93               	bcf	3987,7,c	;volatile
  2323                           
  2324                           ;user.c: 57: TRISBbits.RB6 = 0;
  2325  0007E2  9C93               	bcf	3987,6,c	;volatile
  2326                           
  2327                           ;user.c: 58: TRISCbits.RC2 = 0;
  2328  0007E4  9494               	bcf	3988,2,c	;volatile
  2329                           
  2330                           ;user.c: 59: TRISBbits.RB4 = 0;
  2331  0007E6  9893               	bcf	3987,4,c	;volatile
  2332                           
  2333                           ;user.c: 60: TRISBbits.RB5 = 0;
  2334  0007E8  9A93               	bcf	3987,5,c	;volatile
  2335                           
  2336                           ;user.c: 62: RCONbits.IPEN = 0;
  2337  0007EA  9ED0               	bcf	4048,7,c	;volatile
  2338                           
  2339                           ;user.c: 64: INTCONbits.GIE = 1;
  2340  0007EC  8EF2               	bsf	intcon,7,c	;volatile
  2341                           
  2342                           ;user.c: 65: INTCONbits.PEIE = 1;
  2343  0007EE  8CF2               	bsf	intcon,6,c	;volatile
  2344                           
  2345                           ;user.c: 66: INTCONbits.TMR0IE = 1;
  2346  0007F0  8AF2               	bsf	intcon,5,c	;volatile
  2347                           
  2348                           ;user.c: 67: INTCONbits.TMR0IF = 0;
  2349  0007F2  94F2               	bcf	intcon,2,c	;volatile
  2350                           
  2351                           ;user.c: 68: INTCON2bits.TMR0IP = 1;
  2352  0007F4  84F1               	bsf	intcon2,2,c	;volatile
  2353                           
  2354                           ;user.c: 69: T0CONbits.T08BIT = 1;
  2355  0007F6  8CD5               	bsf	4053,6,c	;volatile
  2356                           
  2357                           ;user.c: 70: T0CONbits.T0CS = 0;
  2358  0007F8  9AD5               	bcf	4053,5,c	;volatile
  2359                           
  2360                           ;user.c: 71: T0CONbits.PSA = 0;
  2361  0007FA  96D5               	bcf	4053,3,c	;volatile
  2362                           
  2363                           ;user.c: 72: T0CONbits.T0PS = 0b101;
  2364  0007FC  50D5               	movf	4053,w,c	;volatile
  2365  0007FE  0BF8               	andlw	-8
  2366  000800  0905               	iorlw	5
  2367  000802  6ED5               	movwf	4053,c	;volatile
  2368                           
  2369                           ;user.c: 73: T0CONbits.TMR0ON = 0;
  2370  000804  9ED5               	bcf	4053,7,c	;volatile
  2371                           
  2372                           ;user.c: 74: TMR0 = 0x6;
  2373  000806  0E00               	movlw	0
  2374  000808  6ED7               	movwf	4055,c	;volatile
  2375  00080A  0E06               	movlw	6
  2376  00080C  6ED6               	movwf	4054,c	;volatile
  2377                           
  2378                           ;user.c: 76: PIE1bits.TMR1IE = 1;
  2379  00080E  809D               	bsf	3997,0,c	;volatile
  2380                           
  2381                           ;user.c: 77: PIR1bits.TMR1IF = 0;
  2382  000810  909E               	bcf	3998,0,c	;volatile
  2383                           
  2384                           ;user.c: 78: IPR1bits.TMR1IP = 1;
  2385  000812  809F               	bsf	3999,0,c	;volatile
  2386                           
  2387                           ;user.c: 79: T1CONbits.TMR1CS = 0;
  2388  000814  92CD               	bcf	4045,1,c	;volatile
  2389                           
  2390                           ;user.c: 80: T1CONbits.T1CKPS = 0b00;
  2391  000816  0ECF               	movlw	-49
  2392  000818  16CD               	andwf	4045,f,c	;volatile
  2393                           
  2394                           ;user.c: 81: T1CONbits.TMR1ON = 1;
  2395  00081A  80CD               	bsf	4045,0,c	;volatile
  2396                           
  2397                           ;user.c: 85: TRISBbits.RB1 = 1;
  2398  00081C  8293               	bsf	3987,1,c	;volatile
  2399                           
  2400                           ;user.c: 86: TRISBbits.RB2 = 1;
  2401  00081E  8493               	bsf	3987,2,c	;volatile
  2402                           
  2403                           ;user.c: 87: INTCON3bits.INT1IE = 1;
  2404  000820  86F0               	bsf	intcon3,3,c	;volatile
  2405                           
  2406                           ;user.c: 88: INTCON3bits.INT2IE = 1;
  2407  000822  88F0               	bsf	intcon3,4,c	;volatile
  2408                           
  2409                           ;user.c: 89: INTCON3bits.INT1IF = 0;
  2410  000824  90F0               	bcf	intcon3,0,c	;volatile
  2411                           
  2412                           ;user.c: 90: INTCON3bits.INT2IF = 0;
  2413  000826  92F0               	bcf	intcon3,1,c	;volatile
  2414                           
  2415                           ;user.c: 91: INTCON2bits.INTEDG1 = 0;
  2416  000828  9AF1               	bcf	intcon2,5,c	;volatile
  2417                           
  2418                           ;user.c: 92: INTCON2bits.INTEDG2 = 0;
  2419  00082A  98F1               	bcf	intcon2,4,c	;volatile
  2420                           
  2421                           ;user.c: 94: TRISCbits.RC6 = 0;
  2422  00082C  9C94               	bcf	3988,6,c	;volatile
  2423                           
  2424                           ;user.c: 95: TRISCbits.RC7 = 1;
  2425  00082E  8E94               	bsf	3988,7,c	;volatile
  2426                           
  2427                           ;user.c: 96: BRGH = 1;
  2428  000830  84AC               	bsf	4012,2,c	;volatile
  2429                           
  2430                           ;user.c: 97: BRG16 = 1;
  2431  000832  86B8               	bsf	4024,3,c	;volatile
  2432                           
  2433                           ;user.c: 98: SPBRG = 207;
  2434  000834  0ECF               	movlw	207
  2435  000836  6EAF               	movwf	4015,c	;volatile
  2436                           
  2437                           ;user.c: 99: SPEN = 1;
  2438  000838  8EAB               	bsf	4011,7,c	;volatile
  2439                           
  2440                           ;user.c: 100: SYNC = 0;
  2441  00083A  98AC               	bcf	4012,4,c	;volatile
  2442                           
  2443                           ;user.c: 101: TXEN = 1;
  2444  00083C  8AAC               	bsf	4012,5,c	;volatile
  2445                           
  2446                           ;user.c: 102: CREN = 1;
  2447  00083E  88AB               	bsf	4011,4,c	;volatile
  2448                           
  2449                           ;user.c: 103: TX9 = 0;
  2450  000840  9CAC               	bcf	4012,6,c	;volatile
  2451                           
  2452                           ;user.c: 104: RX9 = 0;
  2453  000842  9CAB               	bcf	4011,6,c	;volatile
  2454                           
  2455                           ;user.c: 105: RCIE = 1;
  2456  000844  8A9D               	bsf	3997,5,c	;volatile
  2457                           
  2458                           ;user.c: 106: TXIE = 0;
  2459  000846  989D               	bcf	3997,4,c	;volatile
  2460                           
  2461                           ;user.c: 108: PR2 = 99;
  2462  000848  0E63               	movlw	99
  2463  00084A  6ECB               	movwf	4043,c	;volatile
  2464                           
  2465                           ;user.c: 109: CCP1CONbits.DC1B = 0;
  2466  00084C  0ECF               	movlw	-49
  2467  00084E  16BD               	andwf	4029,f,c	;volatile
  2468                           
  2469                           ;user.c: 110: T2CONbits.T2CKPS = 0b00;
  2470  000850  0EFC               	movlw	-4
  2471  000852  16CA               	andwf	4042,f,c	;volatile
  2472                           
  2473                           ;user.c: 111: T2CONbits.TMR2ON = 1;
  2474  000854  84CA               	bsf	4042,2,c	;volatile
  2475                           
  2476                           ;user.c: 112: CCP1CONbits.CCP1M = 0b1111;
  2477  000856  80BD               	bsf	4029,0,c	;volatile
  2478  000858  82BD               	bsf	4029,1,c	;volatile
  2479  00085A  84BD               	bsf	4029,2,c	;volatile
  2480  00085C  86BD               	bsf	4029,3,c	;volatile
  2481  00085E  0012               	return		;funcret
  2482  000860                     __end_of_InitApp:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           intcon	equ	0xFF2
  2491                           intcon2	equ	0xFF1
  2492                           intcon3	equ	0xFF0
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           postdec1	equ	0xFE5
  2496                           fsr1l	equ	0xFE1
  2497                           indf2	equ	0xFDF
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _ConfigureOscillator *****************
  2503 ;; Defined at:
  2504 ;;		line 24 in file "system.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2521 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2522 ;;Total ram usage:        0 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    3
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text11
  2533  000AAE                     __ptext11:
  2534                           	opt stack 0
  2535  000AAE                     _ConfigureOscillator:
  2536                           	opt stack 27
  2537                           
  2538                           ;system.c: 27: OSCCONbits.IRCF = 0b111;
  2539                           
  2540                           ;incstack = 0
  2541  000AAE  88D3               	bsf	4051,4,c	;volatile
  2542  000AB0  8AD3               	bsf	4051,5,c	;volatile
  2543  000AB2  8CD3               	bsf	4051,6,c	;volatile
  2544                           
  2545                           ;system.c: 28: OSCCONbits.SCS = 0b11;
  2546  000AB4  0E03               	movlw	3
  2547  000AB6  12D3               	iorwf	4051,f,c	;volatile
  2548  000AB8  0012               	return		;funcret
  2549  000ABA                     __end_of_ConfigureOscillator:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           prodh	equ	0xFF4
  2556                           prodl	equ	0xFF3
  2557                           intcon	equ	0xFF2
  2558                           intcon2	equ	0xFF1
  2559                           intcon3	equ	0xFF0
  2560                           postinc0	equ	0xFEE
  2561                           wreg	equ	0xFE8
  2562                           postdec1	equ	0xFE5
  2563                           fsr1l	equ	0xFE1
  2564                           indf2	equ	0xFDF
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function _high_isr *****************
  2570 ;; Defined at:
  2571 ;;		line 68 in file "interrupts.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2585 ;;      Params:         0       0       0       0       0       0       0       0       0
  2586 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2587 ;;      Temps:         20       0       0       0       0       0       0       0       0
  2588 ;;      Totals:        20       0       0       0       0       0       0       0       0
  2589 ;;Total ram usage:       20 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    2
  2592 ;; This function calls:
  2593 ;;		_finish
  2594 ;;		_mot_3_step_count
  2595 ;; This function is called by:
  2596 ;;		Interrupt level 2
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	intcode
  2601  000008                     __pintcode:
  2602                           	opt stack 0
  2603  000008                     _high_isr:
  2604                           	opt stack 26
  2605                           
  2606                           ;incstack = 0
  2607  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2608  00000A  ED77  F002         	call	int_func,f	;refresh shadow registers
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           intcon	equ	0xFF2
  2616                           intcon2	equ	0xFF1
  2617                           intcon3	equ	0xFF0
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           postdec1	equ	0xFE5
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627                           	psect	intcode_body
  2628  0004EE                     __pintcode_body:
  2629                           	opt stack 26
  2630  0004EE                     int_func:
  2631                           	opt stack 26
  2632  0004EE  0006               	pop		; remove dummy address from shadow register refresh
  2633  0004F0  CFFA F02F          	movff	pclath,??_high_isr+2
  2634  0004F4  CFFB F030          	movff	pclatu,??_high_isr+3
  2635  0004F8  CFE9 F031          	movff	fsr0l,??_high_isr+4
  2636  0004FC  CFEA F032          	movff	fsr0h,??_high_isr+5
  2637  000500  CFE1 F033          	movff	fsr1l,??_high_isr+6
  2638  000504  CFE2 F034          	movff	fsr1h,??_high_isr+7
  2639  000508  CFD9 F035          	movff	fsr2l,??_high_isr+8
  2640  00050C  CFDA F036          	movff	fsr2h,??_high_isr+9
  2641  000510  CFF3 F037          	movff	prodl,??_high_isr+10
  2642  000514  CFF4 F038          	movff	prodh,??_high_isr+11
  2643  000518  CFF6 F039          	movff	tblptrl,??_high_isr+12
  2644  00051C  CFF7 F03A          	movff	tblptrh,??_high_isr+13
  2645  000520  CFF8 F03B          	movff	tblptru,??_high_isr+14
  2646  000524  CFF5 F03C          	movff	tablat,??_high_isr+15
  2647  000528  C04B  F03D         	movff	btemp,??_high_isr+16
  2648  00052C  C04C  F03E         	movff	btemp+1,??_high_isr+17
  2649  000530  C04D  F03F         	movff	btemp+2,??_high_isr+18
  2650  000534  C04E  F040         	movff	btemp+3,??_high_isr+19
  2651                           
  2652                           ;interrupts.c: 69: if (INTCONbits.TMR0IF) {
  2653  000538  A4F2               	btfss	intcon,2,c	;volatile
  2654  00053A  D078               	goto	i2l95
  2655                           
  2656                           ;interrupts.c: 71: INTCONbits.TMR0IF = 0;
  2657  00053C  94F2               	bcf	intcon,2,c	;volatile
  2658                           
  2659                           ;interrupts.c: 72: TMR0 = 250;
  2660  00053E  0E00               	movlw	0
  2661  000540  6ED7               	movwf	4055,c	;volatile
  2662  000542  0EFA               	movlw	250
  2663  000544  6ED6               	movwf	4054,c	;volatile
  2664                           
  2665                           ;interrupts.c: 73: MOT_1_count++;
  2666  000546  4A0B               	infsnz	_MOT_1_count,f,c
  2667  000548  2A0C               	incf	_MOT_1_count+1,f,c
  2668                           
  2669                           ;interrupts.c: 74: MOT_2_count++;
  2670  00054A  0100               	movlb	0	; () banked
  2671  00054C  4B7C               	infsnz	_MOT_2_count& (0+255),f,b
  2672  00054E  2B7D               	incf	(_MOT_2_count+1)& (0+255),f,b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;interrupts.c: 75: MOT_3_count++;
  2676  000550  4A09               	infsnz	_MOT_3_count,f,c
  2677  000552  2A0A               	incf	_MOT_3_count+1,f,c
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;interrupts.c: 76: MOT_4_count++;
  2681  000554  4B7A               	infsnz	_MOT_4_count& (0+255),f,b
  2682  000556  2B7B               	incf	(_MOT_4_count+1)& (0+255),f,b
  2683                           
  2684                           ;interrupts.c: 78: if (MOT_1) {
  2685  000558  5020               	movf	_MOT_1,w,c
  2686  00055A  B4D8               	btfsc	status,2,c
  2687  00055C  D02E               	goto	i2l99
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;interrupts.c: 80: if (MOT_1_count == count_1) {
  2691  00055E  5043               	movf	_count_1,w,c
  2692  000560  180B               	xorwf	_MOT_1_count,w,c
  2693  000562  E12B               	bnz	i2l1692
  2694  000564  5044               	movf	_count_1+1,w,c
  2695  000566  180C               	xorwf	_MOT_1_count+1,w,c
  2696  000568  A4D8               	btfss	status,2,c
  2697  00056A  D027               	goto	i2l99
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;interrupts.c: 81: MOT_1_count = 0;
  2701  00056C  0E00               	movlw	0
  2702  00056E  6E0C               	movwf	_MOT_1_count+1,c
  2703  000570  0E00               	movlw	0
  2704  000572  6E0B               	movwf	_MOT_1_count,c
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;interrupts.c: 82: LATAbits.LA3 = !PORTAbits.RA3;
  2708  000574  B680               	btfsc	3968,3,c	;volatile
  2709  000576  D003               	goto	i2u98_40
  2710  000578  6A2D               	clrf	??_high_isr& (0+255),c
  2711  00057A  2A2D               	incf	??_high_isr& (0+255),f,c
  2712  00057C  D001               	goto	i2u99_48
  2713  00057E                     i2u98_40:
  2714  00057E  6A2D               	clrf	??_high_isr& (0+255),c
  2715  000580                     i2u99_48:
  2716  000580  462D               	rlncf	??_high_isr,f,c
  2717  000582  462D               	rlncf	??_high_isr,f,c
  2718  000584  462D               	rlncf	??_high_isr,f,c
  2719  000586  5089               	movf	3977,w,c	;volatile
  2720  000588  182D               	xorwf	??_high_isr,w,c
  2721  00058A  0BF7               	andlw	-9
  2722  00058C  182D               	xorwf	??_high_isr,w,c
  2723  00058E  6E89               	movwf	3977,c	;volatile
  2724                           
  2725                           ;interrupts.c: 83: mot_1_steps++;
  2726  000590  4A07               	infsnz	_mot_1_steps,f,c
  2727  000592  2A08               	incf	_mot_1_steps+1,f,c
  2728                           
  2729                           ;interrupts.c: 84: if (mot_1_steps == 200) {
  2730  000594  0EC8               	movlw	200
  2731  000596  1807               	xorwf	_mot_1_steps,w,c
  2732  000598  1008               	iorwf	_mot_1_steps+1,w,c
  2733  00059A  A4D8               	btfss	status,2,c
  2734  00059C  D006               	goto	i2l98
  2735                           
  2736                           ;interrupts.c: 86: mot_1_steps = 0;
  2737  00059E  0E00               	movlw	0
  2738  0005A0  6E08               	movwf	_mot_1_steps+1,c
  2739  0005A2  0E00               	movlw	0
  2740  0005A4  6E07               	movwf	_mot_1_steps,c
  2741                           
  2742                           ;interrupts.c: 87: turns_count++;
  2743  0005A6  4A01               	infsnz	_turns_count,f,c
  2744  0005A8  2A02               	incf	_turns_count+1,f,c
  2745  0005AA                     i2l98:
  2746                           
  2747                           ;interrupts.c: 88: }
  2748                           ;interrupts.c: 89: if (turns_count == turns) {
  2749  0005AA  5047               	movf	_turns,w,c
  2750  0005AC  1801               	xorwf	_turns_count,w,c
  2751  0005AE  E105               	bnz	i2l1692
  2752  0005B0  5048               	movf	_turns+1,w,c
  2753  0005B2  1802               	xorwf	_turns_count+1,w,c
  2754  0005B4  B4D8               	btfsc	status,2,c
  2755                           
  2756                           ;interrupts.c: 91: finish();
  2757  0005B6  EC24  F005         	call	_finish	;wreg free
  2758  0005BA                     i2l99:
  2759  0005BA                     i2l1692:
  2760                           
  2761                           ;interrupts.c: 92: }
  2762                           ;interrupts.c: 93: }
  2763                           ;interrupts.c: 94: }
  2764                           ;interrupts.c: 96: if (MOT_3) {
  2765  0005BA  501F               	movf	_MOT_3,w,c
  2766  0005BC  B4D8               	btfsc	status,2,c
  2767  0005BE  D0CC               	goto	i2l125
  2768                           
  2769                           ;interrupts.c: 98: if (MOT_3_count == count_3) {
  2770  0005C0  5041               	movf	_count_3,w,c
  2771  0005C2  1809               	xorwf	_MOT_3_count,w,c
  2772  0005C4  E103               	bnz	i2u103_41
  2773  0005C6  5042               	movf	_count_3+1,w,c
  2774  0005C8  180A               	xorwf	_MOT_3_count+1,w,c
  2775  0005CA  A4D8               	btfss	status,2,c
  2776  0005CC                     i2u103_41:
  2777  0005CC  D0C5               	goto	i2l125
  2778                           
  2779                           ;interrupts.c: 99: MOT_3_count = 0;
  2780  0005CE  0E00               	movlw	0
  2781  0005D0  6E0A               	movwf	_MOT_3_count+1,c
  2782  0005D2  0E00               	movlw	0
  2783  0005D4  6E09               	movwf	_MOT_3_count,c
  2784                           
  2785                           ;interrupts.c: 100: LATCbits.LC1 = !PORTCbits.RC1;
  2786  0005D6  B282               	btfsc	3970,1,c	;volatile
  2787  0005D8  D003               	goto	i2u104_40
  2788  0005DA  6A2D               	clrf	??_high_isr& (0+255),c
  2789  0005DC  2A2D               	incf	??_high_isr& (0+255),f,c
  2790  0005DE  D001               	goto	i2u105_48
  2791  0005E0                     i2u104_40:
  2792  0005E0  6A2D               	clrf	??_high_isr& (0+255),c
  2793  0005E2                     i2u105_48:
  2794  0005E2  462D               	rlncf	??_high_isr,f,c
  2795  0005E4  508B               	movf	3979,w,c	;volatile
  2796  0005E6  182D               	xorwf	??_high_isr,w,c
  2797  0005E8  0BFD               	andlw	-3
  2798  0005EA  182D               	xorwf	??_high_isr,w,c
  2799  0005EC  6E8B               	movwf	3979,c	;volatile
  2800                           
  2801                           ;interrupts.c: 101: mot_3_steps++;
  2802  0005EE  4A05               	infsnz	_mot_3_steps,f,c
  2803  0005F0  2A06               	incf	_mot_3_steps+1,f,c
  2804                           
  2805                           ;interrupts.c: 103: if (mot_3_steps == mot_3_step_count(length, 1)) {
  2806  0005F2  C045  F027         	movff	_length,mot_3_step_count@l
  2807  0005F6  C046  F028         	movff	_length+1,mot_3_step_count@l+1
  2808  0005FA  0E00               	movlw	0
  2809  0005FC  6E2A               	movwf	mot_3_step_count@ms+1,c
  2810  0005FE  0E01               	movlw	1
  2811  000600  6E29               	movwf	mot_3_step_count@ms,c
  2812  000602  EC12  F005         	call	_mot_3_step_count	;wreg free
  2813  000606  5005               	movf	_mot_3_steps,w,c
  2814  000608  1827               	xorwf	?_mot_3_step_count,w,c
  2815  00060A  E103               	bnz	i2u106_41
  2816  00060C  5006               	movf	_mot_3_steps+1,w,c
  2817  00060E  1828               	xorwf	?_mot_3_step_count+1,w,c
  2818  000610  A4D8               	btfss	status,2,c
  2819  000612                     i2u106_41:
  2820  000612  D0A2               	goto	i2l125
  2821                           
  2822                           ;interrupts.c: 105: DIR_3 = !DIR_3;
  2823  000614  501E               	movf	_DIR_3,w,c
  2824  000616  A4D8               	btfss	status,2,c
  2825  000618  D002               	goto	i2u107_40
  2826  00061A  0E01               	movlw	1
  2827  00061C  D001               	goto	i2u108_40
  2828  00061E                     i2u107_40:
  2829  00061E  0E00               	movlw	0
  2830  000620                     i2u108_40:
  2831  000620  6E1E               	movwf	_DIR_3,c
  2832                           
  2833                           ;interrupts.c: 106: mot_3_steps = 0;
  2834  000622  0E00               	movlw	0
  2835  000624  6E06               	movwf	_mot_3_steps+1,c
  2836  000626  0E00               	movlw	0
  2837  000628  6E05               	movwf	_mot_3_steps,c
  2838                           
  2839                           ;interrupts.c: 107: }
  2840                           ;interrupts.c: 108: }
  2841                           ;interrupts.c: 109: }
  2842                           ;interrupts.c: 119: } else if (PIR1bits.TMR1IF) {
  2843  00062A  D096               	goto	i2l125
  2844  00062C                     i2l95:
  2845  00062C  A09E               	btfss	3998,0,c	;volatile
  2846  00062E  D04F               	goto	i2l104
  2847                           
  2848                           ;interrupts.c: 121: PIR1bits.TMR1IF = 0;
  2849  000630  909E               	bcf	3998,0,c	;volatile
  2850                           
  2851                           ;interrupts.c: 122: TMR1 = 0xD8F0;
  2852  000632  0ED8               	movlw	216
  2853  000634  6ECF               	movwf	4047,c	;volatile
  2854  000636  0EF0               	movlw	240
  2855  000638  6ECE               	movwf	4046,c	;volatile
  2856                           
  2857                           ;interrupts.c: 123: if (MOT_2) {
  2858  00063A  501D               	movf	_MOT_2,w,c
  2859  00063C  B4D8               	btfsc	status,2,c
  2860  00063E  D00D               	goto	i2l105
  2861                           
  2862                           ;interrupts.c: 125: LATAbits.LA5 = !PORTAbits.RA5;
  2863  000640  BA80               	btfsc	3968,5,c	;volatile
  2864  000642  D003               	goto	i2u111_40
  2865  000644  6A2D               	clrf	??_high_isr& (0+255),c
  2866  000646  2A2D               	incf	??_high_isr& (0+255),f,c
  2867  000648  D001               	goto	i2u112_48
  2868  00064A                     i2u111_40:
  2869  00064A  6A2D               	clrf	??_high_isr& (0+255),c
  2870  00064C                     i2u112_48:
  2871  00064C  3A2D               	swapf	??_high_isr,f,c
  2872  00064E  462D               	rlncf	??_high_isr,f,c
  2873  000650  5089               	movf	3977,w,c	;volatile
  2874  000652  182D               	xorwf	??_high_isr,w,c
  2875  000654  0BDF               	andlw	-33
  2876  000656  182D               	xorwf	??_high_isr,w,c
  2877  000658  6E89               	movwf	3977,c	;volatile
  2878  00065A                     i2l105:
  2879                           
  2880                           ;interrupts.c: 126: }
  2881                           ;interrupts.c: 128: if (MOT_3) {
  2882  00065A  501F               	movf	_MOT_3,w,c
  2883  00065C  B4D8               	btfsc	status,2,c
  2884  00065E  D00C               	goto	i2l106
  2885                           
  2886                           ;interrupts.c: 130: LATCbits.LC1 = !PORTCbits.RC1;
  2887  000660  B282               	btfsc	3970,1,c	;volatile
  2888  000662  D003               	goto	i2u114_40
  2889  000664  6A2D               	clrf	??_high_isr& (0+255),c
  2890  000666  2A2D               	incf	??_high_isr& (0+255),f,c
  2891  000668  D001               	goto	i2u115_48
  2892  00066A                     i2u114_40:
  2893  00066A  6A2D               	clrf	??_high_isr& (0+255),c
  2894  00066C                     i2u115_48:
  2895  00066C  462D               	rlncf	??_high_isr,f,c
  2896  00066E  508B               	movf	3979,w,c	;volatile
  2897  000670  182D               	xorwf	??_high_isr,w,c
  2898  000672  0BFD               	andlw	-3
  2899  000674  182D               	xorwf	??_high_isr,w,c
  2900  000676  6E8B               	movwf	3979,c	;volatile
  2901  000678                     i2l106:
  2902                           
  2903                           ;interrupts.c: 131: }
  2904                           ;interrupts.c: 133: if (MOT_4) {
  2905  000678  504A               	movf	_MOT_4,w,c
  2906  00067A  B4D8               	btfsc	status,2,c
  2907  00067C  D06D               	goto	i2l125
  2908                           
  2909                           ;interrupts.c: 135: if(move_4) {
  2910  00067E  501C               	movf	_move_4,w,c
  2911  000680  B4D8               	btfsc	status,2,c
  2912  000682  D06A               	goto	i2l125
  2913                           
  2914                           ;interrupts.c: 136: LATBbits.LB6 = !PORTBbits.RB6;
  2915  000684  BC81               	btfsc	3969,6,c	;volatile
  2916  000686  D003               	goto	i2u118_40
  2917  000688  6A2D               	clrf	??_high_isr& (0+255),c
  2918  00068A  2A2D               	incf	??_high_isr& (0+255),f,c
  2919  00068C  D001               	goto	i2u119_48
  2920  00068E                     i2u118_40:
  2921  00068E  6A2D               	clrf	??_high_isr& (0+255),c
  2922  000690                     i2u119_48:
  2923  000690  3A2D               	swapf	??_high_isr,f,c
  2924  000692  462D               	rlncf	??_high_isr,f,c
  2925  000694  462D               	rlncf	??_high_isr,f,c
  2926  000696  508A               	movf	3978,w,c	;volatile
  2927  000698  182D               	xorwf	??_high_isr,w,c
  2928  00069A  0BBF               	andlw	-65
  2929  00069C  182D               	xorwf	??_high_isr,w,c
  2930  00069E  6E8A               	movwf	3978,c	;volatile
  2931                           
  2932                           ;interrupts.c: 138: if (mot_4_steps == 2*steps_4) {
  2933  0006A0  C011  F02D         	movff	_steps_4,??_high_isr
  2934  0006A4  C012  F02E         	movff	_steps_4+1,??_high_isr+1
  2935  0006A8  90D8               	bcf	status,0,c
  2936  0006AA  362D               	rlcf	??_high_isr,f,c
  2937  0006AC  362E               	rlcf	??_high_isr+1,f,c
  2938  0006AE  5003               	movf	_mot_4_steps,w,c
  2939  0006B0  182D               	xorwf	??_high_isr,w,c
  2940  0006B2  E10A               	bnz	i2l1724
  2941  0006B4  5004               	movf	_mot_4_steps+1,w,c
  2942  0006B6  182E               	xorwf	??_high_isr+1,w,c
  2943  0006B8  A4D8               	btfss	status,2,c
  2944  0006BA  D006               	goto	i2l109
  2945                           
  2946                           ;interrupts.c: 139: move_4 = 0;
  2947  0006BC  0E00               	movlw	0
  2948  0006BE  6E1C               	movwf	_move_4,c
  2949                           
  2950                           ;interrupts.c: 140: mot_4_steps = 0;
  2951  0006C0  0E00               	movlw	0
  2952  0006C2  6E04               	movwf	_mot_4_steps+1,c
  2953  0006C4  0E00               	movlw	0
  2954  0006C6  6E03               	movwf	_mot_4_steps,c
  2955  0006C8                     i2l109:
  2956  0006C8                     i2l1724:
  2957                           
  2958                           ;interrupts.c: 141: }
  2959                           ;interrupts.c: 142: mot_4_steps++;
  2960  0006C8  4A03               	infsnz	_mot_4_steps,f,c
  2961  0006CA  2A04               	incf	_mot_4_steps+1,f,c
  2962                           
  2963                           ;interrupts.c: 143: }
  2964                           ;interrupts.c: 144: }
  2965                           ;interrupts.c: 151: } else if (PIR1bits.RCIF) {
  2966  0006CC  D045               	goto	i2l125
  2967  0006CE                     i2l104:
  2968  0006CE  AA9E               	btfss	3998,5,c	;volatile
  2969  0006D0  D01A               	goto	i2l111
  2970                           
  2971                           ;interrupts.c: 153: PIR1bits.RCIF = 0;
  2972  0006D2  9A9E               	bcf	3998,5,c	;volatile
  2973                           
  2974                           ;interrupts.c: 154: palabra[n] = RCREG;
  2975  0006D4  0E60               	movlw	low _palabra
  2976  0006D6  240F               	addwf	_n,w,c
  2977  0006D8  6ED9               	movwf	fsr2l,c
  2978  0006DA  0E00               	movlw	high _palabra
  2979  0006DC  2010               	addwfc	_n+1,w,c
  2980  0006DE  6EDA               	movwf	fsr2h,c
  2981  0006E0  CFAE FFDF          	movff	4014,indf2	;volatile
  2982                           
  2983                           ;interrupts.c: 155: n++;
  2984  0006E4  4A0F               	infsnz	_n,f,c
  2985  0006E6  2A10               	incf	_n+1,f,c
  2986                           
  2987                           ;interrupts.c: 156: if (RCREG == '\n') {
  2988  0006E8  0E0A               	movlw	10
  2989  0006EA  18AE               	xorwf	4014,w,c	;volatile
  2990  0006EC  A4D8               	btfss	status,2,c
  2991  0006EE  D034               	goto	i2l125
  2992                           
  2993                           ;interrupts.c: 157: TXREG = palabra[0];
  2994  0006F0  C060  FFAD         	movff	_palabra,4013	;volatile
  2995  0006F4  A89E               	btfss	3998,4,c	;volatile
  2996  0006F6  D7FE               	goto	i2l114
  2997                           
  2998                           ;interrupts.c: 159: recibi = 1;
  2999  0006F8  0E01               	movlw	1
  3000  0006FA  6E1A               	movwf	_recibi,c
  3001                           
  3002                           ;interrupts.c: 160: n = 0;
  3003  0006FC  0E00               	movlw	0
  3004  0006FE  6E10               	movwf	_n+1,c
  3005  000700  0E00               	movlw	0
  3006  000702  6E0F               	movwf	_n,c
  3007                           
  3008                           ;interrupts.c: 161: }
  3009                           ;interrupts.c: 162: } else if (PIR1bits.ADIF) {
  3010  000704  D029               	goto	i2l125
  3011  000706                     i2l111:
  3012  000706  AC9E               	btfss	3998,6,c	;volatile
  3013  000708  D006               	goto	i2l117
  3014                           
  3015                           ;interrupts.c: 164: PIR1bits.ADIF = 0;
  3016  00070A  9C9E               	bcf	3998,6,c	;volatile
  3017                           
  3018                           ;interrupts.c: 170: ADC_value_press = ADRES;
  3019  00070C  CFC3 F00D          	movff	4035,_ADC_value_press	;volatile
  3020  000710  CFC4 F00E          	movff	4036,_ADC_value_press+1	;volatile
  3021                           
  3022                           ;interrupts.c: 172: } else if (INTCON3bits.INT1IF) {
  3023  000714  D021               	goto	i2l125
  3024  000716                     i2l117:
  3025  000716  A0F0               	btfss	intcon3,0,c	;volatile
  3026  000718  D009               	goto	i2l119
  3027                           
  3028                           ;interrupts.c: 174: INTCON3bits.INT1IF = 0;
  3029  00071A  90F0               	bcf	intcon3,0,c	;volatile
  3030                           
  3031                           ;interrupts.c: 176: if (winding) {
  3032  00071C  501B               	movf	_winding,w,c
  3033  00071E  A4D8               	btfss	status,2,c
  3034  000720  D00B               	goto	i2u130_40
  3035                           
  3036                           ;interrupts.c: 185: DIR_3 = !DIR_3;
  3037                           
  3038                           ;interrupts.c: 183: } else {
  3039                           
  3040                           ;interrupts.c: 181: MOT_4 = 0;
  3041                           
  3042                           ;interrupts.c: 180: MOT_3 = 0;
  3043                           
  3044                           ;interrupts.c: 179: MOT_2 = 0;
  3045                           
  3046                           ;interrupts.c: 178: MOT_1 = 0;
  3047  000722  501E               	movf	_DIR_3,w,c
  3048  000724  A4D8               	btfss	status,2,c
  3049  000726  D016               	goto	i2u131_40
  3050  000728  0E01               	movlw	1
  3051  00072A  D015               	goto	i2u132_40
  3052  00072C                     i2l119:
  3053  00072C  A2F0               	btfss	intcon3,1,c	;volatile
  3054  00072E  D014               	goto	i2l125
  3055                           
  3056                           ;interrupts.c: 190: INTCON3bits.INT2IF = 0;
  3057  000730  92F0               	bcf	intcon3,1,c	;volatile
  3058                           
  3059                           ;interrupts.c: 192: if (winding) {
  3060  000732  501B               	movf	_winding,w,c
  3061  000734  B4D8               	btfsc	status,2,c
  3062  000736  D009               	goto	i2l124
  3063  000738                     i2u130_40:
  3064                           
  3065                           ;interrupts.c: 194: MOT_1 = 0;
  3066  000738  0E00               	movlw	0
  3067  00073A  6E20               	movwf	_MOT_1,c
  3068                           
  3069                           ;interrupts.c: 195: MOT_2 = 0;
  3070  00073C  0E00               	movlw	0
  3071  00073E  6E1D               	movwf	_MOT_2,c
  3072                           
  3073                           ;interrupts.c: 196: MOT_3 = 0;
  3074  000740  0E00               	movlw	0
  3075  000742  6E1F               	movwf	_MOT_3,c
  3076                           
  3077                           ;interrupts.c: 197: MOT_4 = 0;
  3078  000744  0E00               	movlw	0
  3079  000746  6E4A               	movwf	_MOT_4,c
  3080                           
  3081                           ;interrupts.c: 199: } else {
  3082  000748  D007               	goto	i2l125
  3083  00074A                     i2l124:
  3084                           
  3085                           ;interrupts.c: 201: DIR_3 = !DIR_3;
  3086  00074A  501E               	movf	_DIR_3,w,c
  3087  00074C  A4D8               	btfss	status,2,c
  3088  00074E  D002               	goto	i2u131_40
  3089  000750  0E01               	movlw	1
  3090  000752  D001               	goto	i2u132_40
  3091  000754                     i2u131_40:
  3092  000754  0E00               	movlw	0
  3093  000756                     i2u132_40:
  3094  000756  6E1E               	movwf	_DIR_3,c
  3095  000758                     i2l125:
  3096  000758  C040  F04E         	movff	??_high_isr+19,btemp+3
  3097  00075C  C03F  F04D         	movff	??_high_isr+18,btemp+2
  3098  000760  C03E  F04C         	movff	??_high_isr+17,btemp+1
  3099  000764  C03D  F04B         	movff	??_high_isr+16,btemp
  3100  000768  C03C  FFF5         	movff	??_high_isr+15,tablat
  3101  00076C  C03B  FFF8         	movff	??_high_isr+14,tblptru
  3102  000770  C03A  FFF7         	movff	??_high_isr+13,tblptrh
  3103  000774  C039  FFF6         	movff	??_high_isr+12,tblptrl
  3104  000778  C038  FFF4         	movff	??_high_isr+11,prodh
  3105  00077C  C037  FFF3         	movff	??_high_isr+10,prodl
  3106  000780  C036  FFDA         	movff	??_high_isr+9,fsr2h
  3107  000784  C035  FFD9         	movff	??_high_isr+8,fsr2l
  3108  000788  C034  FFE2         	movff	??_high_isr+7,fsr1h
  3109  00078C  C033  FFE1         	movff	??_high_isr+6,fsr1l
  3110  000790  C032  FFEA         	movff	??_high_isr+5,fsr0h
  3111  000794  C031  FFE9         	movff	??_high_isr+4,fsr0l
  3112  000798  C030  FFFB         	movff	??_high_isr+3,pclatu
  3113  00079C  C02F  FFFA         	movff	??_high_isr+2,pclath
  3114  0007A0  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3115  0007A2  0011               	retfie		f
  3116  0007A4                     __end_of_high_isr:
  3117                           	opt stack 0
  3118                           pclatu	equ	0xFFB
  3119                           pclath	equ	0xFFA
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           intcon2	equ	0xFF1
  3128                           intcon3	equ	0xFF0
  3129                           postinc0	equ	0xFEE
  3130                           fsr0h	equ	0xFEA
  3131                           fsr0l	equ	0xFE9
  3132                           wreg	equ	0xFE8
  3133                           postdec1	equ	0xFE5
  3134                           fsr1h	equ	0xFE2
  3135                           fsr1l	equ	0xFE1
  3136                           indf2	equ	0xFDF
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _mot_3_step_count *****************
  3142 ;; Defined at:
  3143 ;;		line 202 in file "main.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  l               2    6[COMRAM] unsigned int 
  3146 ;;  ms              2    8[COMRAM] unsigned int 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2    6[COMRAM] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3158 ;;      Params:         4       0       0       0       0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3160 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3161 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3162 ;;Total ram usage:        6 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    1
  3165 ;; This function calls:
  3166 ;;		i2___wmul
  3167 ;; This function is called by:
  3168 ;;		_high_isr
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text13
  3173  000A24                     __ptext13:
  3174                           	opt stack 0
  3175  000A24                     _mot_3_step_count:
  3176                           	opt stack 26
  3177                           
  3178                           ;main.c: 204: return (ms * l) / 2;
  3179                           
  3180                           ;incstack = 0
  3181  000A24  C029  F021         	movff	mot_3_step_count@ms,i2___wmul@multiplier
  3182  000A28  C02A  F022         	movff	mot_3_step_count@ms+1,i2___wmul@multiplier+1
  3183  000A2C  C027  F023         	movff	mot_3_step_count@l,i2___wmul@multiplicand
  3184  000A30  C028  F024         	movff	mot_3_step_count@l+1,i2___wmul@multiplicand+1
  3185  000A34  ECFF  F004         	call	i2___wmul	;wreg free
  3186  000A38  90D8               	bcf	status,0,c
  3187  000A3A  3022               	rrcf	?i2___wmul+1,w,c
  3188  000A3C  6E2B               	movwf	??_mot_3_step_count& (0+255),c
  3189  000A3E  3021               	rrcf	?i2___wmul,w,c
  3190  000A40  6E27               	movwf	?_mot_3_step_count,c
  3191  000A42  C02B  F028         	movff	??_mot_3_step_count,?_mot_3_step_count+1
  3192  000A46  0012               	return	
  3193  000A48                     __end_of_mot_3_step_count:
  3194                           	opt stack 0
  3195                           pclatu	equ	0xFFB
  3196                           pclath	equ	0xFFA
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           intcon	equ	0xFF2
  3204                           intcon2	equ	0xFF1
  3205                           intcon3	equ	0xFF0
  3206                           postinc0	equ	0xFEE
  3207                           fsr0h	equ	0xFEA
  3208                           fsr0l	equ	0xFE9
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1h	equ	0xFE2
  3212                           fsr1l	equ	0xFE1
  3213                           indf2	equ	0xFDF
  3214                           fsr2h	equ	0xFDA
  3215                           fsr2l	equ	0xFD9
  3216                           status	equ	0xFD8
  3217                           
  3218 ;; *************** function i2___wmul *****************
  3219 ;; Defined at:
  3220 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  multiplier      2    0[COMRAM] unsigned int 
  3223 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  __wmul          2    4[COMRAM] unsigned int 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  2    0[COMRAM] unsigned int 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0, prodl, prodh
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3235 ;;      Params:         4       0       0       0       0       0       0       0       0
  3236 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3238 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3239 ;;Total ram usage:        6 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_mot_3_step_count
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text14
  3249  0009FE                     __ptext14:
  3250                           	opt stack 0
  3251  0009FE                     i2___wmul:
  3252                           	opt stack 26
  3253                           
  3254                           ;incstack = 0
  3255  0009FE  5021               	movf	i2___wmul@multiplier,w,c
  3256  000A00  0223               	mulwf	i2___wmul@multiplicand,c
  3257  000A02  CFF3 F025          	movff	prodl,i2___wmul@product
  3258  000A06  CFF4 F026          	movff	prodh,i2___wmul@product+1
  3259  000A0A  5021               	movf	i2___wmul@multiplier,w,c
  3260  000A0C  0224               	mulwf	i2___wmul@multiplicand+1,c
  3261  000A0E  50F3               	movf	prodl,w,c
  3262  000A10  2626               	addwf	i2___wmul@product+1,f,c
  3263  000A12  5022               	movf	i2___wmul@multiplier+1,w,c
  3264  000A14  0223               	mulwf	i2___wmul@multiplicand,c
  3265  000A16  50F3               	movf	prodl,w,c
  3266  000A18  2626               	addwf	i2___wmul@product+1,f,c
  3267  000A1A  C025  F021         	movff	i2___wmul@product,?i2___wmul
  3268  000A1E  C026  F022         	movff	i2___wmul@product+1,?i2___wmul+1
  3269  000A22  0012               	return	
  3270  000A24                     __end_ofi2___wmul:
  3271                           	opt stack 0
  3272                           pclatu	equ	0xFFB
  3273                           pclath	equ	0xFFA
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           prodh	equ	0xFF4
  3279                           prodl	equ	0xFF3
  3280                           intcon	equ	0xFF2
  3281                           intcon2	equ	0xFF1
  3282                           intcon3	equ	0xFF0
  3283                           postinc0	equ	0xFEE
  3284                           fsr0h	equ	0xFEA
  3285                           fsr0l	equ	0xFE9
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1h	equ	0xFE2
  3289                           fsr1l	equ	0xFE1
  3290                           indf2	equ	0xFDF
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _finish *****************
  3296 ;; Defined at:
  3297 ;;		line 233 in file "main.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3311 ;;      Params:         0       0       0       0       0       0       0       0       0
  3312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3314 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3315 ;;Total ram usage:        0 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_high_isr
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text15
  3325  000A48                     __ptext15:
  3326                           	opt stack 0
  3327  000A48                     _finish:
  3328                           	opt stack 27
  3329                           
  3330                           ;main.c: 235: T1CONbits.TMR1ON = 1;
  3331                           
  3332                           ;incstack = 0
  3333  000A48  80CD               	bsf	4045,0,c	;volatile
  3334                           
  3335                           ;main.c: 236: T0CONbits.TMR0ON = 0;
  3336  000A4A  9ED5               	bcf	4053,7,c	;volatile
  3337                           
  3338                           ;main.c: 237: MOT_1 = MOT_3 = 0;
  3339  000A4C  0E00               	movlw	0
  3340  000A4E  6E1F               	movwf	_MOT_3,c
  3341  000A50  C01F  F020         	movff	_MOT_3,_MOT_1
  3342                           
  3343                           ;main.c: 238: winding = 0;
  3344  000A54  0E00               	movlw	0
  3345  000A56  6E1B               	movwf	_winding,c
  3346                           
  3347                           ;main.c: 239: MOT_4 = 1;
  3348  000A58  0E01               	movlw	1
  3349  000A5A  6E4A               	movwf	_MOT_4,c
  3350                           
  3351                           ;main.c: 240: DIR_4 = 1;
  3352  000A5C  0E01               	movlw	1
  3353  000A5E  6E16               	movwf	_DIR_4,c
  3354                           
  3355                           ;main.c: 241: move_4 = 1;
  3356  000A60  0E01               	movlw	1
  3357  000A62  6E1C               	movwf	_move_4,c
  3358                           
  3359                           ;main.c: 243: finish_flag = 1;
  3360  000A64  0E01               	movlw	1
  3361  000A66  6E14               	movwf	_finish_flag,c
  3362  000A68  0012               	return		;funcret
  3363  000A6A                     __end_of_finish:
  3364                           	opt stack 0
  3365  0000                     pclatu	equ	0xFFB
  3366                           pclath	equ	0xFFA
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           prodh	equ	0xFF4
  3372                           prodl	equ	0xFF3
  3373                           intcon	equ	0xFF2
  3374                           intcon2	equ	0xFF1
  3375                           intcon3	equ	0xFF0
  3376                           postinc0	equ	0xFEE
  3377                           fsr0h	equ	0xFEA
  3378                           fsr0l	equ	0xFE9
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1h	equ	0xFE2
  3382                           fsr1l	equ	0xFE1
  3383                           indf2	equ	0xFDF
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           pclatu	equ	0xFFB
  3388                           pclath	equ	0xFFA
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           intcon2	equ	0xFF1
  3397                           intcon3	equ	0xFF0
  3398                           postinc0	equ	0xFEE
  3399                           fsr0h	equ	0xFEA
  3400                           fsr0l	equ	0xFE9
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410                           	psect	rparam
  3411  0000                     pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           intcon2	equ	0xFF1
  3421                           intcon3	equ	0xFF0
  3422                           postinc0	equ	0xFEE
  3423                           fsr0h	equ	0xFEA
  3424                           fsr0l	equ	0xFE9
  3425                           wreg	equ	0xFE8
  3426                           postdec1	equ	0xFE5
  3427                           fsr1h	equ	0xFE2
  3428                           fsr1l	equ	0xFE1
  3429                           indf2	equ	0xFDF
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           
  3434                           	psect	temp
  3435  00004B                     btemp:
  3436                           	opt stack 0
  3437  00004B                     	ds	1
  3438  0000                     int$flags	set	btemp
  3439  0000                     wtemp6	set	btemp+1
  3440                           pclatu	equ	0xFFB
  3441                           pclath	equ	0xFFA
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           intcon	equ	0xFF2
  3449                           intcon2	equ	0xFF1
  3450                           intcon3	equ	0xFF0
  3451                           postinc0	equ	0xFEE
  3452                           fsr0h	equ	0xFEA
  3453                           fsr0l	equ	0xFE9
  3454                           wreg	equ	0xFE8
  3455                           postdec1	equ	0xFE5
  3456                           fsr1h	equ	0xFE2
  3457                           fsr1l	equ	0xFE1
  3458                           indf2	equ	0xFDF
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      74
    BANK0           160     18      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    send_String@out	PTR const unsigned char  size(2) Largest target is 7
		 -> send(BANK0[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_mot_3_step_count
    _mot_3_step_count->i2___wmul

Critical Paths under _main in BANK0

    _main->___lwdiv
    _send_String->_trans_Char
    ___lwdiv->___lwmod

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    5370
                                             12 BANK0      6     6      0
                _ConfigureOscillator
                            _InitApp
                            ___lwdiv
                            ___lwmod
                             ___wmul
                              _reset
                        _send_String
                       _speed_select
                             _unwind
                          _zero_mark
 ---------------------------------------------------------------------------------
 (1) _zero_mark                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _unwind                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _speed_select                                         4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _send_String                                          2     0      2     186
                                              1 BANK0      2     0      2
                         _trans_Char
 ---------------------------------------------------------------------------------
 (2) _trans_Char                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2688
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    1312
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     961
                                              5 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _high_isr                                            20    20      0     405
                                             12 COMRAM    20    20      0
                             _finish
                   _mot_3_step_count
 ---------------------------------------------------------------------------------
 (4) _mot_3_step_count                                     6     2      4     405
                                              6 COMRAM     6     2      4
                           i2___wmul
 ---------------------------------------------------------------------------------
 (5) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _finish                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___lwdiv
     ___lwmod (ARG)
   ___lwmod
   ___wmul
   _reset
   _send_String
     _trans_Char
   _speed_select
   _unwind
   _zero_mark

 _high_isr (ROOT)
   _finish
   _mot_3_step_count
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      41       5       40.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4A       1       78.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8B      20        0.0%
DATA                 0      0      8B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 18 19:11:32 2019

                           _n 000F           ___wmul@multiplicand 0089                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l230 0236                           l223 001A  
                         l240 028C                           l232 0248                           l224 03B4  
                         l225 01D8                           l250 02F2                           l242 02A4  
                         l227 0218                           l253 0350                           l229 026A  
                         l270 09DA                           l246 02D4                           l239 02BC  
                         l248 02E2                           l290 0946                           l291 0924  
                         l292 0966                           l269 09EE                           l293 093C  
                         l782 0906                           l783 0910                           l792 099C  
                         l793 09A6                           l778 08E6                           l779 08DE  
                         l788 0984                           l789 097C                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           _RX9 007D5E  
                         _TX9 007D66                  __CFG_BOR$OFF 000000                           wreg 000FE8  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l2186 034A  
                        l1900 0AA4                          _BRGH 007D62                          _CREN 007D5C  
                        u2000 0286                          u2010 0288                          u2100 02D0  
                        u2030 029E                          u2040 02A0                          u2060 02B6  
                        _LATA 000F89                          u2070 02B8                          _LATB 000F8A  
                        _LATC 000F8B                          u2090 02CE                          u1710 0A74  
                        u1720 0A76                          u2177 03C0                          u1805 0026  
                        u1750 08EA                          u1806 0028                          u1815 0030  
                        u1816 0032                          u1825 003A                          u1850 005E  
                        u1826 003C                          u1835 0044                          u1780 0988  
                        u1836 0046                          u1845 004E                          u1846 0050  
                        u1868 0062                          _RCIE 007CED                          i2l95 062C  
                        i2l98 05AA                          i2l99 05BA                          _TMR0 000FD6  
                        _TMR1 000FCE                          _SPEN 007D5F                          _TXIE 007CEC  
                        _TXIF 007CF4                          _TXEN 007D65                          _SYNC 007D64  
                        _main 0012                          _send 0080                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 004B                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000               __end_of_InitApp 0860                 __CFG_PLLDIV$1 000000  
              __CFG_CCP2MX$ON 000000                         ?_main 0021                         _ADRES 000FC3  
                       _BRG16 007DC3                         _DIR_1 0018                         _DIR_2 0017  
                       _DIR_3 001E                         _DIR_4 0016               __end_of___lwdiv 091A  
                       i2l111 0706                         i2l104 06CE                         i2l105 065A  
             __end_of___lwmod 09B0                         i2l114 06F4                         i2l106 0678  
                       i2l124 074A                         i2l125 0758                         i2l117 0716  
                       i2l109 06C8                         i2l119 072C                         _RCREG 000FAE  
                       _MOT_1 0020                         _MOT_2 001D                         _MOT_3 001F  
                       _MOT_4 004A                         _SPBRG 000FAF                         _PORTA 000F80  
                       _PORTB 000F81                         _PORTC 000F82                 __CFG_USBDIV$1 000000  
                       _TXREG 000FAD           _ConfigureOscillator 0AAE                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _reset 0ACC                         _turns 0047  
                 _turns_count 0001                         pclath 000FFA                         tablat 000FF5  
            __end_ofi2___wmul 0A24                         status 000FD8                         wtemp6 004C  
        ?_ConfigureOscillator 0021               __initialization 0860                  __end_of_main 04EE  
                      ??_main 0093                 __activetblptr 000002                  ?_send_String 0088  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        _CCPR1L 000FBE  
                      ?_reset 0021                        _GODONE 007E11                        i2l1724 06C8  
                      i2l1692 05BA                     ??_InitApp 0087         ??_ConfigureOscillator 0087  
              __CFG_XINST$OFF 000000              __end_of_high_isr 07A4     __size_of_mot_3_step_count 0024  
                      ___wmul 09B0                        _enable 0013                     ??___lwdiv 0090  
                   ??___lwmod 008B                        _finish 0A48                        _length 0045  
                      _recibi 001A                        clear_0 08A6                        clear_1 08B2  
                      _move_4 001C                        _motor1 009B                        _motor2 0078  
                      _unwind 0A6A                  __pdataCOMRAM 0041                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0060  
     __end_of__initialization 08B8               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
              __pcstackCOMRAM 0021                  __pidataBANK0 0AC4                 __end_of_reset 0AD0  
                   ?i2___wmul 0021                 trans_Char@out 0087                       ??_reset 0087  
                  __pbssBANK0 0060                       ?___wmul 0087                       ?_finish 0021  
                     ?_unwind 0021                    ??i2___wmul 0025                       i2u98_40 057E  
                     i2u99_48 0580          __size_of_send_String 0026                     ?_high_isr 0021  
             __CFG_VREGEN$OFF 000000            __size_of_zero_mark 001A                       _InitApp 07A4  
                     __Hparam 0000                       __Lparam 0000              _mot_3_step_count 0A24  
             __size_of___wmul 0028                       ___lwdiv 08C6                       ___lwmod 096C  
                     _caliber 0076               __size_of_finish 0022               __CFG_STVREN$OFF 000000  
                     __pcinit 0860                       __ramtop 0800                       __ptext0 0012  
                     __ptext1 0A86                       __ptext2 0A6A                       __ptext3 091A  
                     __ptext4 09D8                       __ptext5 0AA0                       __ptext6 0ACC  
                     __ptext7 09B0                       __ptext8 096C                       __ptext9 08C6  
                  _param_flag 0015                     _T0CONbits 000FD5                       _count_1 0043  
                     _count_2 009F                       _count_3 0041                       _count_4 009D  
             __size_of_unwind 001C                     _T1CONbits 000FCD                       _palabra 0060  
                   _T2CONbits 000FCA                       _winding 001B              _mot_4_step_count 0074  
                     _steps_4 0011                    ??_high_isr 002D                __pintcode_body 04EE  
        end_of_initialization 08B8                 __Lmediumconst 0000                       int_func 04EE  
         i2___wmul@multiplier 0021                 ?_speed_select 0087                       postdec1 000FE5  
                     postinc0 000FEE                     _PORTAbits 000F80                     _PORTBbits 000F81  
                   _PORTCbits 000F82             __end_of_zero_mark 0AA0                     _TRISAbits 000F92  
                   _TRISBbits 000F93                     _TRISCbits 000F94                    _trans_Char 0AA0  
 __end_of_ConfigureOscillator 0ABA                   _CCP1CONbits 000FBD                ??_speed_select 0089  
              __end_of___wmul 09D8                 __pidataCOMRAM 0ABA                __end_of_finish 0A6A  
            i2___wmul@product 0025                __end_of_unwind 0A86           start_initialization 0860  
           __size_ofi2___wmul 0026                      ??___wmul 008B                      ??_finish 0021  
                 __pdataBANK0 0099              __CFG_LPT1OSC$OFF 000000                      ??_unwind 0087  
                 __pbssCOMRAM 0001                 __pcstackBANK0 0087                   ?_trans_Char 0021  
    __end_of_mot_3_step_count 0A48             __size_of_high_isr 079C                      ?_InitApp 0021  
                   _main$1965 0097                     _main$1966 0095              ___lwdiv@dividend 008C  
                   __pintcode 0008                      ?___lwdiv 008C                      ?___lwmod 0087  
        __end_of_speed_select 096C                 ??_send_String 008A              ___lwdiv@quotient 0091  
              __size_of_reset 0004                ___wmul@product 008B                      _LATAbits 000F89  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _IPR1bits 000F9F  
                    _PIE1bits 000F9D                      _RA0state 0019                      i2u111_40 064A  
                    i2u103_41 05CC                      i2u104_40 05E0                      i2u112_48 064C  
                    i2u130_40 0738                      i2u114_40 066A                      i2u105_48 05E2  
                    i2u106_41 0612                      i2u131_40 0754                      i2u107_40 061E  
                    i2u132_40 0756                      i2u115_48 066C                      i2u108_40 0620  
                    i2u118_40 068E                      i2u119_48 0690                      _PIR1bits 000F9E  
                    _RCONbits 000FD0              __CFG_WDTPS$32768 000000           __size_of_trans_Char 000E  
                 _finish_flag 0014                    _ADCON0bits 000FC2             ___wmul@multiplier 0087  
                    i2___wmul 09FE                      _PWM_duty 0099               _ADC_value_press 000D  
                   _zero_flag 0049                     _zero_mark 0A86                   _INTCON2bits 000FF1  
                 _INTCON3bits 000FF0                     copy_data0 0874                     copy_data1 0894  
         __end_of_send_String 09FE              __size_of_InitApp 00BC                      __Hrparam 0000  
                    __Lrparam 0000         i2___wmul@multiplicand 0023              __size_of___lwdiv 0054  
            __size_of___lwmod 0044                    ?_zero_mark 0021               ___lwdiv@divisor 008E  
             ___lwdiv@counter 0090                      __ptext10 07A4                      __ptext11 0AAE  
                    __ptext13 0A24                      __ptext14 09FE                      __ptext15 0A48  
                    _high_isr 0008                 __size_of_main 04DC                   _mot_1_steps 0007  
                 _mot_3_steps 0005                   _mot_4_steps 0003  __size_of_ConfigureOscillator 000C  
                    _overflow 007E                      int$flags 004B            mot_3_step_count@ms 0029  
       __size_of_speed_select 0052         __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2  
                 _send_String 09D8                  ??_trans_Char 0087                   _MOT_1_count 000B  
                 _MOT_2_count 007C                   _MOT_3_count 0009                   _MOT_4_count 007A  
           ?_mot_3_step_count 0027                      intlevel2 0000            ??_mot_3_step_count 002B  
            ___lwmod@dividend 0087                send_String@out 0088                    _OSCCONbits 000FD3  
                _speed_select 091A             mot_3_step_count@l 0027            __end_of_trans_Char 0AAE  
         __CFG_FOSC$INTOSC_EC 000000               ___lwmod@divisor 0089               ___lwmod@counter 008B  
                 ??_zero_mark 0087               speed_select@var 0087  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 25 14:04:13 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F2550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  000922                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _PWM_duty
    72  000922  0032               	dw	50
    73                           
    74                           ;initializer for _count_3
    75  000924  0084               	dw	132
    76                           
    77                           ;initializer for _count_1
    78  000926  0002               	dw	2
    79                           
    80                           ;initializer for _length
    81  000928  2422               	dw	9250
    82                           
    83                           ;initializer for _turns
    84  00092A  0FA0               	dw	4000
    85                           
    86                           ;initializer for _zero_flag
    87  00092C  01                 	db	1
    88                           
    89                           ;initializer for _MOT_4
    90  00092D  01                 	db	1
    91                           
    92                           	psect	idataBANK0
    93  00093A                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _motor1
    97  00093A  0001               	dw	1
    98                           
    99                           ;initializer for _count_4
   100  00093C  0005               	dw	5
   101                           
   102                           ;initializer for _count_2
   103  00093E  0001               	dw	1
   104  0000                     _ADRES	set	4035
   105  0000                     _TMR1	set	4046
   106  0000                     _TMR0	set	4054
   107  0000                     _T2CONbits	set	4042
   108  0000                     _CCP1CONbits	set	4029
   109  0000                     _PR2	set	4043
   110  0000                     _SPBRG	set	4015
   111  0000                     _IPR1bits	set	3999
   112  0000                     _INTCON2bits	set	4081
   113  0000                     _RCONbits	set	4048
   114  0000                     _TRISBbits	set	3987
   115  0000                     _TRISCbits	set	3988
   116  0000                     _PIE1bits	set	3997
   117  0000                     _ADCON2	set	4032
   118  0000                     _ADCON0bits	set	4034
   119  0000                     _TRISAbits	set	3986
   120  0000                     _ADCON1	set	4033
   121  0000                     _LATC	set	3979
   122  0000                     _PORTC	set	3970
   123  0000                     _LATB	set	3978
   124  0000                     _PORTB	set	3969
   125  0000                     _LATA	set	3977
   126  0000                     _PORTA	set	3968
   127  0000                     _OSCCONbits	set	4051
   128  0000                     _T0CONbits	set	4053
   129  0000                     _T1CONbits	set	4045
   130  0000                     _CCPR1L	set	4030
   131  0000                     _INTCON3bits	set	4080
   132  0000                     _TXREG	set	4013
   133  0000                     _RCREG	set	4014
   134  0000                     _PORTBbits	set	3969
   135  0000                     _LATBbits	set	3978
   136  0000                     _PIR1bits	set	3998
   137  0000                     _PORTCbits	set	3970
   138  0000                     _LATCbits	set	3979
   139  0000                     _PORTAbits	set	3968
   140  0000                     _LATAbits	set	3977
   141  0000                     _INTCONbits	set	4082
   142  0000                     _TXIE	set	31980
   143  0000                     _RCIE	set	31981
   144  0000                     _RX9	set	32094
   145  0000                     _TX9	set	32102
   146  0000                     _CREN	set	32092
   147  0000                     _TXEN	set	32101
   148  0000                     _SYNC	set	32100
   149  0000                     _SPEN	set	32095
   150  0000                     _BRG16	set	32195
   151  0000                     _BRGH	set	32098
   152  0000                     _GODONE	set	32273
   153  0000                     _TXIF	set	31988
   154                           
   155                           ; #config settings
   156  0000                     
   157                           	psect	cinit
   158  00078E                     __pcinit:
   159                           	opt stack 0
   160  00078E                     start_initialization:
   161                           	opt stack 0
   162  00078E                     __initialization:
   163                           	opt stack 0
   164                           
   165                           ; Initialize objects allocated to BANK0 (6 bytes)
   166                           ; load TBLPTR registers with __pidataBANK0
   167  00078E  0E3A               	movlw	low __pidataBANK0
   168  000790  6EF6               	movwf	tblptrl,c
   169  000792  0E09               	movlw	high __pidataBANK0
   170  000794  6EF7               	movwf	tblptrh,c
   171  000796  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   172  000798  6EF8               	movwf	tblptru,c
   173  00079A  EE00  F08B         	lfsr	0,__pdataBANK0
   174  00079E  EE10 F006          	lfsr	1,6
   175  0007A2                     copy_data0:
   176  0007A2  0009               	tblrd		*+
   177  0007A4  CFF5 FFEE          	movff	tablat,postinc0
   178  0007A8  50E5               	movf	postdec1,w,c
   179  0007AA  50E1               	movf	fsr1l,w,c
   180  0007AC  E1FA               	bnz	copy_data0
   181                           
   182                           ; Initialize objects allocated to COMRAM (12 bytes)
   183                           ; load TBLPTR registers with __pidataCOMRAM
   184  0007AE  0E22               	movlw	low __pidataCOMRAM
   185  0007B0  6EF6               	movwf	tblptrl,c
   186  0007B2  0E09               	movlw	high __pidataCOMRAM
   187  0007B4  6EF7               	movwf	tblptrh,c
   188  0007B6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   189  0007B8  6EF8               	movwf	tblptru,c
   190  0007BA  EE00  F048         	lfsr	0,__pdataCOMRAM
   191  0007BE  EE10 F00C          	lfsr	1,12
   192  0007C2                     copy_data1:
   193  0007C2  0009               	tblrd		*+
   194  0007C4  CFF5 FFEE          	movff	tablat,postinc0
   195  0007C8  50E5               	movf	postdec1,w,c
   196  0007CA  50E1               	movf	fsr1l,w,c
   197  0007CC  E1FA               	bnz	copy_data1
   198                           
   199                           ; Clear objects allocated to BANK0 (35 bytes)
   200  0007CE  EE00  F060         	lfsr	0,__pbssBANK0
   201  0007D2  0E23               	movlw	35
   202  0007D4                     clear_0:
   203  0007D4  6AEE               	clrf	postinc0,c
   204  0007D6  06E8               	decf	wreg,f,c
   205  0007D8  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to COMRAM (39 bytes)
   208  0007DA  EE00  F001         	lfsr	0,__pbssCOMRAM
   209  0007DE  0E27               	movlw	39
   210  0007E0                     clear_1:
   211  0007E0  6AEE               	clrf	postinc0,c
   212  0007E2  06E8               	decf	wreg,f,c
   213  0007E4  E1FD               	bnz	clear_1
   214  0007E6                     end_of_initialization:
   215                           	opt stack 0
   216  0007E6                     __end_of__initialization:
   217                           	opt stack 0
   218  0007E6  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  0007E8  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  0007EA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  0007EC  6EF8               	movwf	tblptru,c
   222  0007EE  0100               	movlb	0
   223  0007F0  EF09  F000         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           tblptrh	equ	0xFF7
   226                           tblptrl	equ	0xFF6
   227                           tablat	equ	0xFF5
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           postdec1	equ	0xFE5
   231                           fsr1l	equ	0xFE1
   232                           
   233                           	psect	bssCOMRAM
   234  000001                     __pbssCOMRAM:
   235                           	opt stack 0
   236  000001                     _caliber:
   237                           	opt stack 0
   238  000001                     	ds	2
   239  000003                     _turns_count:
   240                           	opt stack 0
   241  000003                     	ds	2
   242  000005                     _mot_4_steps:
   243                           	opt stack 0
   244  000005                     	ds	2
   245  000007                     _mot_3_steps:
   246                           	opt stack 0
   247  000007                     	ds	2
   248  000009                     _mot_1_steps:
   249                           	opt stack 0
   250  000009                     	ds	2
   251  00000B                     _MOT_3_count:
   252                           	opt stack 0
   253  00000B                     	ds	2
   254  00000D                     _MOT_1_count:
   255                           	opt stack 0
   256  00000D                     	ds	2
   257  00000F                     _ADC_value_press:
   258                           	opt stack 0
   259  00000F                     	ds	2
   260  000011                     _overflow:
   261                           	opt stack 0
   262  000011                     	ds	2
   263  000013                     _n:
   264                           	opt stack 0
   265  000013                     	ds	2
   266  000015                     _ADC_previous_value:
   267                           	opt stack 0
   268  000015                     	ds	2
   269  000017                     _steps_4:
   270                           	opt stack 0
   271  000017                     	ds	2
   272  000019                     _unwind_flag:
   273                           	opt stack 0
   274  000019                     	ds	1
   275  00001A                     _enable:
   276                           	opt stack 0
   277  00001A                     	ds	1
   278  00001B                     _finish_flag:
   279                           	opt stack 0
   280  00001B                     	ds	1
   281  00001C                     _param_flag:
   282                           	opt stack 0
   283  00001C                     	ds	1
   284  00001D                     _DIR_4:
   285                           	opt stack 0
   286  00001D                     	ds	1
   287  00001E                     _DIR_2:
   288                           	opt stack 0
   289  00001E                     	ds	1
   290  00001F                     _DIR_1:
   291                           	opt stack 0
   292  00001F                     	ds	1
   293  000020                     _RA0state:
   294                           	opt stack 0
   295  000020                     	ds	1
   296  000021                     _recibi:
   297                           	opt stack 0
   298  000021                     	ds	1
   299  000022                     _winding:
   300                           	opt stack 0
   301  000022                     	ds	1
   302  000023                     _move_4:
   303                           	opt stack 0
   304  000023                     	ds	1
   305  000024                     _MOT_2:
   306                           	opt stack 0
   307  000024                     	ds	1
   308  000025                     _DIR_3:
   309                           	opt stack 0
   310  000025                     	ds	1
   311  000026                     _MOT_3:
   312                           	opt stack 0
   313  000026                     	ds	1
   314  000027                     _MOT_1:
   315                           	opt stack 0
   316  000027                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	dataCOMRAM
   327  000048                     __pdataCOMRAM:
   328                           	opt stack 0
   329  000048                     _PWM_duty:
   330                           	opt stack 0
   331  000048                     	ds	2
   332  00004A                     _count_3:
   333                           	opt stack 0
   334  00004A                     	ds	2
   335  00004C                     _count_1:
   336                           	opt stack 0
   337  00004C                     	ds	2
   338  00004E                     _length:
   339                           	opt stack 0
   340  00004E                     	ds	2
   341  000050                     _turns:
   342                           	opt stack 0
   343  000050                     	ds	2
   344  000052                     _zero_flag:
   345                           	opt stack 0
   346  000052                     	ds	1
   347  000053                     _MOT_4:
   348                           	opt stack 0
   349  000053                     	ds	1
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	bssBANK0
   360  000060                     __pbssBANK0:
   361                           	opt stack 0
   362  000060                     _palabra:
   363                           	opt stack 0
   364  000060                     	ds	20
   365  000074                     _send:
   366                           	opt stack 0
   367  000074                     	ds	7
   368  00007B                     _mot_4_step_count:
   369                           	opt stack 0
   370  00007B                     	ds	2
   371  00007D                     _motor2:
   372                           	opt stack 0
   373  00007D                     	ds	2
   374  00007F                     _MOT_4_count:
   375                           	opt stack 0
   376  00007F                     	ds	2
   377  000081                     _MOT_2_count:
   378                           	opt stack 0
   379  000081                     	ds	2
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           postdec1	equ	0xFE5
   387                           fsr1l	equ	0xFE1
   388                           
   389                           	psect	dataBANK0
   390  00008B                     __pdataBANK0:
   391                           	opt stack 0
   392  00008B                     _motor1:
   393                           	opt stack 0
   394  00008B                     	ds	2
   395  00008D                     _count_4:
   396                           	opt stack 0
   397  00008D                     	ds	2
   398  00008F                     _count_2:
   399                           	opt stack 0
   400  00008F                     	ds	2
   401                           tblptru	equ	0xFF8
   402                           tblptrh	equ	0xFF7
   403                           tblptrl	equ	0xFF6
   404                           tablat	equ	0xFF5
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           postdec1	equ	0xFE5
   408                           fsr1l	equ	0xFE1
   409                           
   410                           	psect	cstackBANK0
   411  000083                     __pcstackBANK0:
   412                           	opt stack 0
   413  000083                     ?___wmul:
   414                           	opt stack 0
   415  000083                     trans_Char@out:
   416                           	opt stack 0
   417  000083                     speed_select@var:
   418                           	opt stack 0
   419  000083                     ___wmul@multiplier:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x0
   423  000083                     	ds	2
   424  000085                     ??_speed_select:
   425  000085                     ___wmul@multiplicand:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x2
   429  000085                     	ds	2
   430  000087                     ___wmul@product:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x4
   434  000087                     	ds	2
   435  000089                     ??_main:
   436                           
   437                           ; 1 bytes @ 0x6
   438  000089                     	ds	2
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1l	equ	0xFE1
   447                           
   448                           	psect	cstackCOMRAM
   449  000028                     __pcstackCOMRAM:
   450                           	opt stack 0
   451  000028                     ?i2___wmul:
   452                           	opt stack 0
   453  000028                     i2___wmul@multiplier:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x0
   457  000028                     	ds	2
   458  00002A                     i2___wmul@multiplicand:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x2
   462  00002A                     	ds	2
   463  00002C                     i2___wmul@product:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x4
   467  00002C                     	ds	2
   468  00002E                     ?_mot_3_step_count:
   469                           	opt stack 0
   470  00002E                     mot_3_step_count@l:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x6
   474  00002E                     	ds	2
   475  000030                     mot_3_step_count@ms:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x8
   479  000030                     	ds	2
   480  000032                     ??_mot_3_step_count:
   481                           
   482                           ; 1 bytes @ 0xA
   483  000032                     	ds	2
   484  000034                     ??_high_isr:
   485                           
   486                           ; 1 bytes @ 0xC
   487  000034                     	ds	20
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 90 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   516 ;;      Params:         0       0       0       0       0       0       0       0       0
   517 ;;      Locals:         0       0       0       0       0       0       0       0       0
   518 ;;      Temps:          0       2       0       0       0       0       0       0       0
   519 ;;      Totals:         0       2       0       0       0       0       0       0       0
   520 ;;Total ram usage:        2 bytes
   521 ;; Hardware stack levels required when called:    4
   522 ;; This function calls:
   523 ;;		_ConfigureOscillator
   524 ;;		_InitApp
   525 ;;		___wmul
   526 ;;		_reset
   527 ;;		_speed_select
   528 ;;		_trans_Char
   529 ;;		_unwind
   530 ;;		_zero_mark
   531 ;; This function is called by:
   532 ;;		Startup code after reset
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text0
   537  000012                     __ptext0:
   538                           	opt stack 0
   539  000012                     _main:
   540                           	opt stack 27
   541                           
   542                           ;main.c: 92: ConfigureOscillator();
   543                           
   544                           ;incstack = 0
   545  000012  EC97  F004         	call	_ConfigureOscillator	;wreg free
   546                           
   547                           ;main.c: 95: InitApp();
   548  000016  EC69  F003         	call	_InitApp	;wreg free
   549  00001A                     
   550                           ;main.c: 98: CCPR1L = PWM_duty;
   551  00001A  C048  FFBE         	movff	_PWM_duty,4030	;volatile
   552                           
   553                           ;main.c: 100: LATAbits.LA2 = DIR_1;
   554  00001E  B01F               	btfsc	_DIR_1,0,c
   555  000020  D002               	bra	u1775
   556  000022  9489               	bcf	3977,2,c	;volatile
   557  000024  D001               	bra	u1776
   558  000026                     u1775:
   559  000026  8489               	bsf	3977,2,c	;volatile
   560  000028                     u1776:
   561                           
   562                           ;main.c: 101: LATAbits.LA4 = DIR_2;
   563  000028  B01E               	btfsc	_DIR_2,0,c
   564  00002A  D002               	bra	u1785
   565  00002C  9889               	bcf	3977,4,c	;volatile
   566  00002E  D001               	bra	u1786
   567  000030                     u1785:
   568  000030  8889               	bsf	3977,4,c	;volatile
   569  000032                     u1786:
   570                           
   571                           ;main.c: 102: LATCbits.LC0 = DIR_3;
   572  000032  B025               	btfsc	_DIR_3,0,c
   573  000034  D002               	bra	u1795
   574  000036  908B               	bcf	3979,0,c	;volatile
   575  000038  D001               	bra	u1796
   576  00003A                     u1795:
   577  00003A  808B               	bsf	3979,0,c	;volatile
   578  00003C                     u1796:
   579                           
   580                           ;main.c: 103: LATBbits.LB7 = DIR_4;
   581  00003C  B01D               	btfsc	_DIR_4,0,c
   582  00003E  D002               	bra	u1805
   583  000040  9E8A               	bcf	3978,7,c	;volatile
   584  000042  D001               	bra	u1806
   585  000044                     u1805:
   586  000044  8E8A               	bsf	3978,7,c	;volatile
   587  000046                     u1806:
   588                           
   589                           ;main.c: 104: LATBbits.LB5 = enable;
   590  000046  B01A               	btfsc	_enable,0,c
   591  000048  D002               	bra	u1815
   592  00004A  9A8A               	bcf	3978,5,c	;volatile
   593  00004C  D001               	bra	u1816
   594  00004E                     u1815:
   595  00004E  8A8A               	bsf	3978,5,c	;volatile
   596  000050                     u1816:
   597                           
   598                           ;main.c: 105: LATBbits.LB4 = !enable;
   599  000050  501A               	movf	_enable,w,c
   600  000052  A4D8               	btfss	status,2,c
   601  000054  D004               	goto	u1820
   602  000056  0100               	movlb	0	; () banked
   603  000058  6B89               	clrf	??_main& (0+255),b
   604  00005A  2B89               	incf	??_main& (0+255),f,b
   605  00005C  D002               	goto	u1838
   606  00005E                     u1820:
   607  00005E  0100               	movlb	0	; () banked
   608  000060  6B89               	clrf	??_main& (0+255),b
   609  000062                     u1838:
   610  000062  3B89               	swapf	??_main& (0+255),f,b
   611  000064  508A               	movf	3978,w,c	;volatile
   612  000066  1989               	xorwf	??_main& (0+255),w,b
   613  000068  0BEF               	andlw	-17
   614  00006A  1989               	xorwf	??_main& (0+255),w,b
   615  00006C  6E8A               	movwf	3978,c	;volatile
   616                           
   617                           ; BSR set to: 0
   618                           ;main.c: 107: if (recibi == 1) {
   619  00006E  0421               	decf	_recibi,w,c
   620  000070  A4D8               	btfss	status,2,c
   621  000072  D1B9               	goto	l226
   622                           
   623                           ; BSR set to: 0
   624                           ;main.c: 109: recibi = 0;
   625  000074  0E00               	movlw	0
   626  000076  6E21               	movwf	_recibi,c
   627                           
   628                           ; BSR set to: 0
   629                           ;main.c: 111: if (palabra[0] == 'A') {
   630  000078  0E41               	movlw	65
   631  00007A  1960               	xorwf	_palabra& (0+255),w,b
   632  00007C  A4D8               	btfss	status,2,c
   633  00007E  D09B               	goto	l227
   634                           
   635                           ; BSR set to: 0
   636                           ;main.c: 113: caliber = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   637  000080  0ED0               	movlw	208
   638  000082  2561               	addwf	(_palabra+1)& (0+255),w,b
   639  000084  6F83               	movwf	___wmul@multiplier& (0+255),b
   640  000086  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   641  000088  0EFF               	movlw	255
   642  00008A  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   643  00008C  0E00               	movlw	0
   644  00008E  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   645  000090  0E0A               	movlw	10
   646  000092  6F85               	movwf	___wmul@multiplicand& (0+255),b
   647  000094  EC23  F004         	call	___wmul	;wreg free
   648  000098  0100               	movlb	0	; () banked
   649  00009A  5162               	movf	(_palabra+2)& (0+255),w,b
   650  00009C  6F89               	movwf	??_main& (0+255),b
   651  00009E  6B8A               	clrf	(??_main+1)& (0+255),b
   652  0000A0  5183               	movf	?___wmul& (0+255),w,b
   653  0000A2  2789               	addwf	??_main& (0+255),f,b
   654  0000A4  5184               	movf	(?___wmul+1)& (0+255),w,b
   655  0000A6  238A               	addwfc	(??_main+1)& (0+255),f,b
   656  0000A8  0ED0               	movlw	208
   657  0000AA  2589               	addwf	??_main& (0+255),w,b
   658  0000AC  6E01               	movwf	_caliber,c
   659  0000AE  0EFF               	movlw	255
   660  0000B0  218A               	addwfc	(??_main+1)& (0+255),w,b
   661  0000B2  6E02               	movwf	_caliber+1,c
   662                           
   663                           ;main.c: 114: length = ((palabra[3] - 48) * 1000) + ((palabra[4] - 48) * 100) + ((palabr
      +                          a[5] - 48) * 10) + ((palabra[6] - 48));
   664  0000B4  0ED0               	movlw	208
   665  0000B6  2563               	addwf	(_palabra+3)& (0+255),w,b
   666  0000B8  6F83               	movwf	___wmul@multiplier& (0+255),b
   667  0000BA  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   668  0000BC  0EFF               	movlw	255
   669  0000BE  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   670  0000C0  0E03               	movlw	3
   671  0000C2  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   672  0000C4  0EE8               	movlw	232
   673  0000C6  6F85               	movwf	___wmul@multiplicand& (0+255),b
   674  0000C8  EC23  F004         	call	___wmul	;wreg free
   675  0000CC  0100               	movlb	0	; () banked
   676  0000CE  5166               	movf	(_palabra+6)& (0+255),w,b
   677  0000D0  6F89               	movwf	??_main& (0+255),b
   678  0000D2  6B8A               	clrf	(??_main+1)& (0+255),b
   679  0000D4  5183               	movf	?___wmul& (0+255),w,b
   680  0000D6  2789               	addwf	??_main& (0+255),f,b
   681  0000D8  5184               	movf	(?___wmul+1)& (0+255),w,b
   682  0000DA  238A               	addwfc	(??_main+1)& (0+255),f,b
   683  0000DC  0ED0               	movlw	208
   684  0000DE  2564               	addwf	(_palabra+4)& (0+255),w,b
   685  0000E0  6F83               	movwf	___wmul@multiplier& (0+255),b
   686  0000E2  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   687  0000E4  0EFF               	movlw	255
   688  0000E6  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   689  0000E8  0E00               	movlw	0
   690  0000EA  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   691  0000EC  0E64               	movlw	100
   692  0000EE  6F85               	movwf	___wmul@multiplicand& (0+255),b
   693  0000F0  EC23  F004         	call	___wmul	;wreg free
   694  0000F4  0100               	movlb	0	; () banked
   695  0000F6  5183               	movf	?___wmul& (0+255),w,b
   696  0000F8  2789               	addwf	??_main& (0+255),f,b
   697  0000FA  5184               	movf	(?___wmul+1)& (0+255),w,b
   698  0000FC  238A               	addwfc	(??_main+1)& (0+255),f,b
   699  0000FE  0ED0               	movlw	208
   700  000100  2565               	addwf	(_palabra+5)& (0+255),w,b
   701  000102  6F83               	movwf	___wmul@multiplier& (0+255),b
   702  000104  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   703  000106  0EFF               	movlw	255
   704  000108  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   705  00010A  0E00               	movlw	0
   706  00010C  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   707  00010E  0E0A               	movlw	10
   708  000110  6F85               	movwf	___wmul@multiplicand& (0+255),b
   709  000112  EC23  F004         	call	___wmul	;wreg free
   710  000116  0100               	movlb	0	; () banked
   711  000118  5183               	movf	?___wmul& (0+255),w,b
   712  00011A  2789               	addwf	??_main& (0+255),f,b
   713  00011C  5184               	movf	(?___wmul+1)& (0+255),w,b
   714  00011E  238A               	addwfc	(??_main+1)& (0+255),f,b
   715  000120  0ED0               	movlw	208
   716  000122  2589               	addwf	??_main& (0+255),w,b
   717  000124  6E4E               	movwf	_length,c
   718  000126  0EFF               	movlw	255
   719  000128  218A               	addwfc	(??_main+1)& (0+255),w,b
   720  00012A  6E4F               	movwf	_length+1,c
   721                           
   722                           ;main.c: 115: turns = ((palabra[7] - 48) * 1000) + ((palabra[8] - 48) * 100) + ((palabra
      +                          [9] - 48) * 10) + ((palabra[10] - 48));
   723  00012C  0ED0               	movlw	208
   724  00012E  2567               	addwf	(_palabra+7)& (0+255),w,b
   725  000130  6F83               	movwf	___wmul@multiplier& (0+255),b
   726  000132  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   727  000134  0EFF               	movlw	255
   728  000136  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   729  000138  0E03               	movlw	3
   730  00013A  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   731  00013C  0EE8               	movlw	232
   732  00013E  6F85               	movwf	___wmul@multiplicand& (0+255),b
   733  000140  EC23  F004         	call	___wmul	;wreg free
   734  000144  0100               	movlb	0	; () banked
   735  000146  516A               	movf	(_palabra+10)& (0+255),w,b
   736  000148  6F89               	movwf	??_main& (0+255),b
   737  00014A  6B8A               	clrf	(??_main+1)& (0+255),b
   738  00014C  5183               	movf	?___wmul& (0+255),w,b
   739  00014E  2789               	addwf	??_main& (0+255),f,b
   740  000150  5184               	movf	(?___wmul+1)& (0+255),w,b
   741  000152  238A               	addwfc	(??_main+1)& (0+255),f,b
   742  000154  0ED0               	movlw	208
   743  000156  2568               	addwf	(_palabra+8)& (0+255),w,b
   744  000158  6F83               	movwf	___wmul@multiplier& (0+255),b
   745  00015A  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   746  00015C  0EFF               	movlw	255
   747  00015E  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   748  000160  0E00               	movlw	0
   749  000162  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   750  000164  0E64               	movlw	100
   751  000166  6F85               	movwf	___wmul@multiplicand& (0+255),b
   752  000168  EC23  F004         	call	___wmul	;wreg free
   753  00016C  0100               	movlb	0	; () banked
   754  00016E  5183               	movf	?___wmul& (0+255),w,b
   755  000170  2789               	addwf	??_main& (0+255),f,b
   756  000172  5184               	movf	(?___wmul+1)& (0+255),w,b
   757  000174  238A               	addwfc	(??_main+1)& (0+255),f,b
   758  000176  0ED0               	movlw	208
   759  000178  2569               	addwf	(_palabra+9)& (0+255),w,b
   760  00017A  6F83               	movwf	___wmul@multiplier& (0+255),b
   761  00017C  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   762  00017E  0EFF               	movlw	255
   763  000180  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   764  000182  0E00               	movlw	0
   765  000184  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   766  000186  0E0A               	movlw	10
   767  000188  6F85               	movwf	___wmul@multiplicand& (0+255),b
   768  00018A  EC23  F004         	call	___wmul	;wreg free
   769  00018E  0100               	movlb	0	; () banked
   770  000190  5183               	movf	?___wmul& (0+255),w,b
   771  000192  2789               	addwf	??_main& (0+255),f,b
   772  000194  5184               	movf	(?___wmul+1)& (0+255),w,b
   773  000196  238A               	addwfc	(??_main+1)& (0+255),f,b
   774  000198  0ED0               	movlw	208
   775  00019A  2589               	addwf	??_main& (0+255),w,b
   776  00019C  6E50               	movwf	_turns,c
   777  00019E  0EFF               	movlw	255
   778  0001A0  218A               	addwfc	(??_main+1)& (0+255),w,b
   779  0001A2  6E51               	movwf	_turns+1,c
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 117: param_flag = 1;
   783  0001A4  0E01               	movlw	1
   784  0001A6  6E1C               	movwf	_param_flag,c
   785                           
   786                           ; BSR set to: 0
   787                           ;main.c: 118: speed_select(caliber);
   788  0001A8  C001  F083         	movff	_caliber,speed_select@var
   789  0001AC  C002  F084         	movff	_caliber+1,speed_select@var+1
   790  0001B0  ECFA  F003         	call	_speed_select	;wreg free
   791                           
   792                           ;main.c: 119: } else if (palabra[0] == 'B') {
   793  0001B4  D732               	goto	l225
   794  0001B6                     l227:
   795  0001B6  0E42               	movlw	66
   796  0001B8  0100               	movlb	0	; () banked
   797  0001BA  1960               	xorwf	_palabra& (0+255),w,b
   798  0001BC  A4D8               	btfss	status,2,c
   799  0001BE  D01B               	goto	l229
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 121: PWM_duty = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   803  0001C0  0ED0               	movlw	208
   804  0001C2  2561               	addwf	(_palabra+1)& (0+255),w,b
   805  0001C4  6F83               	movwf	___wmul@multiplier& (0+255),b
   806  0001C6  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
   807  0001C8  0EFF               	movlw	255
   808  0001CA  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   809  0001CC  0E00               	movlw	0
   810  0001CE  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
   811  0001D0  0E0A               	movlw	10
   812  0001D2  6F85               	movwf	___wmul@multiplicand& (0+255),b
   813  0001D4  EC23  F004         	call	___wmul	;wreg free
   814  0001D8  0100               	movlb	0	; () banked
   815  0001DA  5162               	movf	(_palabra+2)& (0+255),w,b
   816  0001DC  6F89               	movwf	??_main& (0+255),b
   817  0001DE  6B8A               	clrf	(??_main+1)& (0+255),b
   818  0001E0  5183               	movf	?___wmul& (0+255),w,b
   819  0001E2  2789               	addwf	??_main& (0+255),f,b
   820  0001E4  5184               	movf	(?___wmul+1)& (0+255),w,b
   821  0001E6  238A               	addwfc	(??_main+1)& (0+255),f,b
   822  0001E8  0ED0               	movlw	208
   823  0001EA  2589               	addwf	??_main& (0+255),w,b
   824  0001EC  6E48               	movwf	_PWM_duty,c
   825  0001EE  0EFF               	movlw	255
   826  0001F0  218A               	addwfc	(??_main+1)& (0+255),w,b
   827  0001F2  6E49               	movwf	_PWM_duty+1,c
   828                           
   829                           ;main.c: 122: } else if ((palabra[0] == 'D') && (zero_flag)) {
   830  0001F4  D712               	goto	l225
   831  0001F6                     l229:
   832                           
   833                           ; BSR set to: 0
   834                           
   835                           ; BSR set to: 0
   836  0001F6  0E44               	movlw	68
   837  0001F8  1960               	xorwf	_palabra& (0+255),w,b
   838  0001FA  A4D8               	btfss	status,2,c
   839  0001FC  D020               	goto	l231
   840                           
   841                           ; BSR set to: 0
   842  0001FE  5052               	movf	_zero_flag,w,c
   843  000200  B4D8               	btfsc	status,2,c
   844  000202  D01D               	goto	l231
   845                           
   846                           ; BSR set to: 0
   847                           ;main.c: 124: if (palabra[1] == '0') {
   848  000204  0E30               	movlw	48
   849  000206  1961               	xorwf	(_palabra+1)& (0+255),w,b
   850  000208  A4D8               	btfss	status,2,c
   851  00020A  D004               	goto	l232
   852  00020C                     u1890:
   853                           
   854                           ; BSR set to: 0
   855                           ;main.c: 126: MOT_3 = 1;
   856  00020C  0E01               	movlw	1
   857  00020E  6E26               	movwf	_MOT_3,c
   858                           
   859                           ;main.c: 127: DIR_3 = 0;
   860  000210  0E00               	movlw	0
   861  000212  D038               	goto	L3
   862  000214                     l232:
   863                           
   864                           ; BSR set to: 0
   865                           
   866                           ; BSR set to: 0
   867  000214  0E31               	movlw	49
   868  000216  1961               	xorwf	(_palabra+1)& (0+255),w,b
   869  000218  B4D8               	btfsc	status,2,c
   870  00021A  D031               	goto	L6
   871                           
   872                           ; BSR set to: 0
   873                           
   874                           ; BSR set to: 0
   875                           
   876                           ;main.c: 132: } else if (palabra[1] == '2') {
   877                           
   878                           ;main.c: 131: DIR_3 = 1;
   879                           
   880                           ; BSR set to: 0
   881                           ;main.c: 130: MOT_3 = 1;
   882  00021C  0E32               	movlw	50
   883  00021E  1961               	xorwf	(_palabra+1)& (0+255),w,b
   884  000220  B4D8               	btfsc	status,2,c
   885  000222  D062               	goto	u2110
   886                           
   887                           ; BSR set to: 0
   888                           
   889                           ; BSR set to: 0
   890                           
   891                           ;main.c: 135: } else if (palabra[1] == '3') {
   892                           
   893                           ; BSR set to: 0
   894                           ;main.c: 134: MOT_3 = 0;
   895  000224  0E33               	movlw	51
   896  000226  1961               	xorwf	(_palabra+1)& (0+255),w,b
   897  000228  A4D8               	btfss	status,2,c
   898  00022A  D6F7               	goto	l225
   899                           
   900                           ; BSR set to: 0
   901                           ;main.c: 137: if ((MOT_3 == 0) && (param_flag)) {
   902  00022C  5026               	movf	_MOT_3,w,c
   903  00022E  A4D8               	btfss	status,2,c
   904  000230  D6F4               	goto	l225
   905                           
   906                           ; BSR set to: 0
   907  000232  501C               	movf	_param_flag,w,c
   908  000234  B4D8               	btfsc	status,2,c
   909  000236  D6F1               	goto	l225
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 139: zero_mark();
   913  000238  EC7D  F004         	call	_zero_mark	;wreg free
   914                           
   915                           ;main.c: 140: }
   916                           ;main.c: 141: }
   917                           ;main.c: 142: } else if (palabra[0] == 'Q') {
   918  00023C  D6EE               	goto	l225
   919  00023E                     l231:
   920  00023E  0E51               	movlw	81
   921  000240  0100               	movlb	0	; () banked
   922  000242  1960               	xorwf	_palabra& (0+255),w,b
   923  000244  A4D8               	btfss	status,2,c
   924  000246  D00B               	goto	l241
   925                           
   926                           ; BSR set to: 0
   927                           ;main.c: 144: if (winding) {
   928  000248  5022               	movf	_winding,w,c
   929  00024A  B4D8               	btfsc	status,2,c
   930  00024C  D004               	goto	l242
   931                           
   932                           ; BSR set to: 0
   933                           ;main.c: 145: trans_Char('N');
   934  00024E  0E4E               	movlw	78
   935  000250  EC8A  F004         	call	_trans_Char
   936                           
   937                           ;main.c: 146: } else {
   938  000254  D6E2               	goto	l225
   939  000256                     l242:
   940                           
   941                           ;main.c: 147: trans_Char('Y');
   942  000256  0E59               	movlw	89
   943  000258  EC8A  F004         	call	_trans_Char
   944                           
   945                           ;main.c: 148: }
   946                           ;main.c: 149: }
   947  00025C  D6DE               	goto	l225
   948  00025E                     l241:
   949                           
   950                           ;main.c: 150: else if ((palabra[0] == 'D') && (unwind_flag)) {
   951  00025E  0E44               	movlw	68
   952  000260  0100               	movlb	0	; () banked
   953  000262  1960               	xorwf	_palabra& (0+255),w,b
   954  000264  A4D8               	btfss	status,2,c
   955  000266  D01B               	goto	l245
   956                           
   957                           ; BSR set to: 0
   958  000268  5019               	movf	_unwind_flag,w,c
   959  00026A  B4D8               	btfsc	status,2,c
   960  00026C  D018               	goto	l245
   961                           
   962                           ; BSR set to: 0
   963                           ;main.c: 152: if (palabra[1] == '0') {
   964  00026E  0E30               	movlw	48
   965  000270  1961               	xorwf	(_palabra+1)& (0+255),w,b
   966  000272  B4D8               	btfsc	status,2,c
   967  000274  D7CB               	goto	u1890
   968                           
   969                           ; BSR set to: 0
   970                           
   971                           ; BSR set to: 0
   972                           
   973                           ;main.c: 156: } else if (palabra[1] == '1') {
   974                           
   975                           ;main.c: 155: DIR_3 = 0;
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 154: MOT_3 = 1;
   979  000276  0E31               	movlw	49
   980  000278  1961               	xorwf	(_palabra+1)& (0+255),w,b
   981  00027A  A4D8               	btfss	status,2,c
   982  00027C  D005               	goto	l248
   983  00027E                     L6:
   984                           
   985                           ; BSR set to: 0
   986                           ;main.c: 158: MOT_3 = 1;
   987  00027E  0E01               	movlw	1
   988  000280  6E26               	movwf	_MOT_3,c
   989                           
   990                           ;main.c: 159: DIR_3 = 1;
   991  000282  0E01               	movlw	1
   992  000284                     L3:
   993  000284  6E25               	movwf	_DIR_3,c
   994                           
   995                           ;main.c: 160: } else if (palabra[1] == '2') {
   996  000286  D6C9               	goto	l225
   997  000288                     l248:
   998                           
   999                           ; BSR set to: 0
  1000                           
  1001                           ; BSR set to: 0
  1002  000288  0E32               	movlw	50
  1003  00028A  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1004  00028C  B4D8               	btfsc	status,2,c
  1005  00028E  D02C               	goto	u2110
  1006                           
  1007                           ; BSR set to: 0
  1008                           
  1009                           ; BSR set to: 0
  1010                           
  1011                           ;main.c: 163: } else if (palabra[1] == '3') {
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;main.c: 162: MOT_3 = 0;
  1015  000290  0E33               	movlw	51
  1016  000292  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1017  000294  A4D8               	btfss	status,2,c
  1018  000296  D6C1               	goto	l225
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;main.c: 166: MOT_3 = 0;
  1022  000298  0E00               	movlw	0
  1023  00029A  6E26               	movwf	_MOT_3,c
  1024  00029C  D019               	goto	u2080
  1025  00029E                     l245:
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 171: else if (palabra[0] == 'M') {
  1029                           
  1030                           ; BSR set to: 0
  1031  00029E  0E4D               	movlw	77
  1032  0002A0  1960               	xorwf	_palabra& (0+255),w,b
  1033  0002A2  A4D8               	btfss	status,2,c
  1034  0002A4  D024               	goto	l254
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;main.c: 173: if (palabra[1] == '1') {
  1038  0002A6  0E31               	movlw	49
  1039  0002A8  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1040  0002AA  A4D8               	btfss	status,2,c
  1041  0002AC  D008               	goto	l255
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;main.c: 174: MOT_1 = !MOT_1;
  1045  0002AE  5027               	movf	_MOT_1,w,c
  1046  0002B0  A4D8               	btfss	status,2,c
  1047  0002B2  D002               	goto	u2050
  1048  0002B4  0E01               	movlw	1
  1049  0002B6  D001               	goto	u2060
  1050  0002B8                     u2050:
  1051  0002B8  0E00               	movlw	0
  1052  0002BA                     u2060:
  1053  0002BA  6E27               	movwf	_MOT_1,c
  1054                           
  1055                           ;main.c: 175: } else if (palabra[1] == '2') {
  1056  0002BC  D6AE               	goto	l225
  1057  0002BE                     l255:
  1058                           
  1059                           ; BSR set to: 0
  1060                           
  1061                           ; BSR set to: 0
  1062  0002BE  0E32               	movlw	50
  1063  0002C0  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1064  0002C2  A4D8               	btfss	status,2,c
  1065  0002C4  D008               	goto	l257
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;main.c: 176: MOT_2 = !MOT_2;
  1069  0002C6  5024               	movf	_MOT_2,w,c
  1070  0002C8  A4D8               	btfss	status,2,c
  1071  0002CA  D002               	goto	u2080
  1072  0002CC  0E01               	movlw	1
  1073  0002CE  D001               	goto	u2090
  1074  0002D0                     u2080:
  1075  0002D0  0E00               	movlw	0
  1076  0002D2                     u2090:
  1077  0002D2  6E24               	movwf	_MOT_2,c
  1078                           
  1079                           ;main.c: 177: } else if (palabra[1] == '3') {
  1080  0002D4  D6A2               	goto	l225
  1081  0002D6                     l257:
  1082                           
  1083                           ; BSR set to: 0
  1084                           
  1085                           ; BSR set to: 0
  1086  0002D6  0E33               	movlw	51
  1087  0002D8  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1088  0002DA  A4D8               	btfss	status,2,c
  1089  0002DC  D69E               	goto	l225
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 178: MOT_3 = !MOT_3;
  1093  0002DE  5026               	movf	_MOT_3,w,c
  1094  0002E0  A4D8               	btfss	status,2,c
  1095  0002E2  D002               	goto	u2110
  1096  0002E4  0E01               	movlw	1
  1097  0002E6  D001               	goto	u2120
  1098  0002E8                     u2110:
  1099  0002E8  0E00               	movlw	0
  1100  0002EA                     u2120:
  1101  0002EA  6E26               	movwf	_MOT_3,c
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;main.c: 179: }
  1105                           ;main.c: 180: } else if (palabra[0] == 'N') {
  1106                           
  1107                           ; BSR set to: 0
  1108                           
  1109                           ; BSR set to: 0
  1110  0002EC  D696               	goto	l225
  1111  0002EE                     l254:
  1112                           
  1113                           ; BSR set to: 0
  1114                           
  1115                           ; BSR set to: 0
  1116  0002EE  0E4E               	movlw	78
  1117  0002F0  1960               	xorwf	_palabra& (0+255),w,b
  1118  0002F2  A4D8               	btfss	status,2,c
  1119  0002F4  D008               	goto	l261
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 182: enable = !enable;
  1123  0002F6  501A               	movf	_enable,w,c
  1124  0002F8  A4D8               	btfss	status,2,c
  1125  0002FA  D002               	goto	u2140
  1126  0002FC  0E01               	movlw	1
  1127  0002FE  D001               	goto	u2150
  1128  000300                     u2140:
  1129  000300  0E00               	movlw	0
  1130  000302                     u2150:
  1131  000302  6E1A               	movwf	_enable,c
  1132                           
  1133                           ;main.c: 183: } else if (palabra[0] == 'W') {
  1134  000304  D68A               	goto	l225
  1135  000306                     l261:
  1136                           
  1137                           ; BSR set to: 0
  1138                           
  1139                           ; BSR set to: 0
  1140  000306  0E57               	movlw	87
  1141  000308  1960               	xorwf	_palabra& (0+255),w,b
  1142  00030A  A4D8               	btfss	status,2,c
  1143  00030C  D003               	goto	l263
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;main.c: 185: unwind();
  1147  00030E  EC6D  F004         	call	_unwind	;wreg free
  1148                           
  1149                           ;main.c: 186: } else if (palabra[0] == 'R') {
  1150  000312  D683               	goto	l225
  1151  000314                     l263:
  1152  000314  0E52               	movlw	82
  1153  000316  0100               	movlb	0	; () banked
  1154  000318  1960               	xorwf	_palabra& (0+255),w,b
  1155  00031A  A4D8               	btfss	status,2,c
  1156  00031C  D003               	goto	l265
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 187: reset();
  1160  00031E  ECA0  F004         	call	_reset	;wreg free
  1161                           
  1162                           ;main.c: 188: } else if (palabra[0] == 'E') {
  1163  000322  D67B               	goto	l225
  1164  000324                     l265:
  1165  000324  0E45               	movlw	69
  1166  000326  0100               	movlb	0	; () banked
  1167  000328  1960               	xorwf	_palabra& (0+255),w,b
  1168  00032A  A4D8               	btfss	status,2,c
  1169  00032C  D676               	goto	l225
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;main.c: 189: if (palabra[1] == 'D') {
  1173  00032E  0E44               	movlw	68
  1174  000330  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1175  000332  A4D8               	btfss	status,2,c
  1176  000334  D026               	goto	l268
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;main.c: 191: DIR_4 = 1;
  1180  000336  0E01               	movlw	1
  1181  000338  6E1D               	movwf	_DIR_4,c
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;main.c: 192: steps_4 = ((palabra[2] - 48) * 100) + ((palabra[3] - 48) * 10) + ((palabra
      +                          [4] - 48));
  1185  00033A  0ED0               	movlw	208
  1186  00033C  2562               	addwf	(_palabra+2)& (0+255),w,b
  1187  00033E  6F83               	movwf	___wmul@multiplier& (0+255),b
  1188  000340  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1189  000342  0EFF               	movlw	255
  1190  000344  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1191  000346  0E00               	movlw	0
  1192  000348  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1193  00034A  0E64               	movlw	100
  1194  00034C  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1195  00034E  EC23  F004         	call	___wmul	;wreg free
  1196  000352  0100               	movlb	0	; () banked
  1197  000354  5164               	movf	(_palabra+4)& (0+255),w,b
  1198  000356  6F89               	movwf	??_main& (0+255),b
  1199  000358  6B8A               	clrf	(??_main+1)& (0+255),b
  1200  00035A  5183               	movf	?___wmul& (0+255),w,b
  1201  00035C  2789               	addwf	??_main& (0+255),f,b
  1202  00035E  5184               	movf	(?___wmul+1)& (0+255),w,b
  1203  000360  238A               	addwfc	(??_main+1)& (0+255),f,b
  1204  000362  0ED0               	movlw	208
  1205  000364  2563               	addwf	(_palabra+3)& (0+255),w,b
  1206  000366  6F83               	movwf	___wmul@multiplier& (0+255),b
  1207  000368  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1208  00036A  0EFF               	movlw	255
  1209  00036C  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1210  00036E  0E00               	movlw	0
  1211  000370  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1212  000372  0E0A               	movlw	10
  1213  000374  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1214  000376  EC23  F004         	call	___wmul	;wreg free
  1215  00037A  D029               	goto	L4
  1216  00037C                     l2134:
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;main.c: 193: move_4 = 1;
  1220  00037C  0E01               	movlw	1
  1221  00037E  6E23               	movwf	_move_4,c
  1222                           
  1223                           ;main.c: 194: } else if (palabra[1] == 'I') {
  1224  000380  D64C               	goto	l225
  1225  000382                     l268:
  1226                           
  1227                           ; BSR set to: 0
  1228                           
  1229                           ; BSR set to: 0
  1230  000382  0E49               	movlw	73
  1231  000384  1961               	xorwf	(_palabra+1)& (0+255),w,b
  1232  000386  A4D8               	btfss	status,2,c
  1233  000388  D648               	goto	l225
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 196: DIR_4 = 0;
  1237  00038A  0E00               	movlw	0
  1238  00038C  6E1D               	movwf	_DIR_4,c
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 197: steps_4 = ((palabra[2] - 48) * 100) + ((palabra[3] - 48) * 10) + ((palabra
      +                          [4] - 48));
  1242  00038E  0ED0               	movlw	208
  1243  000390  2562               	addwf	(_palabra+2)& (0+255),w,b
  1244  000392  6F83               	movwf	___wmul@multiplier& (0+255),b
  1245  000394  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1246  000396  0EFF               	movlw	255
  1247  000398  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1248  00039A  0E00               	movlw	0
  1249  00039C  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1250  00039E  0E64               	movlw	100
  1251  0003A0  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1252  0003A2  EC23  F004         	call	___wmul	;wreg free
  1253  0003A6  0100               	movlb	0	; () banked
  1254  0003A8  5164               	movf	(_palabra+4)& (0+255),w,b
  1255  0003AA  6F89               	movwf	??_main& (0+255),b
  1256  0003AC  6B8A               	clrf	(??_main+1)& (0+255),b
  1257  0003AE  5183               	movf	?___wmul& (0+255),w,b
  1258  0003B0  2789               	addwf	??_main& (0+255),f,b
  1259  0003B2  5184               	movf	(?___wmul+1)& (0+255),w,b
  1260  0003B4  238A               	addwfc	(??_main+1)& (0+255),f,b
  1261  0003B6  0ED0               	movlw	208
  1262  0003B8  2563               	addwf	(_palabra+3)& (0+255),w,b
  1263  0003BA  6F83               	movwf	___wmul@multiplier& (0+255),b
  1264  0003BC  6B84               	clrf	(___wmul@multiplier+1)& (0+255),b
  1265  0003BE  0EFF               	movlw	255
  1266  0003C0  2384               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  1267  0003C2  0E00               	movlw	0
  1268  0003C4  6F86               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1269  0003C6  0E0A               	movlw	10
  1270  0003C8  6F85               	movwf	___wmul@multiplicand& (0+255),b
  1271  0003CA  EC23  F004         	call	___wmul	;wreg free
  1272  0003CE                     L4:
  1273  0003CE  0100               	movlb	0	; () banked
  1274  0003D0  5183               	movf	?___wmul& (0+255),w,b
  1275  0003D2  2789               	addwf	??_main& (0+255),f,b
  1276  0003D4  5184               	movf	(?___wmul+1)& (0+255),w,b
  1277  0003D6  238A               	addwfc	(??_main+1)& (0+255),f,b
  1278  0003D8  0ED0               	movlw	208
  1279  0003DA  2589               	addwf	??_main& (0+255),w,b
  1280  0003DC  6E17               	movwf	_steps_4,c
  1281  0003DE  0EFF               	movlw	255
  1282  0003E0  218A               	addwfc	(??_main+1)& (0+255),w,b
  1283  0003E2  6E18               	movwf	_steps_4+1,c
  1284  0003E4  D7CB               	goto	l2134
  1285  0003E6                     l226:
  1286                           
  1287                           ; BSR set to: 0
  1288  0003E6  B2C2               	btfsc	4034,1,c	;volatile
  1289  0003E8  D618               	goto	l225
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;main.c: 205: _delay((unsigned long)((4)*(8000000/4000.0)));
  1293  0003EA  0E0B               	movlw	11
  1294  0003EC  0100               	movlb	0	; () banked
  1295  0003EE  6F89               	movwf	??_main& (0+255),b
  1296  0003F0  0E62               	movlw	98
  1297  0003F2                     u2237:
  1298  0003F2  2EE8               	decfsz	wreg,f,c
  1299  0003F4  D7FE               	bra	u2237
  1300  0003F6  2F89               	decfsz	??_main& (0+255),f,b
  1301  0003F8  D7FC               	bra	u2237
  1302  0003FA  F000               	nop	
  1303                           
  1304                           ;main.c: 207: GODONE = 1;
  1305  0003FC  82C2               	bsf	4034,1,c	;volatile
  1306  0003FE  D60D               	goto	l225
  1307  000400                     __end_of_main:
  1308                           	opt stack 0
  1309                           tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           postinc0	equ	0xFEE
  1314                           wreg	equ	0xFE8
  1315                           postdec1	equ	0xFE5
  1316                           fsr1l	equ	0xFE1
  1317                           status	equ	0xFD8
  1318                           
  1319 ;; *************** function _zero_mark *****************
  1320 ;; Defined at:
  1321 ;;		line 245 in file "main.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      void 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1335 ;;      Params:         0       0       0       0       0       0       0       0       0
  1336 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1338 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1339 ;;Total ram usage:        0 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    3
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           	psect	text1
  1350  0008FA                     __ptext1:
  1351                           	opt stack 0
  1352  0008FA                     _zero_mark:
  1353                           	opt stack 27
  1354                           
  1355                           ;main.c: 247: DIR_3 = 1;
  1356                           
  1357                           ;incstack = 0
  1358  0008FA  0E01               	movlw	1
  1359  0008FC  6E25               	movwf	_DIR_3,c
  1360                           
  1361                           ;main.c: 248: T1CONbits.TMR1ON = 0;
  1362  0008FE  90CD               	bcf	4045,0,c	;volatile
  1363                           
  1364                           ;main.c: 249: T0CONbits.TMR0ON = 1;
  1365  000900  8ED5               	bsf	4053,7,c	;volatile
  1366                           
  1367                           ;main.c: 250: zero_flag = 0;
  1368  000902  0E00               	movlw	0
  1369  000904  6E52               	movwf	_zero_flag,c
  1370                           
  1371                           ;main.c: 251: winding = 1;
  1372  000906  0E01               	movlw	1
  1373  000908  6E22               	movwf	_winding,c
  1374                           
  1375                           ;main.c: 252: MOT_1 = 1;
  1376  00090A  0E01               	movlw	1
  1377  00090C  6E27               	movwf	_MOT_1,c
  1378                           
  1379                           ;main.c: 253: MOT_3 = 1;
  1380  00090E  0E01               	movlw	1
  1381  000910  6E26               	movwf	_MOT_3,c
  1382  000912  0012               	return		;funcret
  1383  000914                     __end_of_zero_mark:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1l	equ	0xFE1
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _unwind *****************
  1396 ;; Defined at:
  1397 ;;		line 262 in file "main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1411 ;;      Params:         0       0       0       0       0       0       0       0       0
  1412 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1414 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1415 ;;Total ram usage:        0 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    3
  1418 ;; This function calls:
  1419 ;;		Nothing
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text2
  1426  0008DA                     __ptext2:
  1427                           	opt stack 0
  1428  0008DA                     _unwind:
  1429                           	opt stack 27
  1430                           
  1431                           ;main.c: 264: enable = !enable;
  1432                           
  1433                           ;incstack = 0
  1434  0008DA  501A               	movf	_enable,w,c
  1435  0008DC  A4D8               	btfss	status,2,c
  1436  0008DE  D002               	goto	u1750
  1437  0008E0  0E01               	movlw	1
  1438  0008E2  D001               	goto	u1760
  1439  0008E4                     u1750:
  1440  0008E4  0E00               	movlw	0
  1441  0008E6                     u1760:
  1442  0008E6  6E1A               	movwf	_enable,c
  1443                           
  1444                           ;main.c: 265: T1CONbits.TMR1ON = 1;
  1445  0008E8  80CD               	bsf	4045,0,c	;volatile
  1446                           
  1447                           ;main.c: 266: T0CONbits.TMR0ON = 0;
  1448  0008EA  9ED5               	bcf	4053,7,c	;volatile
  1449                           
  1450                           ;main.c: 267: MOT_3 = 0;
  1451  0008EC  0E00               	movlw	0
  1452  0008EE  6E26               	movwf	_MOT_3,c
  1453                           
  1454                           ;main.c: 268: MOT_2 = 1;
  1455  0008F0  0E01               	movlw	1
  1456  0008F2  6E24               	movwf	_MOT_2,c
  1457                           
  1458                           ;main.c: 269: unwind_flag = 1;
  1459  0008F4  0E01               	movlw	1
  1460  0008F6  6E19               	movwf	_unwind_flag,c
  1461  0008F8  0012               	return		;funcret
  1462  0008FA                     __end_of_unwind:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           postdec1	equ	0xFE5
  1471                           fsr1l	equ	0xFE1
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _trans_Char *****************
  1475 ;; Defined at:
  1476 ;;		line 228 in file "main.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  out             1    wreg     unsigned char 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  out             1    0[BANK0 ] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1490 ;;      Params:         0       0       0       0       0       0       0       0       0
  1491 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1493 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1494 ;;Total ram usage:        1 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    3
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;;		_send_String
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text3
  1506  000914                     __ptext3:
  1507                           	opt stack 0
  1508  000914                     _trans_Char:
  1509                           	opt stack 27
  1510                           
  1511                           ;incstack = 0
  1512                           ;trans_Char@out stored from wreg
  1513  000914  0100               	movlb	0	; () banked
  1514  000916  6F83               	movwf	trans_Char@out& (0+255),b
  1515  000918                     
  1516                           ;main.c: 229: while (TXIF == 0);
  1517  000918  A89E               	btfss	3998,4,c	;volatile
  1518  00091A  D7FE               	goto	l1998
  1519                           
  1520                           ;main.c: 230: TXREG = out;
  1521  00091C  C083  FFAD         	movff	trans_Char@out,4013	;volatile
  1522  000920  0012               	return		;funcret
  1523  000922                     __end_of_trans_Char:
  1524                           	opt stack 0
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _speed_select *****************
  1536 ;; Defined at:
  1537 ;;		line 291 in file "main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  var             2    0[BANK0 ] unsigned int 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1551 ;;      Params:         0       2       0       0       0       0       0       0       0
  1552 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1553 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1554 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1555 ;;Total ram usage:        4 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    3
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           	psect	text4
  1566  0007F4                     __ptext4:
  1567                           	opt stack 0
  1568  0007F4                     _speed_select:
  1569                           	opt stack 27
  1570                           
  1571                           ;main.c: 293: MOT_4 = 1;
  1572                           
  1573                           ;incstack = 0
  1574  0007F4  0E01               	movlw	1
  1575  0007F6  6E53               	movwf	_MOT_4,c
  1576                           
  1577                           ;main.c: 294: DIR_4 = 0;
  1578  0007F8  0E00               	movlw	0
  1579  0007FA  6E1D               	movwf	_DIR_4,c
  1580                           
  1581                           ;main.c: 295: switch (var) {
  1582  0007FC  D011               	goto	l305
  1583  0007FE                     
  1584                           ;main.c: 298: count_1 = 2;
  1585  0007FE  0E00               	movlw	0
  1586  000800  6E4D               	movwf	_count_1+1,c
  1587  000802  0E02               	movlw	2
  1588  000804  6E4C               	movwf	_count_1,c
  1589                           
  1590                           ;main.c: 299: count_3 = 132;
  1591  000806  0E00               	movlw	0
  1592  000808  6E4B               	movwf	_count_3+1,c
  1593  00080A  0E84               	movlw	132
  1594  00080C  6E4A               	movwf	_count_3,c
  1595                           
  1596                           ;main.c: 300: steps_4 = 200;
  1597  00080E  0E00               	movlw	0
  1598  000810  6E18               	movwf	_steps_4+1,c
  1599  000812  0EC8               	movlw	200
  1600  000814  D003               	goto	L5
  1601  000816                     
  1602                           ;main.c: 305: steps_4 = 400;
  1603  000816  0E01               	movlw	1
  1604  000818  6E18               	movwf	_steps_4+1,c
  1605  00081A  0E90               	movlw	144
  1606  00081C                     L5:
  1607  00081C  6E17               	movwf	_steps_4,c
  1608                           
  1609                           ;main.c: 306: }
  1610  00081E  D010               	goto	l307
  1611  000820                     l305:
  1612  000820  C083  F085         	movff	speed_select@var,??_speed_select
  1613  000824  C084  F086         	movff	speed_select@var+1,??_speed_select+1
  1614                           
  1615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1616                           ; Switch size 1, requested type "space"
  1617                           ; Number of cases is 1, Range of values is 0 to 0
  1618                           ; switch strategies available:
  1619                           ; Name         Instructions Cycles
  1620                           ; simple_byte            4     3 (average)
  1621                           ;	Chosen strategy is simple_byte
  1622  000828  0100               	movlb	0	; () banked
  1623  00082A  5186               	movf	(??_speed_select+1)& (0+255),w,b
  1624  00082C  0A00               	xorlw	0	; case 0
  1625  00082E  A4D8               	btfss	status,2,c
  1626  000830  D007               	goto	l307
  1627                           
  1628                           ; BSR set to: 0
  1629                           ; Switch size 1, requested type "space"
  1630                           ; Number of cases is 2, Range of values is 25 to 33
  1631                           ; switch strategies available:
  1632                           ; Name         Instructions Cycles
  1633                           ; simple_byte            7     4 (average)
  1634                           ;	Chosen strategy is simple_byte
  1635  000832  5185               	movf	??_speed_select& (0+255),w,b
  1636  000834  0A19               	xorlw	25	; case 25
  1637  000836  B4D8               	btfsc	status,2,c
  1638  000838  D7E2               	goto	l306
  1639  00083A  0A38               	xorlw	56	; case 33
  1640  00083C  B4D8               	btfsc	status,2,c
  1641  00083E  D7EB               	goto	l308
  1642  000840                     l307:
  1643                           
  1644                           ;main.c: 307: move_4 = 1;
  1645                           
  1646                           ; BSR set to: 0
  1647  000840  0E01               	movlw	1
  1648  000842  6E23               	movwf	_move_4,c
  1649  000844  0012               	return		;funcret
  1650  000846                     __end_of_speed_select:
  1651                           	opt stack 0
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1l	equ	0xFE1
  1660                           status	equ	0xFD8
  1661                           
  1662 ;; *************** function _reset *****************
  1663 ;; Defined at:
  1664 ;;		line 285 in file "main.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		None
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    3
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text5
  1693  000940                     __ptext5:
  1694                           	opt stack 0
  1695  000940                     _reset:
  1696                           	opt stack 27
  1697                           
  1698                           ;incstack = 0
  1699  000940  00FF               	reset		;# 
  1700  000942  0012               	return		;funcret
  1701  000944                     __end_of_reset:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1l	equ	0xFE1
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function ___wmul *****************
  1714 ;; Defined at:
  1715 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1718 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;  product         2    4[BANK0 ] unsigned int 
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  2    0[BANK0 ] unsigned int 
  1723 ;; Registers used:
  1724 ;;		wreg, status,2, status,0, prodl, prodh
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1730 ;;      Params:         0       4       0       0       0       0       0       0       0
  1731 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1733 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1734 ;;Total ram usage:        6 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    3
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_main
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text6
  1745  000846                     __ptext6:
  1746                           	opt stack 0
  1747  000846                     ___wmul:
  1748                           	opt stack 27
  1749                           
  1750                           ;incstack = 0
  1751  000846  0100               	movlb	0	; () banked
  1752  000848  5183               	movf	___wmul@multiplier& (0+255),w,b
  1753  00084A  0385               	mulwf	___wmul@multiplicand& (0+255),b
  1754  00084C  CFF3 F087          	movff	prodl,___wmul@product
  1755  000850  CFF4 F088          	movff	prodh,___wmul@product+1
  1756  000854  5183               	movf	___wmul@multiplier& (0+255),w,b
  1757  000856  0386               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1758  000858  50F3               	movf	prodl,w,c
  1759  00085A  2788               	addwf	(___wmul@product+1)& (0+255),f,b
  1760  00085C  5184               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1761  00085E  0385               	mulwf	___wmul@multiplicand& (0+255),b
  1762  000860  50F3               	movf	prodl,w,c
  1763  000862  2788               	addwf	(___wmul@product+1)& (0+255),f,b
  1764                           
  1765                           ; BSR set to: 0
  1766  000864  C087  F083         	movff	___wmul@product,?___wmul
  1767  000868  C088  F084         	movff	___wmul@product+1,?___wmul+1
  1768  00086C  0012               	return	
  1769  00086E                     __end_of___wmul:
  1770                           	opt stack 0
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1l	equ	0xFE1
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _InitApp *****************
  1784 ;; Defined at:
  1785 ;;		line 33 in file "user.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1799 ;;      Params:         0       0       0       0       0       0       0       0       0
  1800 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1802 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1803 ;;Total ram usage:        0 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    3
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_main
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text7
  1814  0006D2                     __ptext7:
  1815                           	opt stack 0
  1816  0006D2                     _InitApp:
  1817                           	opt stack 27
  1818                           
  1819                           ;user.c: 35: PORTA = 0;
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;incstack = 0
  1823  0006D2  0E00               	movlw	0
  1824  0006D4  6E80               	movwf	3968,c	;volatile
  1825                           
  1826                           ;user.c: 36: LATA = 0;
  1827  0006D6  0E00               	movlw	0
  1828  0006D8  6E89               	movwf	3977,c	;volatile
  1829                           
  1830                           ;user.c: 37: PORTB = 0;
  1831  0006DA  0E00               	movlw	0
  1832  0006DC  6E81               	movwf	3969,c	;volatile
  1833                           
  1834                           ;user.c: 38: LATB = 0;
  1835  0006DE  0E00               	movlw	0
  1836  0006E0  6E8A               	movwf	3978,c	;volatile
  1837                           
  1838                           ;user.c: 39: PORTC = 0;
  1839  0006E2  0E00               	movlw	0
  1840  0006E4  6E82               	movwf	3970,c	;volatile
  1841                           
  1842                           ;user.c: 40: LATC = 0;
  1843  0006E6  0E00               	movlw	0
  1844  0006E8  6E8B               	movwf	3979,c	;volatile
  1845                           
  1846                           ;user.c: 42: ADCON1 = 0b1101;
  1847  0006EA  0E0D               	movlw	13
  1848  0006EC  6EC1               	movwf	4033,c	;volatile
  1849                           
  1850                           ;user.c: 43: TRISAbits.TRISA0 = 1;
  1851  0006EE  8092               	bsf	3986,0,c	;volatile
  1852                           
  1853                           ;user.c: 44: ADCON0bits.CHS = 0;
  1854  0006F0  94C2               	bcf	4034,2,c	;volatile
  1855  0006F2  96C2               	bcf	4034,3,c	;volatile
  1856  0006F4  98C2               	bcf	4034,4,c	;volatile
  1857  0006F6  9AC2               	bcf	4034,5,c	;volatile
  1858                           
  1859                           ;user.c: 45: ADCON2 = 0b10101100;
  1860  0006F8  0EAC               	movlw	172
  1861  0006FA  6EC0               	movwf	4032,c	;volatile
  1862                           
  1863                           ;user.c: 46: PIE1bits.ADIE = 1;
  1864  0006FC  8C9D               	bsf	3997,6,c	;volatile
  1865                           
  1866                           ;user.c: 47: PIR1bits.ADIF = 0;
  1867  0006FE  9C9E               	bcf	3998,6,c	;volatile
  1868                           
  1869                           ;user.c: 48: ADCON0bits.ADON = 1;
  1870  000700  80C2               	bsf	4034,0,c	;volatile
  1871                           
  1872                           ;user.c: 50: TRISAbits.RA2 = 0;
  1873  000702  9492               	bcf	3986,2,c	;volatile
  1874                           
  1875                           ;user.c: 51: TRISAbits.RA3 = 0;
  1876  000704  9692               	bcf	3986,3,c	;volatile
  1877                           
  1878                           ;user.c: 52: TRISAbits.RA4 = 0;
  1879  000706  9892               	bcf	3986,4,c	;volatile
  1880                           
  1881                           ;user.c: 53: TRISAbits.RA5 = 0;
  1882  000708  9A92               	bcf	3986,5,c	;volatile
  1883                           
  1884                           ;user.c: 54: TRISCbits.RC0 = 0;
  1885  00070A  9094               	bcf	3988,0,c	;volatile
  1886                           
  1887                           ;user.c: 55: TRISCbits.RC1 = 0;
  1888  00070C  9294               	bcf	3988,1,c	;volatile
  1889                           
  1890                           ;user.c: 56: TRISBbits.RB7 = 0;
  1891  00070E  9E93               	bcf	3987,7,c	;volatile
  1892                           
  1893                           ;user.c: 57: TRISBbits.RB6 = 0;
  1894  000710  9C93               	bcf	3987,6,c	;volatile
  1895                           
  1896                           ;user.c: 58: TRISCbits.RC2 = 0;
  1897  000712  9494               	bcf	3988,2,c	;volatile
  1898                           
  1899                           ;user.c: 59: TRISBbits.RB4 = 0;
  1900  000714  9893               	bcf	3987,4,c	;volatile
  1901                           
  1902                           ;user.c: 60: TRISBbits.RB5 = 0;
  1903  000716  9A93               	bcf	3987,5,c	;volatile
  1904                           
  1905                           ;user.c: 62: RCONbits.IPEN = 0;
  1906  000718  9ED0               	bcf	4048,7,c	;volatile
  1907                           
  1908                           ;user.c: 64: INTCONbits.GIE = 1;
  1909  00071A  8EF2               	bsf	intcon,7,c	;volatile
  1910                           
  1911                           ;user.c: 65: INTCONbits.PEIE = 1;
  1912  00071C  8CF2               	bsf	intcon,6,c	;volatile
  1913                           
  1914                           ;user.c: 66: INTCONbits.TMR0IE = 1;
  1915  00071E  8AF2               	bsf	intcon,5,c	;volatile
  1916                           
  1917                           ;user.c: 67: INTCONbits.TMR0IF = 0;
  1918  000720  94F2               	bcf	intcon,2,c	;volatile
  1919                           
  1920                           ;user.c: 68: INTCON2bits.TMR0IP = 1;
  1921  000722  84F1               	bsf	intcon2,2,c	;volatile
  1922                           
  1923                           ;user.c: 69: T0CONbits.T08BIT = 1;
  1924  000724  8CD5               	bsf	4053,6,c	;volatile
  1925                           
  1926                           ;user.c: 70: T0CONbits.T0CS = 0;
  1927  000726  9AD5               	bcf	4053,5,c	;volatile
  1928                           
  1929                           ;user.c: 71: T0CONbits.PSA = 0;
  1930  000728  96D5               	bcf	4053,3,c	;volatile
  1931                           
  1932                           ;user.c: 72: T0CONbits.T0PS = 0b101;
  1933  00072A  50D5               	movf	4053,w,c	;volatile
  1934  00072C  0BF8               	andlw	-8
  1935  00072E  0905               	iorlw	5
  1936  000730  6ED5               	movwf	4053,c	;volatile
  1937                           
  1938                           ;user.c: 73: T0CONbits.TMR0ON = 0;
  1939  000732  9ED5               	bcf	4053,7,c	;volatile
  1940                           
  1941                           ;user.c: 74: TMR0 = 0x6;
  1942  000734  0E00               	movlw	0
  1943  000736  6ED7               	movwf	4055,c	;volatile
  1944  000738  0E06               	movlw	6
  1945  00073A  6ED6               	movwf	4054,c	;volatile
  1946                           
  1947                           ;user.c: 76: PIE1bits.TMR1IE = 1;
  1948  00073C  809D               	bsf	3997,0,c	;volatile
  1949                           
  1950                           ;user.c: 77: PIR1bits.TMR1IF = 0;
  1951  00073E  909E               	bcf	3998,0,c	;volatile
  1952                           
  1953                           ;user.c: 78: IPR1bits.TMR1IP = 1;
  1954  000740  809F               	bsf	3999,0,c	;volatile
  1955                           
  1956                           ;user.c: 79: T1CONbits.TMR1CS = 0;
  1957  000742  92CD               	bcf	4045,1,c	;volatile
  1958                           
  1959                           ;user.c: 80: T1CONbits.T1CKPS = 0b00;
  1960  000744  0ECF               	movlw	-49
  1961  000746  16CD               	andwf	4045,f,c	;volatile
  1962                           
  1963                           ;user.c: 81: T1CONbits.TMR1ON = 1;
  1964  000748  80CD               	bsf	4045,0,c	;volatile
  1965                           
  1966                           ;user.c: 85: TRISBbits.RB1 = 1;
  1967  00074A  8293               	bsf	3987,1,c	;volatile
  1968                           
  1969                           ;user.c: 86: TRISBbits.RB2 = 1;
  1970  00074C  8493               	bsf	3987,2,c	;volatile
  1971                           
  1972                           ;user.c: 87: INTCON3bits.INT1IE = 1;
  1973  00074E  86F0               	bsf	intcon3,3,c	;volatile
  1974                           
  1975                           ;user.c: 88: INTCON3bits.INT2IE = 1;
  1976  000750  88F0               	bsf	intcon3,4,c	;volatile
  1977                           
  1978                           ;user.c: 89: INTCON3bits.INT1IF = 0;
  1979  000752  90F0               	bcf	intcon3,0,c	;volatile
  1980                           
  1981                           ;user.c: 90: INTCON3bits.INT2IF = 0;
  1982  000754  92F0               	bcf	intcon3,1,c	;volatile
  1983                           
  1984                           ;user.c: 91: INTCON2bits.INTEDG1 = 0;
  1985  000756  9AF1               	bcf	intcon2,5,c	;volatile
  1986                           
  1987                           ;user.c: 92: INTCON2bits.INTEDG2 = 0;
  1988  000758  98F1               	bcf	intcon2,4,c	;volatile
  1989                           
  1990                           ;user.c: 94: TRISCbits.RC6 = 0;
  1991  00075A  9C94               	bcf	3988,6,c	;volatile
  1992                           
  1993                           ;user.c: 95: TRISCbits.RC7 = 1;
  1994  00075C  8E94               	bsf	3988,7,c	;volatile
  1995                           
  1996                           ;user.c: 96: BRGH = 1;
  1997  00075E  84AC               	bsf	4012,2,c	;volatile
  1998                           
  1999                           ;user.c: 97: BRG16 = 1;
  2000  000760  86B8               	bsf	4024,3,c	;volatile
  2001                           
  2002                           ;user.c: 98: SPBRG = 207;
  2003  000762  0ECF               	movlw	207
  2004  000764  6EAF               	movwf	4015,c	;volatile
  2005                           
  2006                           ;user.c: 99: SPEN = 1;
  2007  000766  8EAB               	bsf	4011,7,c	;volatile
  2008                           
  2009                           ;user.c: 100: SYNC = 0;
  2010  000768  98AC               	bcf	4012,4,c	;volatile
  2011                           
  2012                           ;user.c: 101: TXEN = 1;
  2013  00076A  8AAC               	bsf	4012,5,c	;volatile
  2014                           
  2015                           ;user.c: 102: CREN = 1;
  2016  00076C  88AB               	bsf	4011,4,c	;volatile
  2017                           
  2018                           ;user.c: 103: TX9 = 0;
  2019  00076E  9CAC               	bcf	4012,6,c	;volatile
  2020                           
  2021                           ;user.c: 104: RX9 = 0;
  2022  000770  9CAB               	bcf	4011,6,c	;volatile
  2023                           
  2024                           ;user.c: 105: RCIE = 1;
  2025  000772  8A9D               	bsf	3997,5,c	;volatile
  2026                           
  2027                           ;user.c: 106: TXIE = 0;
  2028  000774  989D               	bcf	3997,4,c	;volatile
  2029                           
  2030                           ;user.c: 108: PR2 = 99;
  2031  000776  0E63               	movlw	99
  2032  000778  6ECB               	movwf	4043,c	;volatile
  2033                           
  2034                           ;user.c: 109: CCP1CONbits.DC1B = 0;
  2035  00077A  0ECF               	movlw	-49
  2036  00077C  16BD               	andwf	4029,f,c	;volatile
  2037                           
  2038                           ;user.c: 110: T2CONbits.T2CKPS = 0b00;
  2039  00077E  0EFC               	movlw	-4
  2040  000780  16CA               	andwf	4042,f,c	;volatile
  2041                           
  2042                           ;user.c: 111: T2CONbits.TMR2ON = 1;
  2043  000782  84CA               	bsf	4042,2,c	;volatile
  2044                           
  2045                           ;user.c: 112: CCP1CONbits.CCP1M = 0b1111;
  2046  000784  80BD               	bsf	4029,0,c	;volatile
  2047  000786  82BD               	bsf	4029,1,c	;volatile
  2048  000788  84BD               	bsf	4029,2,c	;volatile
  2049  00078A  86BD               	bsf	4029,3,c	;volatile
  2050  00078C  0012               	return		;funcret
  2051  00078E                     __end_of_InitApp:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           intcon	equ	0xFF2
  2060                           intcon2	equ	0xFF1
  2061                           intcon3	equ	0xFF0
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           postdec1	equ	0xFE5
  2065                           fsr1l	equ	0xFE1
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _ConfigureOscillator *****************
  2069 ;; Defined at:
  2070 ;;		line 24 in file "system.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2084 ;;      Params:         0       0       0       0       0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    3
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text8
  2099  00092E                     __ptext8:
  2100                           	opt stack 0
  2101  00092E                     _ConfigureOscillator:
  2102                           	opt stack 27
  2103                           
  2104                           ;system.c: 27: OSCCONbits.IRCF = 0b111;
  2105                           
  2106                           ;incstack = 0
  2107  00092E  88D3               	bsf	4051,4,c	;volatile
  2108  000930  8AD3               	bsf	4051,5,c	;volatile
  2109  000932  8CD3               	bsf	4051,6,c	;volatile
  2110                           
  2111                           ;system.c: 28: OSCCONbits.SCS = 0b11;
  2112  000934  0E03               	movlw	3
  2113  000936  12D3               	iorwf	4051,f,c	;volatile
  2114  000938  0012               	return		;funcret
  2115  00093A                     __end_of_ConfigureOscillator:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           intcon2	equ	0xFF1
  2125                           intcon3	equ	0xFF0
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           postdec1	equ	0xFE5
  2129                           fsr1l	equ	0xFE1
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _high_isr *****************
  2133 ;; Defined at:
  2134 ;;		line 70 in file "interrupts.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2148 ;;      Params:         0       0       0       0       0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2150 ;;      Temps:         20       0       0       0       0       0       0       0       0
  2151 ;;      Totals:        20       0       0       0       0       0       0       0       0
  2152 ;;Total ram usage:       20 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    2
  2155 ;; This function calls:
  2156 ;;		_finish
  2157 ;;		_mot_3_step_count
  2158 ;; This function is called by:
  2159 ;;		Interrupt level 2
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	intcode
  2164  000008                     __pintcode:
  2165                           	opt stack 0
  2166  000008                     _high_isr:
  2167                           	opt stack 27
  2168                           
  2169                           ;incstack = 0
  2170  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2171  00000A  ED00  F002         	call	int_func,f	;refresh shadow registers
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           intcon	equ	0xFF2
  2179                           intcon2	equ	0xFF1
  2180                           intcon3	equ	0xFF0
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           postdec1	equ	0xFE5
  2184                           fsr1l	equ	0xFE1
  2185                           status	equ	0xFD8
  2186                           
  2187                           	psect	intcode_body
  2188  000400                     __pintcode_body:
  2189                           	opt stack 27
  2190  000400                     int_func:
  2191                           	opt stack 27
  2192  000400  0006               	pop		; remove dummy address from shadow register refresh
  2193  000402  CFFA F036          	movff	pclath,??_high_isr+2
  2194  000406  CFFB F037          	movff	pclatu,??_high_isr+3
  2195  00040A  CFE9 F038          	movff	fsr0l,??_high_isr+4
  2196  00040E  CFEA F039          	movff	fsr0h,??_high_isr+5
  2197  000412  CFE1 F03A          	movff	fsr1l,??_high_isr+6
  2198  000416  CFE2 F03B          	movff	fsr1h,??_high_isr+7
  2199  00041A  CFD9 F03C          	movff	fsr2l,??_high_isr+8
  2200  00041E  CFDA F03D          	movff	fsr2h,??_high_isr+9
  2201  000422  CFF3 F03E          	movff	prodl,??_high_isr+10
  2202  000426  CFF4 F03F          	movff	prodh,??_high_isr+11
  2203  00042A  CFF6 F040          	movff	tblptrl,??_high_isr+12
  2204  00042E  CFF7 F041          	movff	tblptrh,??_high_isr+13
  2205  000432  CFF8 F042          	movff	tblptru,??_high_isr+14
  2206  000436  CFF5 F043          	movff	tablat,??_high_isr+15
  2207  00043A  C054  F044         	movff	btemp,??_high_isr+16
  2208  00043E  C055  F045         	movff	btemp+1,??_high_isr+17
  2209  000442  C056  F046         	movff	btemp+2,??_high_isr+18
  2210  000446  C057  F047         	movff	btemp+3,??_high_isr+19
  2211                           
  2212                           ;interrupts.c: 71: if (INTCONbits.TMR0IF) {
  2213  00044A  A4F2               	btfss	intcon,2,c	;volatile
  2214  00044C  D085               	goto	i2l97
  2215                           
  2216                           ;interrupts.c: 73: INTCONbits.TMR0IF = 0;
  2217  00044E  94F2               	bcf	intcon,2,c	;volatile
  2218                           
  2219                           ;interrupts.c: 74: TMR0 = 250;
  2220  000450  0E00               	movlw	0
  2221  000452  6ED7               	movwf	4055,c	;volatile
  2222  000454  0EFA               	movlw	250
  2223  000456  6ED6               	movwf	4054,c	;volatile
  2224                           
  2225                           ;interrupts.c: 75: MOT_1_count++;
  2226  000458  4A0D               	infsnz	_MOT_1_count,f,c
  2227  00045A  2A0E               	incf	_MOT_1_count+1,f,c
  2228                           
  2229                           ;interrupts.c: 76: MOT_2_count++;
  2230  00045C  0100               	movlb	0	; () banked
  2231  00045E  4B81               	infsnz	_MOT_2_count& (0+255),f,b
  2232  000460  2B82               	incf	(_MOT_2_count+1)& (0+255),f,b
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;interrupts.c: 77: MOT_3_count++;
  2236  000462  4A0B               	infsnz	_MOT_3_count,f,c
  2237  000464  2A0C               	incf	_MOT_3_count+1,f,c
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;interrupts.c: 78: MOT_4_count++;
  2241  000466  4B7F               	infsnz	_MOT_4_count& (0+255),f,b
  2242  000468  2B80               	incf	(_MOT_4_count+1)& (0+255),f,b
  2243                           
  2244                           ;interrupts.c: 80: if (MOT_1) {
  2245  00046A  5027               	movf	_MOT_1,w,c
  2246  00046C  B4D8               	btfsc	status,2,c
  2247  00046E  D03B               	goto	i2l101
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;interrupts.c: 82: if (MOT_1_count == count_1) {
  2251  000470  504C               	movf	_count_1,w,c
  2252  000472  180D               	xorwf	_MOT_1_count,w,c
  2253  000474  E138               	bnz	i2l1642
  2254  000476  504D               	movf	_count_1+1,w,c
  2255  000478  180E               	xorwf	_MOT_1_count+1,w,c
  2256  00047A  A4D8               	btfss	status,2,c
  2257  00047C  D034               	goto	i2l101
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;interrupts.c: 83: MOT_1_count = 0;
  2261  00047E  0E00               	movlw	0
  2262  000480  6E0E               	movwf	_MOT_1_count+1,c
  2263  000482  0E00               	movlw	0
  2264  000484  6E0D               	movwf	_MOT_1_count,c
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;interrupts.c: 84: LATAbits.LA3 = !PORTAbits.RA3;
  2268  000486  B680               	btfsc	3968,3,c	;volatile
  2269  000488  D003               	goto	i2u93_40
  2270  00048A  6A34               	clrf	??_high_isr& (0+255),c
  2271  00048C  2A34               	incf	??_high_isr& (0+255),f,c
  2272  00048E  D001               	goto	i2u94_48
  2273  000490                     i2u93_40:
  2274  000490  6A34               	clrf	??_high_isr& (0+255),c
  2275  000492                     i2u94_48:
  2276  000492  4634               	rlncf	??_high_isr,f,c
  2277  000494  4634               	rlncf	??_high_isr,f,c
  2278  000496  4634               	rlncf	??_high_isr,f,c
  2279  000498  5089               	movf	3977,w,c	;volatile
  2280  00049A  1834               	xorwf	??_high_isr,w,c
  2281  00049C  0BF7               	andlw	-9
  2282  00049E  1834               	xorwf	??_high_isr,w,c
  2283  0004A0  6E89               	movwf	3977,c	;volatile
  2284                           
  2285                           ;interrupts.c: 85: mot_1_steps++;
  2286  0004A2  4A09               	infsnz	_mot_1_steps,f,c
  2287  0004A4  2A0A               	incf	_mot_1_steps+1,f,c
  2288                           
  2289                           ;interrupts.c: 86: if (mot_1_steps == 200) {
  2290  0004A6  0EC8               	movlw	200
  2291  0004A8  1809               	xorwf	_mot_1_steps,w,c
  2292  0004AA  100A               	iorwf	_mot_1_steps+1,w,c
  2293  0004AC  A4D8               	btfss	status,2,c
  2294  0004AE  D006               	goto	i2l100
  2295                           
  2296                           ;interrupts.c: 88: mot_1_steps = 0;
  2297  0004B0  0E00               	movlw	0
  2298  0004B2  6E0A               	movwf	_mot_1_steps+1,c
  2299  0004B4  0E00               	movlw	0
  2300  0004B6  6E09               	movwf	_mot_1_steps,c
  2301                           
  2302                           ;interrupts.c: 89: turns_count++;
  2303  0004B8  4A03               	infsnz	_turns_count,f,c
  2304  0004BA  2A04               	incf	_turns_count+1,f,c
  2305  0004BC                     i2l100:
  2306                           
  2307                           ;interrupts.c: 90: }
  2308                           ;interrupts.c: 91: if (turns_count == 8*turns) {
  2309  0004BC  C050  F034         	movff	_turns,??_high_isr
  2310  0004C0  C051  F035         	movff	_turns+1,??_high_isr+1
  2311  0004C4  90D8               	bcf	status,0,c
  2312  0004C6  3634               	rlcf	??_high_isr,f,c
  2313  0004C8  3635               	rlcf	??_high_isr+1,f,c
  2314  0004CA  90D8               	bcf	status,0,c
  2315  0004CC  3634               	rlcf	??_high_isr,f,c
  2316  0004CE  3635               	rlcf	??_high_isr+1,f,c
  2317  0004D0  90D8               	bcf	status,0,c
  2318  0004D2  3634               	rlcf	??_high_isr,f,c
  2319  0004D4  3635               	rlcf	??_high_isr+1,f,c
  2320  0004D6  5003               	movf	_turns_count,w,c
  2321  0004D8  1834               	xorwf	??_high_isr,w,c
  2322  0004DA  E105               	bnz	i2l1642
  2323  0004DC  5004               	movf	_turns_count+1,w,c
  2324  0004DE  1835               	xorwf	??_high_isr+1,w,c
  2325  0004E0  B4D8               	btfsc	status,2,c
  2326                           
  2327                           ;interrupts.c: 93: finish();
  2328  0004E2  EC5C  F004         	call	_finish	;wreg free
  2329  0004E6                     i2l101:
  2330  0004E6                     i2l1642:
  2331                           
  2332                           ;interrupts.c: 94: }
  2333                           ;interrupts.c: 95: }
  2334                           ;interrupts.c: 96: }
  2335                           ;interrupts.c: 98: if (MOT_3) {
  2336  0004E6  5026               	movf	_MOT_3,w,c
  2337  0004E8  B4D8               	btfsc	status,2,c
  2338  0004EA  D0CD               	goto	i2l127
  2339                           
  2340                           ;interrupts.c: 100: if (MOT_3_count == count_3) {
  2341  0004EC  504A               	movf	_count_3,w,c
  2342  0004EE  180B               	xorwf	_MOT_3_count,w,c
  2343  0004F0  E103               	bnz	i2u98_41
  2344  0004F2  504B               	movf	_count_3+1,w,c
  2345  0004F4  180C               	xorwf	_MOT_3_count+1,w,c
  2346  0004F6  A4D8               	btfss	status,2,c
  2347  0004F8                     i2u98_41:
  2348  0004F8  D0C6               	goto	i2l127
  2349                           
  2350                           ;interrupts.c: 101: MOT_3_count = 0;
  2351  0004FA  0E00               	movlw	0
  2352  0004FC  6E0C               	movwf	_MOT_3_count+1,c
  2353  0004FE  0E00               	movlw	0
  2354  000500  6E0B               	movwf	_MOT_3_count,c
  2355                           
  2356                           ;interrupts.c: 102: LATCbits.LC1 = !PORTCbits.RC1;
  2357  000502  B282               	btfsc	3970,1,c	;volatile
  2358  000504  D003               	goto	i2u99_40
  2359  000506  6A34               	clrf	??_high_isr& (0+255),c
  2360  000508  2A34               	incf	??_high_isr& (0+255),f,c
  2361  00050A  D001               	goto	i2u100_48
  2362  00050C                     i2u99_40:
  2363  00050C  6A34               	clrf	??_high_isr& (0+255),c
  2364  00050E                     i2u100_48:
  2365  00050E  4634               	rlncf	??_high_isr,f,c
  2366  000510  508B               	movf	3979,w,c	;volatile
  2367  000512  1834               	xorwf	??_high_isr,w,c
  2368  000514  0BFD               	andlw	-3
  2369  000516  1834               	xorwf	??_high_isr,w,c
  2370  000518  6E8B               	movwf	3979,c	;volatile
  2371                           
  2372                           ;interrupts.c: 103: mot_3_steps++;
  2373  00051A  4A07               	infsnz	_mot_3_steps,f,c
  2374  00051C  2A08               	incf	_mot_3_steps+1,f,c
  2375                           
  2376                           ;interrupts.c: 105: if (mot_3_steps == mot_3_step_count(length, 1)) {
  2377  00051E  C04E  F02E         	movff	_length,mot_3_step_count@l
  2378  000522  C04F  F02F         	movff	_length+1,mot_3_step_count@l+1
  2379  000526  0E00               	movlw	0
  2380  000528  6E31               	movwf	mot_3_step_count@ms+1,c
  2381  00052A  0E01               	movlw	1
  2382  00052C  6E30               	movwf	mot_3_step_count@ms,c
  2383  00052E  EC4A  F004         	call	_mot_3_step_count	;wreg free
  2384  000532  5007               	movf	_mot_3_steps,w,c
  2385  000534  182E               	xorwf	?_mot_3_step_count,w,c
  2386  000536  E103               	bnz	i2u101_41
  2387  000538  5008               	movf	_mot_3_steps+1,w,c
  2388  00053A  182F               	xorwf	?_mot_3_step_count+1,w,c
  2389  00053C  A4D8               	btfss	status,2,c
  2390  00053E                     i2u101_41:
  2391  00053E  D0A3               	goto	i2l127
  2392                           
  2393                           ;interrupts.c: 107: DIR_3 = !DIR_3;
  2394  000540  5025               	movf	_DIR_3,w,c
  2395  000542  A4D8               	btfss	status,2,c
  2396  000544  D002               	goto	i2u102_40
  2397  000546  0E01               	movlw	1
  2398  000548  D001               	goto	i2u103_40
  2399  00054A                     i2u102_40:
  2400  00054A  0E00               	movlw	0
  2401  00054C                     i2u103_40:
  2402  00054C  6E25               	movwf	_DIR_3,c
  2403                           
  2404                           ;interrupts.c: 108: mot_3_steps = 0;
  2405  00054E  0E00               	movlw	0
  2406  000550  6E08               	movwf	_mot_3_steps+1,c
  2407  000552  0E00               	movlw	0
  2408  000554  6E07               	movwf	_mot_3_steps,c
  2409                           
  2410                           ;interrupts.c: 109: }
  2411                           ;interrupts.c: 110: }
  2412                           ;interrupts.c: 111: }
  2413                           ;interrupts.c: 121: } else if (PIR1bits.TMR1IF) {
  2414  000556  D097               	goto	i2l127
  2415  000558                     i2l97:
  2416  000558  A09E               	btfss	3998,0,c	;volatile
  2417  00055A  D04F               	goto	i2l106
  2418                           
  2419                           ;interrupts.c: 123: PIR1bits.TMR1IF = 0;
  2420  00055C  909E               	bcf	3998,0,c	;volatile
  2421                           
  2422                           ;interrupts.c: 124: TMR1 = 0xD8F0;
  2423  00055E  0ED8               	movlw	216
  2424  000560  6ECF               	movwf	4047,c	;volatile
  2425  000562  0EF0               	movlw	240
  2426  000564  6ECE               	movwf	4046,c	;volatile
  2427                           
  2428                           ;interrupts.c: 125: if (MOT_2) {
  2429  000566  5024               	movf	_MOT_2,w,c
  2430  000568  B4D8               	btfsc	status,2,c
  2431  00056A  D00D               	goto	i2l107
  2432                           
  2433                           ;interrupts.c: 127: LATAbits.LA5 = !PORTAbits.RA5;
  2434  00056C  BA80               	btfsc	3968,5,c	;volatile
  2435  00056E  D003               	goto	i2u106_40
  2436  000570  6A34               	clrf	??_high_isr& (0+255),c
  2437  000572  2A34               	incf	??_high_isr& (0+255),f,c
  2438  000574  D001               	goto	i2u107_48
  2439  000576                     i2u106_40:
  2440  000576  6A34               	clrf	??_high_isr& (0+255),c
  2441  000578                     i2u107_48:
  2442  000578  3A34               	swapf	??_high_isr,f,c
  2443  00057A  4634               	rlncf	??_high_isr,f,c
  2444  00057C  5089               	movf	3977,w,c	;volatile
  2445  00057E  1834               	xorwf	??_high_isr,w,c
  2446  000580  0BDF               	andlw	-33
  2447  000582  1834               	xorwf	??_high_isr,w,c
  2448  000584  6E89               	movwf	3977,c	;volatile
  2449  000586                     i2l107:
  2450                           
  2451                           ;interrupts.c: 128: }
  2452                           ;interrupts.c: 130: if (MOT_3) {
  2453  000586  5026               	movf	_MOT_3,w,c
  2454  000588  B4D8               	btfsc	status,2,c
  2455  00058A  D00C               	goto	i2l108
  2456                           
  2457                           ;interrupts.c: 132: LATCbits.LC1 = !PORTCbits.RC1;
  2458  00058C  B282               	btfsc	3970,1,c	;volatile
  2459  00058E  D003               	goto	i2u109_40
  2460  000590  6A34               	clrf	??_high_isr& (0+255),c
  2461  000592  2A34               	incf	??_high_isr& (0+255),f,c
  2462  000594  D001               	goto	i2u110_48
  2463  000596                     i2u109_40:
  2464  000596  6A34               	clrf	??_high_isr& (0+255),c
  2465  000598                     i2u110_48:
  2466  000598  4634               	rlncf	??_high_isr,f,c
  2467  00059A  508B               	movf	3979,w,c	;volatile
  2468  00059C  1834               	xorwf	??_high_isr,w,c
  2469  00059E  0BFD               	andlw	-3
  2470  0005A0  1834               	xorwf	??_high_isr,w,c
  2471  0005A2  6E8B               	movwf	3979,c	;volatile
  2472  0005A4                     i2l108:
  2473                           
  2474                           ;interrupts.c: 133: }
  2475                           ;interrupts.c: 135: if (MOT_4) {
  2476  0005A4  5053               	movf	_MOT_4,w,c
  2477  0005A6  B4D8               	btfsc	status,2,c
  2478  0005A8  D06E               	goto	i2l127
  2479                           
  2480                           ;interrupts.c: 137: if(move_4) {
  2481  0005AA  5023               	movf	_move_4,w,c
  2482  0005AC  B4D8               	btfsc	status,2,c
  2483  0005AE  D06B               	goto	i2l127
  2484                           
  2485                           ;interrupts.c: 138: LATBbits.LB6 = !PORTBbits.RB6;
  2486  0005B0  BC81               	btfsc	3969,6,c	;volatile
  2487  0005B2  D003               	goto	i2u113_40
  2488  0005B4  6A34               	clrf	??_high_isr& (0+255),c
  2489  0005B6  2A34               	incf	??_high_isr& (0+255),f,c
  2490  0005B8  D001               	goto	i2u114_48
  2491  0005BA                     i2u113_40:
  2492  0005BA  6A34               	clrf	??_high_isr& (0+255),c
  2493  0005BC                     i2u114_48:
  2494  0005BC  3A34               	swapf	??_high_isr,f,c
  2495  0005BE  4634               	rlncf	??_high_isr,f,c
  2496  0005C0  4634               	rlncf	??_high_isr,f,c
  2497  0005C2  508A               	movf	3978,w,c	;volatile
  2498  0005C4  1834               	xorwf	??_high_isr,w,c
  2499  0005C6  0BBF               	andlw	-65
  2500  0005C8  1834               	xorwf	??_high_isr,w,c
  2501  0005CA  6E8A               	movwf	3978,c	;volatile
  2502                           
  2503                           ;interrupts.c: 140: if (mot_4_steps == 2*steps_4) {
  2504  0005CC  C017  F034         	movff	_steps_4,??_high_isr
  2505  0005D0  C018  F035         	movff	_steps_4+1,??_high_isr+1
  2506  0005D4  90D8               	bcf	status,0,c
  2507  0005D6  3634               	rlcf	??_high_isr,f,c
  2508  0005D8  3635               	rlcf	??_high_isr+1,f,c
  2509  0005DA  5005               	movf	_mot_4_steps,w,c
  2510  0005DC  1834               	xorwf	??_high_isr,w,c
  2511  0005DE  E10A               	bnz	i2l1674
  2512  0005E0  5006               	movf	_mot_4_steps+1,w,c
  2513  0005E2  1835               	xorwf	??_high_isr+1,w,c
  2514  0005E4  A4D8               	btfss	status,2,c
  2515  0005E6  D006               	goto	i2l111
  2516                           
  2517                           ;interrupts.c: 141: move_4 = 0;
  2518  0005E8  0E00               	movlw	0
  2519  0005EA  6E23               	movwf	_move_4,c
  2520                           
  2521                           ;interrupts.c: 142: mot_4_steps = 0;
  2522  0005EC  0E00               	movlw	0
  2523  0005EE  6E06               	movwf	_mot_4_steps+1,c
  2524  0005F0  0E00               	movlw	0
  2525  0005F2  6E05               	movwf	_mot_4_steps,c
  2526  0005F4                     i2l111:
  2527  0005F4                     i2l1674:
  2528                           
  2529                           ;interrupts.c: 143: }
  2530                           ;interrupts.c: 144: mot_4_steps++;
  2531  0005F4  4A05               	infsnz	_mot_4_steps,f,c
  2532  0005F6  2A06               	incf	_mot_4_steps+1,f,c
  2533                           
  2534                           ;interrupts.c: 145: }
  2535                           ;interrupts.c: 146: }
  2536                           ;interrupts.c: 153: } else if (PIR1bits.RCIF) {
  2537  0005F8  D046               	goto	i2l127
  2538  0005FA                     i2l106:
  2539  0005FA  AA9E               	btfss	3998,5,c	;volatile
  2540  0005FC  D01A               	goto	i2l113
  2541                           
  2542                           ;interrupts.c: 155: PIR1bits.RCIF = 0;
  2543  0005FE  9A9E               	bcf	3998,5,c	;volatile
  2544                           
  2545                           ;interrupts.c: 156: palabra[n] = RCREG;
  2546  000600  0E60               	movlw	low _palabra
  2547  000602  2413               	addwf	_n,w,c
  2548  000604  6ED9               	movwf	fsr2l,c
  2549  000606  0E00               	movlw	high _palabra
  2550  000608  2014               	addwfc	_n+1,w,c
  2551  00060A  6EDA               	movwf	fsr2h,c
  2552  00060C  CFAE FFDF          	movff	4014,indf2	;volatile
  2553                           
  2554                           ;interrupts.c: 157: n++;
  2555  000610  4A13               	infsnz	_n,f,c
  2556  000612  2A14               	incf	_n+1,f,c
  2557                           
  2558                           ;interrupts.c: 158: if (RCREG == '\n') {
  2559  000614  0E0A               	movlw	10
  2560  000616  18AE               	xorwf	4014,w,c	;volatile
  2561  000618  A4D8               	btfss	status,2,c
  2562  00061A  D035               	goto	i2l127
  2563                           
  2564                           ;interrupts.c: 159: TXREG = palabra[0];
  2565  00061C  C060  FFAD         	movff	_palabra,4013	;volatile
  2566  000620  A89E               	btfss	3998,4,c	;volatile
  2567  000622  D7FE               	goto	i2l116
  2568                           
  2569                           ;interrupts.c: 161: recibi = 1;
  2570  000624  0E01               	movlw	1
  2571  000626  6E21               	movwf	_recibi,c
  2572                           
  2573                           ;interrupts.c: 162: n = 0;
  2574  000628  0E00               	movlw	0
  2575  00062A  6E14               	movwf	_n+1,c
  2576  00062C  0E00               	movlw	0
  2577  00062E  6E13               	movwf	_n,c
  2578                           
  2579                           ;interrupts.c: 163: }
  2580                           ;interrupts.c: 164: } else if (PIR1bits.ADIF) {
  2581  000630  D02A               	goto	i2l127
  2582  000632                     i2l113:
  2583  000632  AC9E               	btfss	3998,6,c	;volatile
  2584  000634  D00A               	goto	i2l119
  2585                           
  2586                           ;interrupts.c: 166: PIR1bits.ADIF = 0;
  2587  000636  9C9E               	bcf	3998,6,c	;volatile
  2588                           
  2589                           ;interrupts.c: 172: ADC_previous_value = ADC_value_press;
  2590  000638  C00F  F015         	movff	_ADC_value_press,_ADC_previous_value
  2591  00063C  C010  F016         	movff	_ADC_value_press+1,_ADC_previous_value+1
  2592                           
  2593                           ;interrupts.c: 173: ADC_value_press = ADRES;
  2594  000640  CFC3 F00F          	movff	4035,_ADC_value_press	;volatile
  2595  000644  CFC4 F010          	movff	4036,_ADC_value_press+1	;volatile
  2596                           
  2597                           ;interrupts.c: 175: } else if (INTCON3bits.INT1IF) {
  2598  000648  D01E               	goto	i2l127
  2599  00064A                     i2l119:
  2600  00064A  A0F0               	btfss	intcon3,0,c	;volatile
  2601  00064C  D00C               	goto	i2l121
  2602                           
  2603                           ;interrupts.c: 177: INTCON3bits.INT1IF = 0;
  2604  00064E  90F0               	bcf	intcon3,0,c	;volatile
  2605                           
  2606                           ;interrupts.c: 179: if (winding) {
  2607  000650  5022               	movf	_winding,w,c
  2608  000652  B4D8               	btfsc	status,2,c
  2609  000654  D003               	goto	i2l122
  2610                           
  2611                           ;interrupts.c: 181: finish();
  2612  000656  EC5C  F004         	call	_finish	;wreg free
  2613                           
  2614                           ;interrupts.c: 186: } else {
  2615  00065A  D015               	goto	i2l127
  2616  00065C                     i2l122:
  2617                           
  2618                           ;interrupts.c: 188: DIR_3 = !DIR_3;
  2619  00065C  5025               	movf	_DIR_3,w,c
  2620  00065E  A4D8               	btfss	status,2,c
  2621  000660  D010               	goto	i2u126_40
  2622  000662  0E01               	movlw	1
  2623  000664  D00F               	goto	i2u127_40
  2624  000666                     i2l121:
  2625  000666  A2F0               	btfss	intcon3,1,c	;volatile
  2626  000668  D00E               	goto	i2l127
  2627                           
  2628                           ;interrupts.c: 193: INTCON3bits.INT2IF = 0;
  2629  00066A  92F0               	bcf	intcon3,1,c	;volatile
  2630                           
  2631                           ;interrupts.c: 195: if (winding) {
  2632  00066C  5022               	movf	_winding,w,c
  2633  00066E  B4D8               	btfsc	status,2,c
  2634  000670  D003               	goto	i2l126
  2635                           
  2636                           ;interrupts.c: 197: finish();
  2637  000672  EC5C  F004         	call	_finish	;wreg free
  2638                           
  2639                           ;interrupts.c: 202: } else {
  2640  000676  D007               	goto	i2l127
  2641  000678                     i2l126:
  2642                           
  2643                           ;interrupts.c: 204: DIR_3 = !DIR_3;
  2644  000678  5025               	movf	_DIR_3,w,c
  2645  00067A  A4D8               	btfss	status,2,c
  2646  00067C  D002               	goto	i2u126_40
  2647  00067E  0E01               	movlw	1
  2648  000680  D001               	goto	i2u127_40
  2649  000682                     i2u126_40:
  2650  000682  0E00               	movlw	0
  2651  000684                     i2u127_40:
  2652  000684  6E25               	movwf	_DIR_3,c
  2653  000686                     i2l127:
  2654  000686  C047  F057         	movff	??_high_isr+19,btemp+3
  2655  00068A  C046  F056         	movff	??_high_isr+18,btemp+2
  2656  00068E  C045  F055         	movff	??_high_isr+17,btemp+1
  2657  000692  C044  F054         	movff	??_high_isr+16,btemp
  2658  000696  C043  FFF5         	movff	??_high_isr+15,tablat
  2659  00069A  C042  FFF8         	movff	??_high_isr+14,tblptru
  2660  00069E  C041  FFF7         	movff	??_high_isr+13,tblptrh
  2661  0006A2  C040  FFF6         	movff	??_high_isr+12,tblptrl
  2662  0006A6  C03F  FFF4         	movff	??_high_isr+11,prodh
  2663  0006AA  C03E  FFF3         	movff	??_high_isr+10,prodl
  2664  0006AE  C03D  FFDA         	movff	??_high_isr+9,fsr2h
  2665  0006B2  C03C  FFD9         	movff	??_high_isr+8,fsr2l
  2666  0006B6  C03B  FFE2         	movff	??_high_isr+7,fsr1h
  2667  0006BA  C03A  FFE1         	movff	??_high_isr+6,fsr1l
  2668  0006BE  C039  FFEA         	movff	??_high_isr+5,fsr0h
  2669  0006C2  C038  FFE9         	movff	??_high_isr+4,fsr0l
  2670  0006C6  C037  FFFB         	movff	??_high_isr+3,pclatu
  2671  0006CA  C036  FFFA         	movff	??_high_isr+2,pclath
  2672  0006CE  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2673  0006D0  0011               	retfie		f
  2674  0006D2                     __end_of_high_isr:
  2675                           	opt stack 0
  2676                           pclatu	equ	0xFFB
  2677                           pclath	equ	0xFFA
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           intcon	equ	0xFF2
  2685                           intcon2	equ	0xFF1
  2686                           intcon3	equ	0xFF0
  2687                           postinc0	equ	0xFEE
  2688                           fsr0h	equ	0xFEA
  2689                           fsr0l	equ	0xFE9
  2690                           wreg	equ	0xFE8
  2691                           postdec1	equ	0xFE5
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _mot_3_step_count *****************
  2700 ;; Defined at:
  2701 ;;		line 240 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  l               2    6[COMRAM] unsigned int 
  2704 ;;  ms              2    8[COMRAM] unsigned int 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  2    6[COMRAM] unsigned int 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2716 ;;      Params:         4       0       0       0       0       0       0       0       0
  2717 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2718 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2719 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2720 ;;Total ram usage:        6 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    1
  2723 ;; This function calls:
  2724 ;;		i2___wmul
  2725 ;; This function is called by:
  2726 ;;		_high_isr
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text10
  2731  000894                     __ptext10:
  2732                           	opt stack 0
  2733  000894                     _mot_3_step_count:
  2734                           	opt stack 27
  2735                           
  2736                           ;main.c: 242: return (ms * l) / 2;
  2737                           
  2738                           ;incstack = 0
  2739  000894  C030  F028         	movff	mot_3_step_count@ms,i2___wmul@multiplier
  2740  000898  C031  F029         	movff	mot_3_step_count@ms+1,i2___wmul@multiplier+1
  2741  00089C  C02E  F02A         	movff	mot_3_step_count@l,i2___wmul@multiplicand
  2742  0008A0  C02F  F02B         	movff	mot_3_step_count@l+1,i2___wmul@multiplicand+1
  2743  0008A4  EC37  F004         	call	i2___wmul	;wreg free
  2744  0008A8  90D8               	bcf	status,0,c
  2745  0008AA  3029               	rrcf	?i2___wmul+1,w,c
  2746  0008AC  6E32               	movwf	??_mot_3_step_count& (0+255),c
  2747  0008AE  3028               	rrcf	?i2___wmul,w,c
  2748  0008B0  6E2E               	movwf	?_mot_3_step_count,c
  2749  0008B2  C032  F02F         	movff	??_mot_3_step_count,?_mot_3_step_count+1
  2750  0008B6  0012               	return	
  2751  0008B8                     __end_of_mot_3_step_count:
  2752                           	opt stack 0
  2753                           pclatu	equ	0xFFB
  2754                           pclath	equ	0xFFA
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           prodh	equ	0xFF4
  2760                           prodl	equ	0xFF3
  2761                           intcon	equ	0xFF2
  2762                           intcon2	equ	0xFF1
  2763                           intcon3	equ	0xFF0
  2764                           postinc0	equ	0xFEE
  2765                           fsr0h	equ	0xFEA
  2766                           fsr0l	equ	0xFE9
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1h	equ	0xFE2
  2770                           fsr1l	equ	0xFE1
  2771                           indf2	equ	0xFDF
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function i2___wmul *****************
  2777 ;; Defined at:
  2778 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  multiplier      2    0[COMRAM] unsigned int 
  2781 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  __wmul          2    4[COMRAM] unsigned int 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  2    0[COMRAM] unsigned int 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0, prodl, prodh
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2793 ;;      Params:         4       0       0       0       0       0       0       0       0
  2794 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2796 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2797 ;;Total ram usage:        6 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_mot_3_step_count
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text11
  2807  00086E                     __ptext11:
  2808                           	opt stack 0
  2809  00086E                     i2___wmul:
  2810                           	opt stack 27
  2811                           
  2812                           ;incstack = 0
  2813  00086E  5028               	movf	i2___wmul@multiplier,w,c
  2814  000870  022A               	mulwf	i2___wmul@multiplicand,c
  2815  000872  CFF3 F02C          	movff	prodl,i2___wmul@product
  2816  000876  CFF4 F02D          	movff	prodh,i2___wmul@product+1
  2817  00087A  5028               	movf	i2___wmul@multiplier,w,c
  2818  00087C  022B               	mulwf	i2___wmul@multiplicand+1,c
  2819  00087E  50F3               	movf	prodl,w,c
  2820  000880  262D               	addwf	i2___wmul@product+1,f,c
  2821  000882  5029               	movf	i2___wmul@multiplier+1,w,c
  2822  000884  022A               	mulwf	i2___wmul@multiplicand,c
  2823  000886  50F3               	movf	prodl,w,c
  2824  000888  262D               	addwf	i2___wmul@product+1,f,c
  2825  00088A  C02C  F028         	movff	i2___wmul@product,?i2___wmul
  2826  00088E  C02D  F029         	movff	i2___wmul@product+1,?i2___wmul+1
  2827  000892  0012               	return	
  2828  000894                     __end_ofi2___wmul:
  2829                           	opt stack 0
  2830                           pclatu	equ	0xFFB
  2831                           pclath	equ	0xFFA
  2832                           tblptru	equ	0xFF8
  2833                           tblptrh	equ	0xFF7
  2834                           tblptrl	equ	0xFF6
  2835                           tablat	equ	0xFF5
  2836                           prodh	equ	0xFF4
  2837                           prodl	equ	0xFF3
  2838                           intcon	equ	0xFF2
  2839                           intcon2	equ	0xFF1
  2840                           intcon3	equ	0xFF0
  2841                           postinc0	equ	0xFEE
  2842                           fsr0h	equ	0xFEA
  2843                           fsr0l	equ	0xFE9
  2844                           wreg	equ	0xFE8
  2845                           postdec1	equ	0xFE5
  2846                           fsr1h	equ	0xFE2
  2847                           fsr1l	equ	0xFE1
  2848                           indf2	equ	0xFDF
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _finish *****************
  2854 ;; Defined at:
  2855 ;;		line 272 in file "main.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2869 ;;      Params:         0       0       0       0       0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2872 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_high_isr
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text12
  2883  0008B8                     __ptext12:
  2884                           	opt stack 0
  2885  0008B8                     _finish:
  2886                           	opt stack 28
  2887                           
  2888                           ;main.c: 274: T1CONbits.TMR1ON = 1;
  2889                           
  2890                           ;incstack = 0
  2891  0008B8  80CD               	bsf	4045,0,c	;volatile
  2892                           
  2893                           ;main.c: 275: T0CONbits.TMR0ON = 0;
  2894  0008BA  9ED5               	bcf	4053,7,c	;volatile
  2895                           
  2896                           ;main.c: 276: MOT_1 = MOT_3 = 0;
  2897  0008BC  0E00               	movlw	0
  2898  0008BE  6E26               	movwf	_MOT_3,c
  2899  0008C0  C026  F027         	movff	_MOT_3,_MOT_1
  2900                           
  2901                           ;main.c: 277: winding = 0;
  2902  0008C4  0E00               	movlw	0
  2903  0008C6  6E22               	movwf	_winding,c
  2904                           
  2905                           ;main.c: 278: MOT_4 = 1;
  2906  0008C8  0E01               	movlw	1
  2907  0008CA  6E53               	movwf	_MOT_4,c
  2908                           
  2909                           ;main.c: 279: DIR_4 = 1;
  2910  0008CC  0E01               	movlw	1
  2911  0008CE  6E1D               	movwf	_DIR_4,c
  2912                           
  2913                           ;main.c: 280: move_4 = 1;
  2914  0008D0  0E01               	movlw	1
  2915  0008D2  6E23               	movwf	_move_4,c
  2916                           
  2917                           ;main.c: 282: finish_flag = 1;
  2918  0008D4  0E01               	movlw	1
  2919  0008D6  6E1B               	movwf	_finish_flag,c
  2920  0008D8  0012               	return		;funcret
  2921  0008DA                     __end_of_finish:
  2922                           	opt stack 0
  2923  0000                     pclatu	equ	0xFFB
  2924                           pclath	equ	0xFFA
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           prodh	equ	0xFF4
  2930                           prodl	equ	0xFF3
  2931                           intcon	equ	0xFF2
  2932                           intcon2	equ	0xFF1
  2933                           intcon3	equ	0xFF0
  2934                           postinc0	equ	0xFEE
  2935                           fsr0h	equ	0xFEA
  2936                           fsr0l	equ	0xFE9
  2937                           wreg	equ	0xFE8
  2938                           postdec1	equ	0xFE5
  2939                           fsr1h	equ	0xFE2
  2940                           fsr1l	equ	0xFE1
  2941                           indf2	equ	0xFDF
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           pclatu	equ	0xFFB
  2946                           pclath	equ	0xFFA
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           intcon2	equ	0xFF1
  2955                           intcon3	equ	0xFF0
  2956                           postinc0	equ	0xFEE
  2957                           fsr0h	equ	0xFEA
  2958                           fsr0l	equ	0xFE9
  2959                           wreg	equ	0xFE8
  2960                           postdec1	equ	0xFE5
  2961                           fsr1h	equ	0xFE2
  2962                           fsr1l	equ	0xFE1
  2963                           indf2	equ	0xFDF
  2964                           fsr2h	equ	0xFDA
  2965                           fsr2l	equ	0xFD9
  2966                           status	equ	0xFD8
  2967                           
  2968                           	psect	rparam
  2969  0000                     pclatu	equ	0xFFB
  2970                           pclath	equ	0xFFA
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           intcon	equ	0xFF2
  2978                           intcon2	equ	0xFF1
  2979                           intcon3	equ	0xFF0
  2980                           postinc0	equ	0xFEE
  2981                           fsr0h	equ	0xFEA
  2982                           fsr0l	equ	0xFE9
  2983                           wreg	equ	0xFE8
  2984                           postdec1	equ	0xFE5
  2985                           fsr1h	equ	0xFE2
  2986                           fsr1l	equ	0xFE1
  2987                           indf2	equ	0xFDF
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992                           	psect	temp
  2993  000054                     btemp:
  2994                           	opt stack 0
  2995  000054                     	ds	1
  2996  0000                     int$flags	set	btemp
  2997  0000                     wtemp6	set	btemp+1
  2998                           pclatu	equ	0xFFB
  2999                           pclath	equ	0xFFA
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           intcon2	equ	0xFF1
  3008                           intcon3	equ	0xFF0
  3009                           postinc0	equ	0xFEE
  3010                           fsr0h	equ	0xFEA
  3011                           fsr0l	equ	0xFE9
  3012                           wreg	equ	0xFE8
  3013                           postdec1	equ	0xFE5
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           indf2	equ	0xFDF
  3017                           fsr2h	equ	0xFDA
  3018                           fsr2l	equ	0xFD9
  3019                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      83
    BANK0           160      8      49
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_mot_3_step_count
    _mot_3_step_count->i2___wmul

Critical Paths under _main in BANK0

    _main->___wmul

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2660
                                              6 BANK0      2     2      0
                _ConfigureOscillator
                            _InitApp
                             ___wmul
                              _reset
                       _speed_select
                         _trans_Char
                             _unwind
                          _zero_mark
 ---------------------------------------------------------------------------------
 (1) _zero_mark                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _unwind                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _trans_Char                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _speed_select                                         4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2508
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _high_isr                                            20    20      0     405
                                             12 COMRAM    20    20      0
                             _finish
                   _mot_3_step_count
 ---------------------------------------------------------------------------------
 (3) _mot_3_step_count                                     6     2      4     405
                                              6 COMRAM     6     2      4
                           i2___wmul
 ---------------------------------------------------------------------------------
 (4) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _finish                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___wmul
   _reset
   _speed_select
   _trans_Char
   _unwind
   _zero_mark

 _high_isr (ROOT)
   _finish
   _mot_3_step_count
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      31       5       30.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      53       1       88.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84      20        0.0%
DATA                 0      0      84       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 25 14:04:13 2019

                           _n 0013           ___wmul@multiplicand 0085                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l231 023E                           l232 0214  
                         l305 0820                           l241 025E                           l225 001A  
                         l306 07FE                           l242 0256                           l226 03E6  
                         l307 0840                           l227 01B6                           l308 0816  
                         l261 0306                           l245 029E                           l229 01F6  
                         l254 02EE                           l263 0314                           l255 02BE  
                         l248 0288                           l265 0324                           l257 02D6  
                         l268 0382                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           _RX9 007D5E                           _TX9 007D66  
                __CFG_BOR$OFF 000000                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l2134 037C                          l1998 0918  
                        _BRGH 007D62                          _CREN 007D5C                          u2110 02E8  
                        u2120 02EA                          u2050 02B8                          u2140 0300  
                        u2060 02BA                          _LATA 000F89                          u2150 0302  
                        _LATB 000F8A                          _LATC 000F8B                          u2080 02D0  
                        u2090 02D2                          u2237 03F2                          u1820 005E  
                        u1805 0044                          u1750 08E4                          u1806 0046  
                        u1815 004E                          u1760 08E6                          u1816 0050  
                        u1838 0062                          u1775 0026                          u1776 0028  
                        u1785 0030                          u1890 020C                          u1786 0032  
                        u1795 003A                          u1796 003C                          _RCIE 007CED  
                        i2l97 0558                          _TMR0 000FD6                          _TMR1 000FCE  
                        _SPEN 007D5F                          _TXIE 007CEC                          _TXIF 007CF4  
                        _TXEN 007D65                          _SYNC 007D64                          _main 0012  
                        _send 0074                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0054  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             __end_of_InitApp 078E                   _unwind_flag 0019                 __CFG_PLLDIV$1 000000  
              __CFG_CCP2MX$ON 000000                         ?_main 0028                         _ADRES 000FC3  
                       _BRG16 007DC3                         _DIR_1 001F                         _DIR_2 001E  
                       _DIR_3 0025                         _DIR_4 001D                         i2l100 04BC  
                       i2l101 04E6                         i2l111 05F4                         i2l121 0666  
                       i2l113 0632                         i2l122 065C                         i2l106 05FA  
                       i2l107 0586                         i2l116 0620                         i2l108 05A4  
                       i2l126 0678                         i2l127 0686                         i2l119 064A  
                       _RCREG 000FAE                         _MOT_1 0027                         _MOT_2 0024  
                       _MOT_3 0026                         _MOT_4 0053                         _SPBRG 000FAF  
                       _PORTA 000F80                         _PORTB 000F81                         _PORTC 000F82  
               __CFG_USBDIV$1 000000                         _TXREG 000FAD           _ConfigureOscillator 092E  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _reset 0940  
                       _turns 0050                   _turns_count 0003                         pclath 000FFA  
                       tablat 000FF5              __end_ofi2___wmul 0894                         status 000FD8  
                       wtemp6 0055          ?_ConfigureOscillator 0028               __initialization 078E  
                __end_of_main 0400                        ??_main 0089                 __activetblptr 000002  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        _CCPR1L 000FBE  
                      ?_reset 0028                        _GODONE 007E11                        i2l1642 04E6  
                      i2l1674 05F4                     ??_InitApp 0083         ??_ConfigureOscillator 0083  
              __CFG_XINST$OFF 000000              __end_of_high_isr 06D2     __size_of_mot_3_step_count 0024  
                      ___wmul 0846                        _enable 001A                        _finish 08B8  
                      _length 004E                        _recibi 0021                        clear_0 07D4  
                      clear_1 07E0                        _move_4 0023                        _motor1 008B  
                      _motor2 007D                        _unwind 08DA                  __pdataCOMRAM 0048  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0060       __end_of__initialization 07E6               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                __pcstackCOMRAM 0028                  __pidataBANK0 093A  
               __end_of_reset 0944                     ?i2___wmul 0028                 trans_Char@out 0083  
                     ??_reset 0083                    __pbssBANK0 0060                       ?___wmul 0083  
                     ?_finish 0028            _ADC_previous_value 0015                       ?_unwind 0028  
                  ??i2___wmul 002C                       i2u93_40 0490                       i2u94_48 0492  
                     i2u98_41 04F8                       i2u99_40 050C                     ?_high_isr 0028  
             __CFG_VREGEN$OFF 000000            __size_of_zero_mark 001A                       _InitApp 06D2  
                     __Hparam 0000                       __Lparam 0000              _mot_3_step_count 0894  
             __size_of___wmul 0028                       _caliber 0001               __size_of_finish 0022  
             __CFG_STVREN$OFF 000000                       __pcinit 078E                       __ramtop 0800  
                     __ptext0 0012                       __ptext1 08FA                       __ptext2 08DA  
                     __ptext3 0914                       __ptext4 07F4                       __ptext5 0940  
                     __ptext6 0846                       __ptext7 06D2                       __ptext8 092E  
                  _param_flag 001C                     _T0CONbits 000FD5                       _count_1 004C  
                     _count_2 008F                       _count_3 004A                       _count_4 008D  
             __size_of_unwind 0020                     _T1CONbits 000FCD                       _palabra 0060  
                   _T2CONbits 000FCA                       _winding 0022              _mot_4_step_count 007B  
                     _steps_4 0017                    ??_high_isr 0034                __pintcode_body 0400  
        end_of_initialization 07E6                 __Lmediumconst 0000                       int_func 0400  
         i2___wmul@multiplier 0028                 ?_speed_select 0083                       postdec1 000FE5  
                     postinc0 000FEE                     _PORTAbits 000F80                     _PORTBbits 000F81  
                   _PORTCbits 000F82             __end_of_zero_mark 0914                     _TRISAbits 000F92  
                   _TRISBbits 000F93                     _TRISCbits 000F94                    _trans_Char 0914  
 __end_of_ConfigureOscillator 093A                   _CCP1CONbits 000FBD                ??_speed_select 0085  
              __end_of___wmul 086E                 __pidataCOMRAM 0922                __end_of_finish 08DA  
            i2___wmul@product 002C                __end_of_unwind 08FA           start_initialization 078E  
           __size_ofi2___wmul 0026                      ??___wmul 0087                      ??_finish 0028  
                 __pdataBANK0 008B              __CFG_LPT1OSC$OFF 000000                      ??_unwind 0083  
                 __pbssCOMRAM 0001                 __pcstackBANK0 0083                   ?_trans_Char 0028  
    __end_of_mot_3_step_count 08B8             __size_of_high_isr 06CA                      ?_InitApp 0028  
                   __pintcode 0008          __end_of_speed_select 0846                __size_of_reset 0004  
              ___wmul@product 0087                      _LATAbits 000F89                      _LATBbits 000F8A  
                    _LATCbits 000F8B                      _IPR1bits 000F9F                      _PIE1bits 000F9D  
                    _RA0state 0020                      i2u100_48 050E                      i2u101_41 053E  
                    i2u102_40 054A                      i2u110_48 0598                      i2u103_40 054C  
                    i2u113_40 05BA                      i2u106_40 0576                      i2u114_48 05BC  
                    i2u107_48 0578                      i2u109_40 0596                      i2u126_40 0682  
                    i2u127_40 0684                      _PIR1bits 000F9E                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000           __size_of_trans_Char 000E                   _finish_flag 001B  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0083                      i2___wmul 086E  
                    _PWM_duty 0048               _ADC_value_press 000F                     _zero_flag 0052  
                   _zero_mark 08FA                   _INTCON2bits 000FF1                   _INTCON3bits 000FF0  
                   copy_data0 07A2                     copy_data1 07C2              __size_of_InitApp 00BC  
                    __Hrparam 0000                      __Lrparam 0000         i2___wmul@multiplicand 002A  
                  ?_zero_mark 0028                      __ptext10 0894                      __ptext11 086E  
                    __ptext12 08B8                      _high_isr 0008                 __size_of_main 03EE  
                 _mot_1_steps 0009                   _mot_3_steps 0007                   _mot_4_steps 0005  
__size_of_ConfigureOscillator 000C                      _overflow 0011                      int$flags 0054  
          mot_3_step_count@ms 0030         __size_of_speed_select 0052         __CFG_CPUDIV$OSC1_PLL2 000000  
                  _INTCONbits 000FF2                  ??_trans_Char 0083                   _MOT_1_count 000D  
                 _MOT_2_count 0081                   _MOT_3_count 000B                   _MOT_4_count 007F  
           ?_mot_3_step_count 002E                      intlevel2 0000            ??_mot_3_step_count 0032  
                  _OSCCONbits 000FD3                  _speed_select 07F4             mot_3_step_count@l 002E  
          __end_of_trans_Char 0922           __CFG_FOSC$INTOSC_EC 000000                   ??_zero_mark 0083  
             speed_select@var 0083  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 14 23:44:58 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F2550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataCOMRAM
    63  00082A                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _PWM_duty
    67  00082A  0032               	dw	50
    68                           
    69                           ;initializer for _motor1
    70  00082C  0001               	dw	1
    71                           
    72                           ;initializer for _count_4
    73  00082E  0014               	dw	20
    74                           
    75                           ;initializer for _count_3
    76  000830  0005               	dw	5
    77                           
    78                           ;initializer for _count_2
    79  000832  0005               	dw	5
    80                           
    81                           ;initializer for _count_1
    82  000834  0005               	dw	5
    83                           
    84                           	psect	nvCOMRAM
    85  000049                     __pnvCOMRAM:
    86                           	opt stack 0
    87  000049                     _MOT_4:
    88                           	opt stack 0
    89  000049                     	ds	1
    90  00004A                     _MOT_2:
    91                           	opt stack 0
    92  00004A                     	ds	1
    93  00004B                     _MOT_1:
    94                           	opt stack 0
    95  00004B                     	ds	1
    96  0000                     _ADRES	set	4035
    97  0000                     _TMR0	set	4054
    98  0000                     _T2CONbits	set	4042
    99  0000                     _CCP1CONbits	set	4029
   100  0000                     _PR2	set	4043
   101  0000                     _SPBRG	set	4015
   102  0000                     _T0CONbits	set	4053
   103  0000                     _INTCON2bits	set	4081
   104  0000                     _RCONbits	set	4048
   105  0000                     _TRISBbits	set	3987
   106  0000                     _TRISCbits	set	3988
   107  0000                     _PIE1bits	set	3997
   108  0000                     _ADCON2	set	4032
   109  0000                     _TRISAbits	set	3986
   110  0000                     _ADCON1	set	4033
   111  0000                     _LATC	set	3979
   112  0000                     _PORTC	set	3970
   113  0000                     _LATB	set	3978
   114  0000                     _PORTB	set	3969
   115  0000                     _LATA	set	3977
   116  0000                     _PORTA	set	3968
   117  0000                     _OSCCONbits	set	4051
   118  0000                     _CCPR1L	set	4030
   119  0000                     _INTCON3bits	set	4080
   120  0000                     _ADCON0bits	set	4034
   121  0000                     _TXREG	set	4013
   122  0000                     _RCREG	set	4014
   123  0000                     _PIR1bits	set	3998
   124  0000                     _PORTBbits	set	3969
   125  0000                     _LATBbits	set	3978
   126  0000                     _PORTCbits	set	3970
   127  0000                     _LATCbits	set	3979
   128  0000                     _PORTAbits	set	3968
   129  0000                     _LATAbits	set	3977
   130  0000                     _INTCONbits	set	4082
   131  0000                     _TXIE	set	31980
   132  0000                     _RCIE	set	31981
   133  0000                     _RX9	set	32094
   134  0000                     _TX9	set	32102
   135  0000                     _CREN	set	32092
   136  0000                     _TXEN	set	32101
   137  0000                     _SYNC	set	32100
   138  0000                     _SPEN	set	32095
   139  0000                     _BRG16	set	32195
   140  0000                     _BRGH	set	32098
   141  0000                     _GODONE	set	32273
   142  0000                     _TXIF	set	31988
   143                           
   144                           ; #config settings
   145  0000                     
   146                           	psect	cinit
   147  00078C                     __pcinit:
   148                           	opt stack 0
   149  00078C                     start_initialization:
   150                           	opt stack 0
   151  00078C                     __initialization:
   152                           	opt stack 0
   153                           
   154                           ; Initialize objects allocated to COMRAM (12 bytes)
   155                           ; load TBLPTR registers with __pidataCOMRAM
   156  00078C  0E2A               	movlw	low __pidataCOMRAM
   157  00078E  6EF6               	movwf	tblptrl,c
   158  000790  0E08               	movlw	high __pidataCOMRAM
   159  000792  6EF7               	movwf	tblptrh,c
   160  000794  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   161  000796  6EF8               	movwf	tblptru,c
   162  000798  EE00  F03D         	lfsr	0,__pdataCOMRAM
   163  00079C  EE10 F00C          	lfsr	1,12
   164  0007A0                     copy_data0:
   165  0007A0  0009               	tblrd		*+
   166  0007A2  CFF5 FFEE          	movff	tablat,postinc0
   167  0007A6  50E5               	movf	postdec1,w,c
   168  0007A8  50E1               	movf	fsr1l,w,c
   169  0007AA  E1FA               	bnz	copy_data0
   170                           
   171                           ; Clear objects allocated to BANK0 (20 bytes)
   172  0007AC  EE00  F060         	lfsr	0,__pbssBANK0
   173  0007B0  0E14               	movlw	20
   174  0007B2                     clear_0:
   175  0007B2  6AEE               	clrf	postinc0,c
   176  0007B4  06E8               	decf	wreg,f,c
   177  0007B6  E1FD               	bnz	clear_0
   178                           
   179                           ; Clear objects allocated to COMRAM (41 bytes)
   180  0007B8  EE00  F001         	lfsr	0,__pbssCOMRAM
   181  0007BC  0E29               	movlw	41
   182  0007BE                     clear_1:
   183  0007BE  6AEE               	clrf	postinc0,c
   184  0007C0  06E8               	decf	wreg,f,c
   185  0007C2  E1FD               	bnz	clear_1
   186  0007C4                     end_of_initialization:
   187                           	opt stack 0
   188  0007C4                     __end_of__initialization:
   189                           	opt stack 0
   190  0007C4  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   191  0007C6  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   192  0007C8  0100               	movlb	0
   193  0007CA  EF09  F000         	goto	_main	;jump to C main() function
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           postdec1	equ	0xFE5
   201                           fsr1l	equ	0xFE1
   202                           
   203                           	psect	bssCOMRAM
   204  000001                     __pbssCOMRAM:
   205                           	opt stack 0
   206  000001                     _speed:
   207                           	opt stack 0
   208  000001                     	ds	2
   209  000003                     _turns:
   210                           	opt stack 0
   211  000003                     	ds	2
   212  000005                     _length:
   213                           	opt stack 0
   214  000005                     	ds	2
   215  000007                     _diameter:
   216                           	opt stack 0
   217  000007                     	ds	2
   218  000009                     _caliber:
   219                           	opt stack 0
   220  000009                     	ds	2
   221  00000B                     _motor2:
   222                           	opt stack 0
   223  00000B                     	ds	2
   224  00000D                     _MOT_4_count:
   225                           	opt stack 0
   226  00000D                     	ds	2
   227  00000F                     _MOT_3_count:
   228                           	opt stack 0
   229  00000F                     	ds	2
   230  000011                     _MOT_2_count:
   231                           	opt stack 0
   232  000011                     	ds	2
   233  000013                     _MOT_1_count:
   234                           	opt stack 0
   235  000013                     	ds	2
   236  000015                     _ADC_value_dist:
   237                           	opt stack 0
   238  000015                     	ds	2
   239  000017                     _ADC_value_press:
   240                           	opt stack 0
   241  000017                     	ds	2
   242  000019                     _overflow:
   243                           	opt stack 0
   244  000019                     	ds	2
   245  00001B                     _n:
   246                           	opt stack 0
   247  00001B                     	ds	2
   248  00001D                     _busy_flag:
   249                           	opt stack 0
   250  00001D                     	ds	1
   251  00001E                     _DIR_4:
   252                           	opt stack 0
   253  00001E                     	ds	1
   254  00001F                     _DIR_2:
   255                           	opt stack 0
   256  00001F                     	ds	1
   257  000020                     _DIR_1:
   258                           	opt stack 0
   259  000020                     	ds	1
   260  000021                     _RA0state:
   261                           	opt stack 0
   262  000021                     	ds	1
   263  000022                     _recibi:
   264                           	opt stack 0
   265  000022                     	ds	1
   266  000023                     _DIR_3:
   267                           	opt stack 0
   268  000023                     	ds	1
   269  000024                     _MOT_3:
   270                           	opt stack 0
   271  000024                     	ds	1
   272  000025                     _send:
   273                           	opt stack 0
   274  000025                     	ds	5
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	dataCOMRAM
   285  00003D                     __pdataCOMRAM:
   286                           	opt stack 0
   287  00003D                     _PWM_duty:
   288                           	opt stack 0
   289  00003D                     	ds	2
   290  00003F                     _motor1:
   291                           	opt stack 0
   292  00003F                     	ds	2
   293  000041                     _count_4:
   294                           	opt stack 0
   295  000041                     	ds	2
   296  000043                     _count_3:
   297                           	opt stack 0
   298  000043                     	ds	2
   299  000045                     _count_2:
   300                           	opt stack 0
   301  000045                     	ds	2
   302  000047                     _count_1:
   303                           	opt stack 0
   304  000047                     	ds	2
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	bssBANK0
   315  000060                     __pbssBANK0:
   316                           	opt stack 0
   317  000060                     _palabra:
   318                           	opt stack 0
   319  000060                     	ds	20
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	cstackBANK0
   330  000074                     __pcstackBANK0:
   331                           	opt stack 0
   332  000074                     ?___wmul:
   333                           	opt stack 0
   334  000074                     ?___lwmod:
   335                           	opt stack 0
   336  000074                     trans_Char@out:
   337                           	opt stack 0
   338  000074                     ___wmul@multiplier:
   339                           	opt stack 0
   340  000074                     ___lwmod@dividend:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x0
   344  000074                     	ds	1
   345  000075                     send_String@out:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x1
   349  000075                     	ds	1
   350  000076                     ___wmul@multiplicand:
   351                           	opt stack 0
   352  000076                     ___lwmod@divisor:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x2
   356  000076                     	ds	2
   357  000078                     ___lwmod@counter:
   358                           	opt stack 0
   359  000078                     ___wmul@product:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x4
   363  000078                     	ds	1
   364  000079                     ?___lwdiv:
   365                           	opt stack 0
   366  000079                     ___lwdiv@dividend:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x5
   370  000079                     	ds	2
   371  00007B                     ___lwdiv@divisor:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x7
   375  00007B                     	ds	2
   376  00007D                     ___lwdiv@counter:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x9
   380  00007D                     	ds	1
   381  00007E                     ___lwdiv@quotient:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0xA
   385  00007E                     	ds	2
   386  000080                     ??_main:
   387                           
   388                           ; 1 bytes @ 0xC
   389  000080                     	ds	2
   390  000082                     _main$1857:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0xE
   394  000082                     	ds	2
   395  000084                     _main$1856:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x10
   399  000084                     	ds	2
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1l	equ	0xFE1
   408                           
   409                           	psect	cstackCOMRAM
   410  00002A                     __pcstackCOMRAM:
   411                           	opt stack 0
   412  00002A                     ??_high_isr:
   413  00002A                     
   414                           ; 1 bytes @ 0x0
   415  00002A                     	ds	19
   416  00003D                     tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1l	equ	0xFE1
   424                           
   425                           ; 1 bytes @ 0x13
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 69 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   445 ;;      Params:         0       0       0       0       0       0       0       0       0
   446 ;;      Locals:         0       4       0       0       0       0       0       0       0
   447 ;;      Temps:          0       2       0       0       0       0       0       0       0
   448 ;;      Totals:         0       6       0       0       0       0       0       0       0
   449 ;;Total ram usage:        6 bytes
   450 ;; Hardware stack levels required when called:    3
   451 ;; This function calls:
   452 ;;		_ConfigureOscillator
   453 ;;		_InitApp
   454 ;;		___lwdiv
   455 ;;		___lwmod
   456 ;;		___wmul
   457 ;;		_send_String
   458 ;; This function is called by:
   459 ;;		Startup code after reset
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text0
   464  000012                     __ptext0:
   465                           	opt stack 0
   466  000012                     _main:
   467                           	opt stack 28
   468                           
   469                           ;main.c: 71: ConfigureOscillator();
   470                           
   471                           ;incstack = 0
   472  000012  EC1B  F004         	call	_ConfigureOscillator	;wreg free
   473                           
   474                           ;main.c: 74: InitApp();
   475  000016  EC26  F003         	call	_InitApp	;wreg free
   476  00001A                     
   477                           ;main.c: 77: MOT_1 = 1;
   478  00001A  0E01               	movlw	1
   479  00001C  6E4B               	movwf	_MOT_1,c
   480                           
   481                           ;main.c: 78: MOT_2 = 1;
   482  00001E  0E01               	movlw	1
   483  000020  6E4A               	movwf	_MOT_2,c
   484                           
   485                           ;main.c: 79: MOT_4 = 1;
   486  000022  0E01               	movlw	1
   487  000024  6E49               	movwf	_MOT_4,c
   488                           
   489                           ;main.c: 81: CCPR1L = PWM_duty;
   490  000026  C03D  FFBE         	movff	_PWM_duty,4030	;volatile
   491                           
   492                           ;main.c: 83: LATAbits.LA2 = DIR_1;
   493  00002A  B020               	btfsc	_DIR_1,0,c
   494  00002C  D002               	bra	u1245
   495  00002E  9489               	bcf	3977,2,c	;volatile
   496  000030  D001               	bra	u1246
   497  000032                     u1245:
   498  000032  8489               	bsf	3977,2,c	;volatile
   499  000034                     u1246:
   500                           
   501                           ;main.c: 84: LATAbits.LA4 = DIR_2;
   502  000034  B01F               	btfsc	_DIR_2,0,c
   503  000036  D002               	bra	u1255
   504  000038  9889               	bcf	3977,4,c	;volatile
   505  00003A  D001               	bra	u1256
   506  00003C                     u1255:
   507  00003C  8889               	bsf	3977,4,c	;volatile
   508  00003E                     u1256:
   509                           
   510                           ;main.c: 85: LATCbits.LC0 = DIR_3;
   511  00003E  B023               	btfsc	_DIR_3,0,c
   512  000040  D002               	bra	u1265
   513  000042  908B               	bcf	3979,0,c	;volatile
   514  000044  D001               	bra	u1266
   515  000046                     u1265:
   516  000046  808B               	bsf	3979,0,c	;volatile
   517  000048                     u1266:
   518                           
   519                           ;main.c: 86: LATBbits.LB7 = DIR_4;
   520  000048  B01E               	btfsc	_DIR_4,0,c
   521  00004A  D002               	bra	u1275
   522  00004C  9E8A               	bcf	3978,7,c	;volatile
   523  00004E  D001               	bra	u1276
   524  000050                     u1275:
   525  000050  8E8A               	bsf	3978,7,c	;volatile
   526  000052                     u1276:
   527                           
   528                           ;main.c: 93: if (recibi == 1) {
   529  000052  0422               	decf	_recibi,w,c
   530  000054  A4D8               	btfss	status,2,c
   531  000056  D143               	goto	l173
   532                           
   533                           ;main.c: 95: recibi = 0;
   534  000058  0E00               	movlw	0
   535  00005A  6E22               	movwf	_recibi,c
   536                           
   537                           ;main.c: 97: if (palabra[0] == 'B') {
   538  00005C  0E42               	movlw	66
   539  00005E  0100               	movlb	0	; () banked
   540  000060  1960               	xorwf	_palabra& (0+255),w,b
   541  000062  A4D8               	btfss	status,2,c
   542  000064  D01B               	goto	l174
   543                           
   544                           ; BSR set to: 0
   545                           ;main.c: 99: PWM_duty = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   546  000066  0ED0               	movlw	208
   547  000068  2561               	addwf	(_palabra+1)& (0+255),w,b
   548  00006A  6F74               	movwf	___wmul@multiplier& (0+255),b
   549  00006C  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   550  00006E  0EFF               	movlw	255
   551  000070  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   552  000072  0E00               	movlw	0
   553  000074  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   554  000076  0E0A               	movlw	10
   555  000078  6F76               	movwf	___wmul@multiplicand& (0+255),b
   556  00007A  ECE7  F003         	call	___wmul	;wreg free
   557  00007E  0100               	movlb	0	; () banked
   558  000080  5162               	movf	(_palabra+2)& (0+255),w,b
   559  000082  6F80               	movwf	??_main& (0+255),b
   560  000084  6B81               	clrf	(??_main+1)& (0+255),b
   561  000086  5174               	movf	?___wmul& (0+255),w,b
   562  000088  2780               	addwf	??_main& (0+255),f,b
   563  00008A  5175               	movf	(?___wmul+1)& (0+255),w,b
   564  00008C  2381               	addwfc	(??_main+1)& (0+255),f,b
   565  00008E  0ED0               	movlw	208
   566  000090  2580               	addwf	??_main& (0+255),w,b
   567  000092  6E3D               	movwf	_PWM_duty,c
   568  000094  0EFF               	movlw	255
   569  000096  2181               	addwfc	(??_main+1)& (0+255),w,b
   570  000098  6E3E               	movwf	_PWM_duty+1,c
   571                           
   572                           ;main.c: 100: } else if (palabra[0] == 'A') {
   573  00009A  D7BF               	goto	l172
   574  00009C                     l174:
   575                           
   576                           ; BSR set to: 0
   577                           
   578                           ; BSR set to: 0
   579  00009C  0E41               	movlw	65
   580  00009E  1960               	xorwf	_palabra& (0+255),w,b
   581  0000A0  A4D8               	btfss	status,2,c
   582  0000A2  D0E5               	goto	l176
   583                           
   584                           ; BSR set to: 0
   585                           ;main.c: 102: caliber = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   586  0000A4  0ED0               	movlw	208
   587  0000A6  2561               	addwf	(_palabra+1)& (0+255),w,b
   588  0000A8  6F74               	movwf	___wmul@multiplier& (0+255),b
   589  0000AA  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   590  0000AC  0EFF               	movlw	255
   591  0000AE  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   592  0000B0  0E00               	movlw	0
   593  0000B2  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   594  0000B4  0E0A               	movlw	10
   595  0000B6  6F76               	movwf	___wmul@multiplicand& (0+255),b
   596  0000B8  ECE7  F003         	call	___wmul	;wreg free
   597  0000BC  0100               	movlb	0	; () banked
   598  0000BE  5162               	movf	(_palabra+2)& (0+255),w,b
   599  0000C0  6F80               	movwf	??_main& (0+255),b
   600  0000C2  6B81               	clrf	(??_main+1)& (0+255),b
   601  0000C4  5174               	movf	?___wmul& (0+255),w,b
   602  0000C6  2780               	addwf	??_main& (0+255),f,b
   603  0000C8  5175               	movf	(?___wmul+1)& (0+255),w,b
   604  0000CA  2381               	addwfc	(??_main+1)& (0+255),f,b
   605  0000CC  0ED0               	movlw	208
   606  0000CE  2580               	addwf	??_main& (0+255),w,b
   607  0000D0  6E09               	movwf	_caliber,c
   608  0000D2  0EFF               	movlw	255
   609  0000D4  2181               	addwfc	(??_main+1)& (0+255),w,b
   610  0000D6  6E0A               	movwf	_caliber+1,c
   611                           
   612                           ;main.c: 103: diameter = ((palabra[3] - 48) * 1000) + ((palabra[4] - 48) * 100) + ((pala
      +                          bra[5] - 48) * 10) + ((palabra[6] - 48));
   613  0000D8  0ED0               	movlw	208
   614  0000DA  2563               	addwf	(_palabra+3)& (0+255),w,b
   615  0000DC  6F74               	movwf	___wmul@multiplier& (0+255),b
   616  0000DE  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   617  0000E0  0EFF               	movlw	255
   618  0000E2  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   619  0000E4  0E03               	movlw	3
   620  0000E6  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   621  0000E8  0EE8               	movlw	232
   622  0000EA  6F76               	movwf	___wmul@multiplicand& (0+255),b
   623  0000EC  ECE7  F003         	call	___wmul	;wreg free
   624  0000F0  0100               	movlb	0	; () banked
   625  0000F2  5166               	movf	(_palabra+6)& (0+255),w,b
   626  0000F4  6F80               	movwf	??_main& (0+255),b
   627  0000F6  6B81               	clrf	(??_main+1)& (0+255),b
   628  0000F8  5174               	movf	?___wmul& (0+255),w,b
   629  0000FA  2780               	addwf	??_main& (0+255),f,b
   630  0000FC  5175               	movf	(?___wmul+1)& (0+255),w,b
   631  0000FE  2381               	addwfc	(??_main+1)& (0+255),f,b
   632  000100  0ED0               	movlw	208
   633  000102  2564               	addwf	(_palabra+4)& (0+255),w,b
   634  000104  6F74               	movwf	___wmul@multiplier& (0+255),b
   635  000106  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   636  000108  0EFF               	movlw	255
   637  00010A  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   638  00010C  0E00               	movlw	0
   639  00010E  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   640  000110  0E64               	movlw	100
   641  000112  6F76               	movwf	___wmul@multiplicand& (0+255),b
   642  000114  ECE7  F003         	call	___wmul	;wreg free
   643  000118  0100               	movlb	0	; () banked
   644  00011A  5174               	movf	?___wmul& (0+255),w,b
   645  00011C  2780               	addwf	??_main& (0+255),f,b
   646  00011E  5175               	movf	(?___wmul+1)& (0+255),w,b
   647  000120  2381               	addwfc	(??_main+1)& (0+255),f,b
   648  000122  0ED0               	movlw	208
   649  000124  2565               	addwf	(_palabra+5)& (0+255),w,b
   650  000126  6F74               	movwf	___wmul@multiplier& (0+255),b
   651  000128  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   652  00012A  0EFF               	movlw	255
   653  00012C  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   654  00012E  0E00               	movlw	0
   655  000130  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   656  000132  0E0A               	movlw	10
   657  000134  6F76               	movwf	___wmul@multiplicand& (0+255),b
   658  000136  ECE7  F003         	call	___wmul	;wreg free
   659  00013A  0100               	movlb	0	; () banked
   660  00013C  5174               	movf	?___wmul& (0+255),w,b
   661  00013E  2780               	addwf	??_main& (0+255),f,b
   662  000140  5175               	movf	(?___wmul+1)& (0+255),w,b
   663  000142  2381               	addwfc	(??_main+1)& (0+255),f,b
   664  000144  0ED0               	movlw	208
   665  000146  2580               	addwf	??_main& (0+255),w,b
   666  000148  6E07               	movwf	_diameter,c
   667  00014A  0EFF               	movlw	255
   668  00014C  2181               	addwfc	(??_main+1)& (0+255),w,b
   669  00014E  6E08               	movwf	_diameter+1,c
   670                           
   671                           ;main.c: 104: length = ((palabra[7] - 48) * 10000) + ((palabra[8] - 48) * 1000) + ((pala
      +                          bra[9] - 48) * 100) + ((palabra[10] - 48) * 10) + ((palabra[11] - 48));
   672  000150  0ED0               	movlw	208
   673  000152  2567               	addwf	(_palabra+7)& (0+255),w,b
   674  000154  6F74               	movwf	___wmul@multiplier& (0+255),b
   675  000156  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   676  000158  0EFF               	movlw	255
   677  00015A  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   678  00015C  0E27               	movlw	39
   679  00015E  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   680  000160  0E10               	movlw	16
   681  000162  6F76               	movwf	___wmul@multiplicand& (0+255),b
   682  000164  ECE7  F003         	call	___wmul	;wreg free
   683  000168  0100               	movlb	0	; () banked
   684  00016A  516B               	movf	(_palabra+11)& (0+255),w,b
   685  00016C  6F80               	movwf	??_main& (0+255),b
   686  00016E  6B81               	clrf	(??_main+1)& (0+255),b
   687  000170  5174               	movf	?___wmul& (0+255),w,b
   688  000172  2780               	addwf	??_main& (0+255),f,b
   689  000174  5175               	movf	(?___wmul+1)& (0+255),w,b
   690  000176  2381               	addwfc	(??_main+1)& (0+255),f,b
   691  000178  0ED0               	movlw	208
   692  00017A  2568               	addwf	(_palabra+8)& (0+255),w,b
   693  00017C  6F74               	movwf	___wmul@multiplier& (0+255),b
   694  00017E  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   695  000180  0EFF               	movlw	255
   696  000182  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   697  000184  0E03               	movlw	3
   698  000186  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   699  000188  0EE8               	movlw	232
   700  00018A  6F76               	movwf	___wmul@multiplicand& (0+255),b
   701  00018C  ECE7  F003         	call	___wmul	;wreg free
   702  000190  0100               	movlb	0	; () banked
   703  000192  5174               	movf	?___wmul& (0+255),w,b
   704  000194  2780               	addwf	??_main& (0+255),f,b
   705  000196  5175               	movf	(?___wmul+1)& (0+255),w,b
   706  000198  2381               	addwfc	(??_main+1)& (0+255),f,b
   707  00019A  0ED0               	movlw	208
   708  00019C  2569               	addwf	(_palabra+9)& (0+255),w,b
   709  00019E  6F74               	movwf	___wmul@multiplier& (0+255),b
   710  0001A0  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   711  0001A2  0EFF               	movlw	255
   712  0001A4  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   713  0001A6  0E00               	movlw	0
   714  0001A8  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   715  0001AA  0E64               	movlw	100
   716  0001AC  6F76               	movwf	___wmul@multiplicand& (0+255),b
   717  0001AE  ECE7  F003         	call	___wmul	;wreg free
   718  0001B2  0100               	movlb	0	; () banked
   719  0001B4  5174               	movf	?___wmul& (0+255),w,b
   720  0001B6  2780               	addwf	??_main& (0+255),f,b
   721  0001B8  5175               	movf	(?___wmul+1)& (0+255),w,b
   722  0001BA  2381               	addwfc	(??_main+1)& (0+255),f,b
   723  0001BC  0ED0               	movlw	208
   724  0001BE  256A               	addwf	(_palabra+10)& (0+255),w,b
   725  0001C0  6F74               	movwf	___wmul@multiplier& (0+255),b
   726  0001C2  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   727  0001C4  0EFF               	movlw	255
   728  0001C6  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   729  0001C8  0E00               	movlw	0
   730  0001CA  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   731  0001CC  0E0A               	movlw	10
   732  0001CE  6F76               	movwf	___wmul@multiplicand& (0+255),b
   733  0001D0  ECE7  F003         	call	___wmul	;wreg free
   734  0001D4  0100               	movlb	0	; () banked
   735  0001D6  5174               	movf	?___wmul& (0+255),w,b
   736  0001D8  2780               	addwf	??_main& (0+255),f,b
   737  0001DA  5175               	movf	(?___wmul+1)& (0+255),w,b
   738  0001DC  2381               	addwfc	(??_main+1)& (0+255),f,b
   739  0001DE  0ED0               	movlw	208
   740  0001E0  2580               	addwf	??_main& (0+255),w,b
   741  0001E2  6E05               	movwf	_length,c
   742  0001E4  0EFF               	movlw	255
   743  0001E6  2181               	addwfc	(??_main+1)& (0+255),w,b
   744  0001E8  6E06               	movwf	_length+1,c
   745                           
   746                           ;main.c: 105: turns = ((palabra[12] - 48) * 1000) + ((palabra[13] - 48) * 100) + ((palab
      +                          ra[14] - 48) * 10) + ((palabra[15] - 48));
   747  0001EA  0ED0               	movlw	208
   748  0001EC  256C               	addwf	(_palabra+12)& (0+255),w,b
   749  0001EE  6F74               	movwf	___wmul@multiplier& (0+255),b
   750  0001F0  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   751  0001F2  0EFF               	movlw	255
   752  0001F4  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   753  0001F6  0E03               	movlw	3
   754  0001F8  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   755  0001FA  0EE8               	movlw	232
   756  0001FC  6F76               	movwf	___wmul@multiplicand& (0+255),b
   757  0001FE  ECE7  F003         	call	___wmul	;wreg free
   758  000202  0100               	movlb	0	; () banked
   759  000204  516F               	movf	(_palabra+15)& (0+255),w,b
   760  000206  6F80               	movwf	??_main& (0+255),b
   761  000208  6B81               	clrf	(??_main+1)& (0+255),b
   762  00020A  5174               	movf	?___wmul& (0+255),w,b
   763  00020C  2780               	addwf	??_main& (0+255),f,b
   764  00020E  5175               	movf	(?___wmul+1)& (0+255),w,b
   765  000210  2381               	addwfc	(??_main+1)& (0+255),f,b
   766  000212  0ED0               	movlw	208
   767  000214  256D               	addwf	(_palabra+13)& (0+255),w,b
   768  000216  6F74               	movwf	___wmul@multiplier& (0+255),b
   769  000218  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   770  00021A  0EFF               	movlw	255
   771  00021C  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   772  00021E  0E00               	movlw	0
   773  000220  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   774  000222  0E64               	movlw	100
   775  000224  6F76               	movwf	___wmul@multiplicand& (0+255),b
   776  000226  ECE7  F003         	call	___wmul	;wreg free
   777  00022A  0100               	movlb	0	; () banked
   778  00022C  5174               	movf	?___wmul& (0+255),w,b
   779  00022E  2780               	addwf	??_main& (0+255),f,b
   780  000230  5175               	movf	(?___wmul+1)& (0+255),w,b
   781  000232  2381               	addwfc	(??_main+1)& (0+255),f,b
   782  000234  0ED0               	movlw	208
   783  000236  256E               	addwf	(_palabra+14)& (0+255),w,b
   784  000238  6F74               	movwf	___wmul@multiplier& (0+255),b
   785  00023A  6B75               	clrf	(___wmul@multiplier+1)& (0+255),b
   786  00023C  0EFF               	movlw	255
   787  00023E  2375               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   788  000240  0E00               	movlw	0
   789  000242  6F77               	movwf	(___wmul@multiplicand+1)& (0+255),b
   790  000244  0E0A               	movlw	10
   791  000246  6F76               	movwf	___wmul@multiplicand& (0+255),b
   792  000248  ECE7  F003         	call	___wmul	;wreg free
   793  00024C  0100               	movlb	0	; () banked
   794  00024E  5174               	movf	?___wmul& (0+255),w,b
   795  000250  2780               	addwf	??_main& (0+255),f,b
   796  000252  5175               	movf	(?___wmul+1)& (0+255),w,b
   797  000254  2381               	addwfc	(??_main+1)& (0+255),f,b
   798  000256  0ED0               	movlw	208
   799  000258  2580               	addwf	??_main& (0+255),w,b
   800  00025A  6E03               	movwf	_turns,c
   801  00025C  0EFF               	movlw	255
   802  00025E  2181               	addwfc	(??_main+1)& (0+255),w,b
   803  000260  6E04               	movwf	_turns+1,c
   804                           
   805                           ; BSR set to: 0
   806                           ;main.c: 106: speed = palabra[15];
   807  000262  C06F  F001         	movff	_palabra+15,_speed
   808  000266  6A02               	clrf	_speed+1,c
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 108: busy_flag = 1;
   812  000268  0E01               	movlw	1
   813  00026A  6E1D               	movwf	_busy_flag,c
   814                           
   815                           ;main.c: 109: } else if ((palabra[0] == 'D')) {
   816  00026C  D6D6               	goto	l172
   817  00026E                     l176:
   818                           
   819                           ; BSR set to: 0
   820                           
   821                           ; BSR set to: 0
   822  00026E  0E44               	movlw	68
   823  000270  1960               	xorwf	_palabra& (0+255),w,b
   824  000272  A4D8               	btfss	status,2,c
   825  000274  D018               	goto	l178
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 111: if (palabra[1] == '0') {
   829  000276  0E30               	movlw	48
   830  000278  1961               	xorwf	(_palabra+1)& (0+255),w,b
   831  00027A  A4D8               	btfss	status,2,c
   832  00027C  D004               	goto	l179
   833                           
   834                           ; BSR set to: 0
   835                           ;main.c: 113: MOT_3 = 1;
   836  00027E  0E01               	movlw	1
   837  000280  6E24               	movwf	_MOT_3,c
   838                           
   839                           ;main.c: 114: DIR_3 = 0;
   840  000282  0E00               	movlw	0
   841  000284  D007               	goto	L1
   842  000286                     l179:
   843                           
   844                           ; BSR set to: 0
   845                           
   846                           ; BSR set to: 0
   847  000286  0E31               	movlw	49
   848  000288  1961               	xorwf	(_palabra+1)& (0+255),w,b
   849  00028A  A4D8               	btfss	status,2,c
   850  00028C  D005               	goto	l181
   851                           
   852                           ; BSR set to: 0
   853                           ;main.c: 117: MOT_3 = 1;
   854  00028E  0E01               	movlw	1
   855  000290  6E24               	movwf	_MOT_3,c
   856                           
   857                           ;main.c: 118: DIR_3 = 1;
   858  000292  0E01               	movlw	1
   859  000294                     L1:
   860  000294  6E23               	movwf	_DIR_3,c
   861                           
   862                           ;main.c: 119: } else if (palabra[1] == '2') {
   863  000296  D6C1               	goto	l172
   864  000298                     l181:
   865                           
   866                           ; BSR set to: 0
   867                           
   868                           ; BSR set to: 0
   869  000298  0E32               	movlw	50
   870  00029A  1961               	xorwf	(_palabra+1)& (0+255),w,b
   871  00029C  A4D8               	btfss	status,2,c
   872  00029E  D6BD               	goto	l172
   873                           
   874                           ; BSR set to: 0
   875                           ;main.c: 120: ;
   876                           ;main.c: 121: MOT_3 = 0;
   877  0002A0  0E00               	movlw	0
   878  0002A2  6E24               	movwf	_MOT_3,c
   879                           
   880                           ; BSR set to: 0
   881                           ;main.c: 122: }
   882                           ;main.c: 124: } else if (palabra[0] == 'E') {
   883                           
   884                           ; BSR set to: 0
   885                           
   886                           ; BSR set to: 0
   887  0002A4  D6BA               	goto	l172
   888  0002A6                     l178:
   889                           
   890                           ; BSR set to: 0
   891                           
   892                           ; BSR set to: 0
   893  0002A6  0E45               	movlw	69
   894  0002A8  1960               	xorwf	_palabra& (0+255),w,b
   895  0002AA  A4D8               	btfss	status,2,c
   896  0002AC  D6B6               	goto	l172
   897                           
   898                           ; BSR set to: 0
   899                           ;main.c: 126: if (palabra[1] == '0') {
   900  0002AE  0E30               	movlw	48
   901  0002B0  1961               	xorwf	(_palabra+1)& (0+255),w,b
   902  0002B2  A4D8               	btfss	status,2,c
   903  0002B4  D008               	goto	l186
   904                           
   905                           ; BSR set to: 0
   906                           ;main.c: 127: MOT_4 = !MOT_4;
   907  0002B6  5049               	movf	_MOT_4,w,c
   908  0002B8  A4D8               	btfss	status,2,c
   909  0002BA  D002               	goto	u1370
   910  0002BC  0E01               	movlw	1
   911  0002BE  D001               	goto	u1380
   912  0002C0                     u1370:
   913  0002C0  0E00               	movlw	0
   914  0002C2                     u1380:
   915  0002C2  6E49               	movwf	_MOT_4,c
   916                           
   917                           ;main.c: 128: } else if (palabra[1] == '1') {
   918  0002C4  D6AA               	goto	l172
   919  0002C6                     l186:
   920                           
   921                           ; BSR set to: 0
   922                           
   923                           ; BSR set to: 0
   924  0002C6  0E31               	movlw	49
   925  0002C8  1961               	xorwf	(_palabra+1)& (0+255),w,b
   926  0002CA  A4D8               	btfss	status,2,c
   927  0002CC  D6A6               	goto	l172
   928                           
   929                           ; BSR set to: 0
   930                           ;main.c: 129: DIR_4 = !DIR_4;
   931  0002CE  501E               	movf	_DIR_4,w,c
   932  0002D0  A4D8               	btfss	status,2,c
   933  0002D2  D002               	goto	u1400
   934  0002D4  0E01               	movlw	1
   935  0002D6  D001               	goto	u1410
   936  0002D8                     u1400:
   937  0002D8  0E00               	movlw	0
   938  0002DA                     u1410:
   939  0002DA  6E1E               	movwf	_DIR_4,c
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 130: }
   943                           ;main.c: 131: }
   944                           ;main.c: 134: } else if (GODONE == 0) {
   945                           
   946                           ; BSR set to: 0
   947                           
   948                           ; BSR set to: 0
   949                           
   950                           ; BSR set to: 0
   951                           
   952                           ; BSR set to: 0
   953                           
   954                           ; BSR set to: 0
   955  0002DC  D69E               	goto	l172
   956  0002DE                     l173:
   957  0002DE  B2C2               	btfsc	4034,1,c	;volatile
   958  0002E0  D69C               	goto	l172
   959                           
   960                           ;main.c: 136: _delay((unsigned long)((10)*(8000000/4000.0)));
   961  0002E2  0E1A               	movlw	26
   962  0002E4  0100               	movlb	0	; () banked
   963  0002E6  6F80               	movwf	??_main& (0+255),b
   964  0002E8  0EF8               	movlw	248
   965  0002EA                     u1457:
   966  0002EA  2EE8               	decfsz	wreg,f,c
   967  0002EC  D7FE               	bra	u1457
   968  0002EE  2F80               	decfsz	??_main& (0+255),f,b
   969  0002F0  D7FC               	bra	u1457
   970  0002F2  F000               	nop	
   971                           
   972                           ;main.c: 137: ADCON0bits.CHS = !ADCON0bits.CHS;
   973  0002F4  30C2               	rrcf	4034,w,c	;volatile
   974  0002F6  32E8               	rrcf	wreg,f,c
   975  0002F8  0B0F               	andlw	15
   976  0002FA  0900               	iorlw	0
   977  0002FC  A4D8               	btfss	status,2,c
   978  0002FE  D004               	goto	u1430
   979  000300  0100               	movlb	0	; () banked
   980  000302  6B80               	clrf	??_main& (0+255),b
   981  000304  2B80               	incf	??_main& (0+255),f,b
   982  000306  D002               	goto	u1448
   983  000308                     u1430:
   984  000308  0100               	movlb	0	; () banked
   985  00030A  6B80               	clrf	??_main& (0+255),b
   986  00030C                     u1448:
   987  00030C  4780               	rlncf	??_main& (0+255),f,b
   988  00030E  4780               	rlncf	??_main& (0+255),f,b
   989  000310  50C2               	movf	4034,w,c	;volatile
   990  000312  1980               	xorwf	??_main& (0+255),w,b
   991  000314  0BC3               	andlw	-61
   992  000316  1980               	xorwf	??_main& (0+255),w,b
   993  000318  6EC2               	movwf	4034,c	;volatile
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 138: GODONE = 1;
   997  00031A  82C2               	bsf	4034,1,c	;volatile
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 140: send[0]='0' + (ADC_value_press/1000);
  1001  00031C  C017  F079         	movff	_ADC_value_press,___lwdiv@dividend
  1002  000320  C018  F07A         	movff	_ADC_value_press+1,___lwdiv@dividend+1
  1003  000324  0E03               	movlw	3
  1004  000326  6F7C               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1005  000328  0EE8               	movlw	232
  1006  00032A  6F7B               	movwf	___lwdiv@divisor& (0+255),b
  1007  00032C  EC7A  F003         	call	___lwdiv	;wreg free
  1008  000330  0100               	movlb	0	; () banked
  1009  000332  5179               	movf	?___lwdiv& (0+255),w,b
  1010  000334  0F30               	addlw	48
  1011  000336  6E25               	movwf	_send,c
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;main.c: 141: send[1]='0' + ((ADC_value_press%1000)/100);
  1015  000338  0E03               	movlw	3
  1016  00033A  6F77               	movwf	(___lwmod@divisor+1)& (0+255),b
  1017  00033C  0EE8               	movlw	232
  1018  00033E  6F76               	movwf	___lwmod@divisor& (0+255),b
  1019  000340  C017  F074         	movff	_ADC_value_press,___lwmod@dividend
  1020  000344  C018  F075         	movff	_ADC_value_press+1,___lwmod@dividend+1
  1021  000348  ECA4  F003         	call	___lwmod	;wreg free
  1022  00034C  C074  F079         	movff	?___lwmod,___lwdiv@dividend
  1023  000350  C075  F07A         	movff	?___lwmod+1,___lwdiv@dividend+1
  1024  000354  0E00               	movlw	0
  1025  000356  0100               	movlb	0	; () banked
  1026  000358  6F7C               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1027  00035A  0E64               	movlw	100
  1028  00035C  6F7B               	movwf	___lwdiv@divisor& (0+255),b
  1029  00035E  EC7A  F003         	call	___lwdiv	;wreg free
  1030  000362  0100               	movlb	0	; () banked
  1031  000364  5179               	movf	?___lwdiv& (0+255),w,b
  1032  000366  0F30               	addlw	48
  1033  000368  6E26               	movwf	_send+1,c
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 142: send[2]='0' + (((ADC_value_press%1000)%100)/10);
  1037  00036A  0E03               	movlw	3
  1038  00036C  6F77               	movwf	(___lwmod@divisor+1)& (0+255),b
  1039  00036E  0EE8               	movlw	232
  1040  000370  6F76               	movwf	___lwmod@divisor& (0+255),b
  1041  000372  C017  F074         	movff	_ADC_value_press,___lwmod@dividend
  1042  000376  C018  F075         	movff	_ADC_value_press+1,___lwmod@dividend+1
  1043  00037A  ECA4  F003         	call	___lwmod	;wreg free
  1044  00037E  C074  F084         	movff	?___lwmod,_main$1856
  1045  000382  C075  F085         	movff	?___lwmod+1,_main$1856+1
  1046                           
  1047                           ;main.c: 142: send[2]='0' + (((ADC_value_press%1000)%100)/10);
  1048  000386  0E00               	movlw	0
  1049  000388  0100               	movlb	0	; () banked
  1050  00038A  6F77               	movwf	(___lwmod@divisor+1)& (0+255),b
  1051  00038C  0E64               	movlw	100
  1052  00038E  6F76               	movwf	___lwmod@divisor& (0+255),b
  1053  000390  C084  F074         	movff	_main$1856,___lwmod@dividend
  1054  000394  C085  F075         	movff	_main$1856+1,___lwmod@dividend+1
  1055  000398  ECA4  F003         	call	___lwmod	;wreg free
  1056  00039C  C074  F079         	movff	?___lwmod,___lwdiv@dividend
  1057  0003A0  C075  F07A         	movff	?___lwmod+1,___lwdiv@dividend+1
  1058  0003A4  0E00               	movlw	0
  1059  0003A6  0100               	movlb	0	; () banked
  1060  0003A8  6F7C               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1061  0003AA  0E0A               	movlw	10
  1062  0003AC  6F7B               	movwf	___lwdiv@divisor& (0+255),b
  1063  0003AE  EC7A  F003         	call	___lwdiv	;wreg free
  1064  0003B2  0100               	movlb	0	; () banked
  1065  0003B4  5179               	movf	?___lwdiv& (0+255),w,b
  1066  0003B6  0F30               	addlw	48
  1067  0003B8  6E27               	movwf	_send+2,c
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;main.c: 143: send[3]='0' + ((((ADC_value_press%1000)%100)/10)%10);
  1071  0003BA  0E03               	movlw	3
  1072  0003BC  6F77               	movwf	(___lwmod@divisor+1)& (0+255),b
  1073  0003BE  0EE8               	movlw	232
  1074  0003C0  6F76               	movwf	___lwmod@divisor& (0+255),b
  1075  0003C2  C017  F074         	movff	_ADC_value_press,___lwmod@dividend
  1076  0003C6  C018  F075         	movff	_ADC_value_press+1,___lwmod@dividend+1
  1077  0003CA  ECA4  F003         	call	___lwmod	;wreg free
  1078  0003CE  C074  F084         	movff	?___lwmod,_main$1856
  1079  0003D2  C075  F085         	movff	?___lwmod+1,_main$1856+1
  1080                           
  1081                           ;main.c: 143: send[3]='0' + ((((ADC_value_press%1000)%100)/10)%10);
  1082  0003D6  0E00               	movlw	0
  1083  0003D8  0100               	movlb	0	; () banked
  1084  0003DA  6F7C               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1085  0003DC  0E0A               	movlw	10
  1086  0003DE  6F7B               	movwf	___lwdiv@divisor& (0+255),b
  1087  0003E0  0E00               	movlw	0
  1088  0003E2  6F77               	movwf	(___lwmod@divisor+1)& (0+255),b
  1089  0003E4  0E64               	movlw	100
  1090  0003E6  6F76               	movwf	___lwmod@divisor& (0+255),b
  1091  0003E8  C084  F074         	movff	_main$1856,___lwmod@dividend
  1092  0003EC  C085  F075         	movff	_main$1856+1,___lwmod@dividend+1
  1093  0003F0  ECA4  F003         	call	___lwmod	;wreg free
  1094  0003F4  C074  F079         	movff	?___lwmod,___lwdiv@dividend
  1095  0003F8  C075  F07A         	movff	?___lwmod+1,___lwdiv@dividend+1
  1096  0003FC  EC7A  F003         	call	___lwdiv	;wreg free
  1097  000400  C079  F082         	movff	?___lwdiv,_main$1857
  1098  000404  C07A  F083         	movff	?___lwdiv+1,_main$1857+1
  1099                           
  1100                           ;main.c: 143: send[3]='0' + ((((ADC_value_press%1000)%100)/10)%10);
  1101  000408  C082  F074         	movff	_main$1857,___lwmod@dividend
  1102  00040C  C083  F075         	movff	_main$1857+1,___lwmod@dividend+1
  1103  000410  0E00               	movlw	0
  1104  000412  0100               	movlb	0	; () banked
  1105  000414  6F77               	movwf	(___lwmod@divisor+1)& (0+255),b
  1106  000416  0E0A               	movlw	10
  1107  000418  6F76               	movwf	___lwmod@divisor& (0+255),b
  1108  00041A  ECA4  F003         	call	___lwmod	;wreg free
  1109  00041E  0100               	movlb	0	; () banked
  1110  000420  5174               	movf	?___lwmod& (0+255),w,b
  1111  000422  0F30               	addlw	48
  1112  000424  6E28               	movwf	_send+3,c
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;main.c: 144: send_String(send);
  1116  000426  0E25               	movlw	low _send
  1117  000428  6F75               	movwf	send_String@out& (0+255),b
  1118  00042A  0E00               	movlw	high _send
  1119  00042C  6F76               	movwf	(send_String@out+1)& (0+255),b
  1120  00042E  ECFB  F003         	call	_send_String	;wreg free
  1121  000432  D5F3               	goto	l172
  1122  000434                     __end_of_main:
  1123                           	opt stack 0
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           postinc0	equ	0xFEE
  1129                           wreg	equ	0xFE8
  1130                           postdec1	equ	0xFE5
  1131                           fsr1l	equ	0xFE1
  1132                           status	equ	0xFD8
  1133                           
  1134 ;; *************** function _send_String *****************
  1135 ;; Defined at:
  1136 ;;		line 157 in file "main.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  out             2    1[BANK0 ] PTR const unsigned char 
  1139 ;;		 -> send(5), 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1151 ;;      Params:         0       2       0       0       0       0       0       0       0
  1152 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1154 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1155 ;;Total ram usage:        2 bytes
  1156 ;; Hardware stack levels used:    1
  1157 ;; Hardware stack levels required when called:    2
  1158 ;; This function calls:
  1159 ;;		_trans_Char
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           	psect	text1
  1166  0007F6                     __ptext1:
  1167                           	opt stack 0
  1168  0007F6                     _send_String:
  1169                           	opt stack 28
  1170                           
  1171                           ;main.c: 158: while (*out != '\0') {
  1172                           
  1173                           ;incstack = 0
  1174  0007F6  D00A               	goto	l202
  1175  0007F8                     
  1176                           ;main.c: 159: trans_Char(*out);
  1177  0007F8  C075  FFD9         	movff	send_String@out,fsr2l
  1178  0007FC  C076  FFDA         	movff	send_String@out+1,fsr2h
  1179  000800  50DF               	movf	indf2,w,c
  1180  000802  EC0E  F004         	call	_trans_Char
  1181                           
  1182                           ;main.c: 160: out++;
  1183  000806  0100               	movlb	0	; () banked
  1184  000808  4B75               	infsnz	send_String@out& (0+255),f,b
  1185  00080A  2B76               	incf	(send_String@out+1)& (0+255),f,b
  1186  00080C                     l202:
  1187                           
  1188                           ; BSR set to: 0
  1189  00080C  C075  FFD9         	movff	send_String@out,fsr2l
  1190  000810  C076  FFDA         	movff	send_String@out+1,fsr2h
  1191  000814  50DF               	movf	indf2,w,c
  1192  000816  B4D8               	btfsc	status,2,c
  1193  000818  0012               	return	
  1194  00081A  D7EE               	goto	l203
  1195  00081C                     __end_of_send_String:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           postdec1	equ	0xFE5
  1204                           fsr1l	equ	0xFE1
  1205                           indf2	equ	0xFDF
  1206                           fsr2h	equ	0xFDA
  1207                           fsr2l	equ	0xFD9
  1208                           status	equ	0xFD8
  1209                           
  1210 ;; *************** function _trans_Char *****************
  1211 ;; Defined at:
  1212 ;;		line 152 in file "main.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  out             1    wreg     unsigned char 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  out             1    0[BANK0 ] unsigned char 
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1226 ;;      Params:         0       0       0       0       0       0       0       0       0
  1227 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1229 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1230 ;;Total ram usage:        1 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_send_String
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text2
  1241  00081C                     __ptext2:
  1242                           	opt stack 0
  1243  00081C                     _trans_Char:
  1244                           	opt stack 28
  1245                           
  1246                           ;incstack = 0
  1247                           ;trans_Char@out stored from wreg
  1248  00081C  0100               	movlb	0	; () banked
  1249  00081E  6F74               	movwf	trans_Char@out& (0+255),b
  1250  000820                     
  1251                           ;main.c: 153: while (TXIF == 0);
  1252  000820  A89E               	btfss	3998,4,c	;volatile
  1253  000822  D7FE               	goto	l1517
  1254                           
  1255                           ;main.c: 154: TXREG = out;
  1256  000824  C074  FFAD         	movff	trans_Char@out,4013	;volatile
  1257  000828  0012               	return		;funcret
  1258  00082A                     __end_of_trans_Char:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           indf2	equ	0xFDF
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273 ;; *************** function ___wmul *****************
  1274 ;; Defined at:
  1275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1278 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  product         2    4[BANK0 ] unsigned int 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  2    0[BANK0 ] unsigned int 
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, status,0, prodl, prodh
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1290 ;;      Params:         0       4       0       0       0       0       0       0       0
  1291 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1293 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1294 ;;Total ram usage:        6 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		Nothing
  1299 ;; This function is called by:
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text3
  1305  0007CE                     __ptext3:
  1306                           	opt stack 0
  1307  0007CE                     ___wmul:
  1308                           	opt stack 29
  1309                           
  1310                           ;incstack = 0
  1311  0007CE  0100               	movlb	0	; () banked
  1312  0007D0  5174               	movf	___wmul@multiplier& (0+255),w,b
  1313  0007D2  0376               	mulwf	___wmul@multiplicand& (0+255),b
  1314  0007D4  CFF3 F078          	movff	prodl,___wmul@product
  1315  0007D8  CFF4 F079          	movff	prodh,___wmul@product+1
  1316  0007DC  5174               	movf	___wmul@multiplier& (0+255),w,b
  1317  0007DE  0377               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1318  0007E0  50F3               	movf	prodl,w,c
  1319  0007E2  2779               	addwf	(___wmul@product+1)& (0+255),f,b
  1320  0007E4  5175               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1321  0007E6  0376               	mulwf	___wmul@multiplicand& (0+255),b
  1322  0007E8  50F3               	movf	prodl,w,c
  1323  0007EA  2779               	addwf	(___wmul@product+1)& (0+255),f,b
  1324                           
  1325                           ; BSR set to: 0
  1326  0007EC  C078  F074         	movff	___wmul@product,?___wmul
  1327  0007F0  C079  F075         	movff	___wmul@product+1,?___wmul+1
  1328  0007F4  0012               	return	
  1329  0007F6                     __end_of___wmul:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           prodh	equ	0xFF4
  1336                           prodl	equ	0xFF3
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           indf2	equ	0xFDF
  1342                           fsr2h	equ	0xFDA
  1343                           fsr2l	equ	0xFD9
  1344                           status	equ	0xFD8
  1345                           
  1346 ;; *************** function ___lwmod *****************
  1347 ;; Defined at:
  1348 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  dividend        2    0[BANK0 ] unsigned int 
  1351 ;;  divisor         2    2[BANK0 ] unsigned int 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  counter         1    4[BANK0 ] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  2    0[BANK0 ] unsigned int 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1363 ;;      Params:         0       4       0       0       0       0       0       0       0
  1364 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1366 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1367 ;;Total ram usage:        5 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    1
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text4
  1378  000748                     __ptext4:
  1379                           	opt stack 0
  1380  000748                     ___lwmod:
  1381                           	opt stack 29
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;incstack = 0
  1385  000748  0100               	movlb	0	; () banked
  1386  00074A  5176               	movf	___lwmod@divisor& (0+255),w,b
  1387  00074C  1177               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1388  00074E  B4D8               	btfsc	status,2,c
  1389  000750  D018               	goto	l700
  1390                           
  1391                           ; BSR set to: 0
  1392  000752  0E01               	movlw	1
  1393  000754  6F78               	movwf	___lwmod@counter& (0+255),b
  1394  000756  D004               	goto	l695
  1395  000758                     
  1396                           ; BSR set to: 0
  1397                           
  1398                           ; BSR set to: 0
  1399  000758  90D8               	bcf	status,0,c
  1400  00075A  3776               	rlcf	___lwmod@divisor& (0+255),f,b
  1401  00075C  3777               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1402  00075E  2B78               	incf	___lwmod@counter& (0+255),f,b
  1403  000760                     l695:
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ; BSR set to: 0
  1408  000760  AF77               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1409  000762  D7FA               	goto	l696
  1410  000764                     u1220:
  1411                           
  1412                           ; BSR set to: 0
  1413                           
  1414                           ; BSR set to: 0
  1415                           
  1416                           ; BSR set to: 0
  1417  000764  5176               	movf	___lwmod@divisor& (0+255),w,b
  1418  000766  5D74               	subwf	___lwmod@dividend& (0+255),w,b
  1419  000768  5177               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1420  00076A  5975               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1421  00076C  A0D8               	btfss	status,0,c
  1422  00076E  D004               	goto	l699
  1423                           
  1424                           ; BSR set to: 0
  1425  000770  5176               	movf	___lwmod@divisor& (0+255),w,b
  1426  000772  5F74               	subwf	___lwmod@dividend& (0+255),f,b
  1427  000774  5177               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1428  000776  5B75               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1429  000778                     l699:
  1430                           
  1431                           ; BSR set to: 0
  1432                           
  1433                           ; BSR set to: 0
  1434  000778  90D8               	bcf	status,0,c
  1435  00077A  3377               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1436  00077C  3376               	rrcf	___lwmod@divisor& (0+255),f,b
  1437                           
  1438                           ; BSR set to: 0
  1439  00077E  2F78               	decfsz	___lwmod@counter& (0+255),f,b
  1440  000780  D7F1               	goto	u1220
  1441  000782                     l700:
  1442                           
  1443                           ; BSR set to: 0
  1444                           
  1445                           ; BSR set to: 0
  1446  000782  C074  F074         	movff	___lwmod@dividend,?___lwmod
  1447  000786  C075  F075         	movff	___lwmod@dividend+1,?___lwmod+1
  1448                           
  1449                           ; BSR set to: 0
  1450  00078A  0012               	return		;funcret
  1451  00078C                     __end_of___lwmod:
  1452                           	opt stack 0
  1453                           tblptru	equ	0xFF8
  1454                           tblptrh	equ	0xFF7
  1455                           tblptrl	equ	0xFF6
  1456                           tablat	equ	0xFF5
  1457                           prodh	equ	0xFF4
  1458                           prodl	equ	0xFF3
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           postdec1	equ	0xFE5
  1462                           fsr1l	equ	0xFE1
  1463                           indf2	equ	0xFDF
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           
  1468 ;; *************** function ___lwdiv *****************
  1469 ;; Defined at:
  1470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  dividend        2    5[BANK0 ] unsigned int 
  1473 ;;  divisor         2    7[BANK0 ] unsigned int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  quotient        2   10[BANK0 ] unsigned int 
  1476 ;;  counter         1    9[BANK0 ] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  2    5[BANK0 ] unsigned int 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1486 ;;      Params:         0       4       0       0       0       0       0       0       0
  1487 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1489 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1490 ;;Total ram usage:        7 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    1
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text5
  1501  0006F4                     __ptext5:
  1502                           	opt stack 0
  1503  0006F4                     ___lwdiv:
  1504                           	opt stack 29
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;incstack = 0
  1508  0006F4  0E00               	movlw	0
  1509  0006F6  0100               	movlb	0	; () banked
  1510  0006F8  6F7F               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1511  0006FA  0E00               	movlw	0
  1512  0006FC  6F7E               	movwf	___lwdiv@quotient& (0+255),b
  1513                           
  1514                           ; BSR set to: 0
  1515  0006FE  517B               	movf	___lwdiv@divisor& (0+255),w,b
  1516  000700  117C               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1517  000702  B4D8               	btfsc	status,2,c
  1518  000704  D01C               	goto	l690
  1519                           
  1520                           ; BSR set to: 0
  1521  000706  0E01               	movlw	1
  1522  000708  6F7D               	movwf	___lwdiv@counter& (0+255),b
  1523  00070A  D004               	goto	l685
  1524  00070C                     
  1525                           ; BSR set to: 0
  1526                           
  1527                           ; BSR set to: 0
  1528  00070C  90D8               	bcf	status,0,c
  1529  00070E  377B               	rlcf	___lwdiv@divisor& (0+255),f,b
  1530  000710  377C               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1531  000712  2B7D               	incf	___lwdiv@counter& (0+255),f,b
  1532  000714                     l685:
  1533                           
  1534                           ; BSR set to: 0
  1535                           
  1536                           ; BSR set to: 0
  1537  000714  AF7C               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1538  000716  D7FA               	goto	l686
  1539  000718                     u1190:
  1540                           
  1541                           ; BSR set to: 0
  1542                           
  1543                           ; BSR set to: 0
  1544                           
  1545                           ; BSR set to: 0
  1546  000718  90D8               	bcf	status,0,c
  1547  00071A  377E               	rlcf	___lwdiv@quotient& (0+255),f,b
  1548  00071C  377F               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1549                           
  1550                           ; BSR set to: 0
  1551  00071E  517B               	movf	___lwdiv@divisor& (0+255),w,b
  1552  000720  5D79               	subwf	___lwdiv@dividend& (0+255),w,b
  1553  000722  517C               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1554  000724  597A               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1555  000726  A0D8               	btfss	status,0,c
  1556  000728  D005               	goto	l689
  1557                           
  1558                           ; BSR set to: 0
  1559  00072A  517B               	movf	___lwdiv@divisor& (0+255),w,b
  1560  00072C  5F79               	subwf	___lwdiv@dividend& (0+255),f,b
  1561  00072E  517C               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1562  000730  5B7A               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1563                           
  1564                           ; BSR set to: 0
  1565  000732  817E               	bsf	___lwdiv@quotient& (0+255),0,b
  1566  000734                     l689:
  1567                           
  1568                           ; BSR set to: 0
  1569                           
  1570                           ; BSR set to: 0
  1571  000734  90D8               	bcf	status,0,c
  1572  000736  337C               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1573  000738  337B               	rrcf	___lwdiv@divisor& (0+255),f,b
  1574                           
  1575                           ; BSR set to: 0
  1576  00073A  2F7D               	decfsz	___lwdiv@counter& (0+255),f,b
  1577  00073C  D7ED               	goto	u1190
  1578  00073E                     l690:
  1579                           
  1580                           ; BSR set to: 0
  1581                           
  1582                           ; BSR set to: 0
  1583  00073E  C07E  F079         	movff	___lwdiv@quotient,?___lwdiv
  1584  000742  C07F  F07A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1585                           
  1586                           ; BSR set to: 0
  1587  000746  0012               	return		;funcret
  1588  000748                     __end_of___lwdiv:
  1589                           	opt stack 0
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           prodh	equ	0xFF4
  1595                           prodl	equ	0xFF3
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postdec1	equ	0xFE5
  1599                           fsr1l	equ	0xFE1
  1600                           indf2	equ	0xFDF
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _InitApp *****************
  1606 ;; Defined at:
  1607 ;;		line 33 in file "user.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, status,2
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1621 ;;      Params:         0       0       0       0       0       0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1623 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1624 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1625 ;;Total ram usage:        0 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    1
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text6
  1636  00064C                     __ptext6:
  1637                           	opt stack 0
  1638  00064C                     _InitApp:
  1639                           	opt stack 29
  1640                           
  1641                           ;user.c: 35: PORTA = 0;
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;incstack = 0
  1645  00064C  0E00               	movlw	0
  1646  00064E  6E80               	movwf	3968,c	;volatile
  1647                           
  1648                           ;user.c: 36: LATA = 0;
  1649  000650  0E00               	movlw	0
  1650  000652  6E89               	movwf	3977,c	;volatile
  1651                           
  1652                           ;user.c: 37: PORTB = 0;
  1653  000654  0E00               	movlw	0
  1654  000656  6E81               	movwf	3969,c	;volatile
  1655                           
  1656                           ;user.c: 38: LATB = 0;
  1657  000658  0E00               	movlw	0
  1658  00065A  6E8A               	movwf	3978,c	;volatile
  1659                           
  1660                           ;user.c: 39: PORTC = 0;
  1661  00065C  0E00               	movlw	0
  1662  00065E  6E82               	movwf	3970,c	;volatile
  1663                           
  1664                           ;user.c: 40: LATC = 0;
  1665  000660  0E00               	movlw	0
  1666  000662  6E8B               	movwf	3979,c	;volatile
  1667                           
  1668                           ;user.c: 42: ADCON1 = 0b1101;
  1669  000664  0E0D               	movlw	13
  1670  000666  6EC1               	movwf	4033,c	;volatile
  1671                           
  1672                           ;user.c: 43: TRISAbits.TRISA0 = 1;
  1673  000668  8092               	bsf	3986,0,c	;volatile
  1674                           
  1675                           ;user.c: 44: ADCON0bits.CHS = 0;
  1676  00066A  94C2               	bcf	4034,2,c	;volatile
  1677  00066C  96C2               	bcf	4034,3,c	;volatile
  1678  00066E  98C2               	bcf	4034,4,c	;volatile
  1679  000670  9AC2               	bcf	4034,5,c	;volatile
  1680                           
  1681                           ;user.c: 45: ADCON2 = 0b10101100;
  1682  000672  0EAC               	movlw	172
  1683  000674  6EC0               	movwf	4032,c	;volatile
  1684                           
  1685                           ;user.c: 46: PIE1bits.ADIE = 1;
  1686  000676  8C9D               	bsf	3997,6,c	;volatile
  1687                           
  1688                           ;user.c: 47: PIR1bits.ADIF = 0;
  1689  000678  9C9E               	bcf	3998,6,c	;volatile
  1690                           
  1691                           ;user.c: 48: ADCON0bits.ADON = 1;
  1692  00067A  80C2               	bsf	4034,0,c	;volatile
  1693                           
  1694                           ;user.c: 50: TRISAbits.RA2 = 0;
  1695  00067C  9492               	bcf	3986,2,c	;volatile
  1696                           
  1697                           ;user.c: 51: TRISAbits.RA3 = 0;
  1698  00067E  9692               	bcf	3986,3,c	;volatile
  1699                           
  1700                           ;user.c: 52: TRISAbits.RA4 = 0;
  1701  000680  9892               	bcf	3986,4,c	;volatile
  1702                           
  1703                           ;user.c: 53: TRISAbits.RA5 = 0;
  1704  000682  9A92               	bcf	3986,5,c	;volatile
  1705                           
  1706                           ;user.c: 54: TRISCbits.RC0 = 0;
  1707  000684  9094               	bcf	3988,0,c	;volatile
  1708                           
  1709                           ;user.c: 55: TRISCbits.RC1 = 0;
  1710  000686  9294               	bcf	3988,1,c	;volatile
  1711                           
  1712                           ;user.c: 56: TRISBbits.RB7 = 0;
  1713  000688  9E93               	bcf	3987,7,c	;volatile
  1714                           
  1715                           ;user.c: 57: TRISBbits.RB6 = 0;
  1716  00068A  9C93               	bcf	3987,6,c	;volatile
  1717                           
  1718                           ;user.c: 58: TRISCbits.RC2 = 0;
  1719  00068C  9494               	bcf	3988,2,c	;volatile
  1720                           
  1721                           ;user.c: 60: RCONbits.IPEN = 0;
  1722  00068E  9ED0               	bcf	4048,7,c	;volatile
  1723                           
  1724                           ;user.c: 62: INTCONbits.GIE = 1;
  1725  000690  8EF2               	bsf	intcon,7,c	;volatile
  1726                           
  1727                           ;user.c: 63: INTCONbits.PEIE = 1;
  1728  000692  8CF2               	bsf	intcon,6,c	;volatile
  1729                           
  1730                           ;user.c: 64: INTCONbits.TMR0IE = 1;
  1731  000694  8AF2               	bsf	intcon,5,c	;volatile
  1732                           
  1733                           ;user.c: 65: INTCONbits.TMR0IF = 0;
  1734  000696  94F2               	bcf	intcon,2,c	;volatile
  1735                           
  1736                           ;user.c: 66: INTCON2bits.TMR0IP = 1;
  1737  000698  84F1               	bsf	intcon2,2,c	;volatile
  1738                           
  1739                           ;user.c: 67: T0CONbits.T08BIT = 1;
  1740  00069A  8CD5               	bsf	4053,6,c	;volatile
  1741                           
  1742                           ;user.c: 68: T0CONbits.T0CS = 0;
  1743  00069C  9AD5               	bcf	4053,5,c	;volatile
  1744                           
  1745                           ;user.c: 69: T0CONbits.PSA = 0;
  1746  00069E  96D5               	bcf	4053,3,c	;volatile
  1747                           
  1748                           ;user.c: 70: T0CONbits.T0PS = 0b101;
  1749  0006A0  50D5               	movf	4053,w,c	;volatile
  1750  0006A2  0BF8               	andlw	-8
  1751  0006A4  0905               	iorlw	5
  1752  0006A6  6ED5               	movwf	4053,c	;volatile
  1753                           
  1754                           ;user.c: 71: TMR0 = 0x6;
  1755  0006A8  0E00               	movlw	0
  1756  0006AA  6ED7               	movwf	4055,c	;volatile
  1757  0006AC  0E06               	movlw	6
  1758  0006AE  6ED6               	movwf	4054,c	;volatile
  1759                           
  1760                           ;user.c: 73: TRISBbits.RB1 = 1;
  1761  0006B0  8293               	bsf	3987,1,c	;volatile
  1762                           
  1763                           ;user.c: 74: TRISBbits.RB2 = 1;
  1764  0006B2  8493               	bsf	3987,2,c	;volatile
  1765                           
  1766                           ;user.c: 75: INTCON3bits.INT1IE = 1;
  1767  0006B4  86F0               	bsf	intcon3,3,c	;volatile
  1768                           
  1769                           ;user.c: 76: INTCON3bits.INT2IE = 1;
  1770  0006B6  88F0               	bsf	intcon3,4,c	;volatile
  1771                           
  1772                           ;user.c: 77: INTCON3bits.INT1IF = 0;
  1773  0006B8  90F0               	bcf	intcon3,0,c	;volatile
  1774                           
  1775                           ;user.c: 78: INTCON3bits.INT2IF = 0;
  1776  0006BA  92F0               	bcf	intcon3,1,c	;volatile
  1777                           
  1778                           ;user.c: 79: INTCON2bits.INTEDG1 = 0;
  1779  0006BC  9AF1               	bcf	intcon2,5,c	;volatile
  1780                           
  1781                           ;user.c: 80: INTCON2bits.INTEDG2 = 0;
  1782  0006BE  98F1               	bcf	intcon2,4,c	;volatile
  1783                           
  1784                           ;user.c: 82: TRISCbits.RC6 = 0;
  1785  0006C0  9C94               	bcf	3988,6,c	;volatile
  1786                           
  1787                           ;user.c: 83: TRISCbits.RC7 = 1;
  1788  0006C2  8E94               	bsf	3988,7,c	;volatile
  1789                           
  1790                           ;user.c: 84: BRGH = 1;
  1791  0006C4  84AC               	bsf	4012,2,c	;volatile
  1792                           
  1793                           ;user.c: 85: BRG16 = 1;
  1794  0006C6  86B8               	bsf	4024,3,c	;volatile
  1795                           
  1796                           ;user.c: 86: SPBRG = 207;
  1797  0006C8  0ECF               	movlw	207
  1798  0006CA  6EAF               	movwf	4015,c	;volatile
  1799                           
  1800                           ;user.c: 87: SPEN = 1;
  1801  0006CC  8EAB               	bsf	4011,7,c	;volatile
  1802                           
  1803                           ;user.c: 88: SYNC = 0;
  1804  0006CE  98AC               	bcf	4012,4,c	;volatile
  1805                           
  1806                           ;user.c: 89: TXEN = 1;
  1807  0006D0  8AAC               	bsf	4012,5,c	;volatile
  1808                           
  1809                           ;user.c: 90: CREN = 1;
  1810  0006D2  88AB               	bsf	4011,4,c	;volatile
  1811                           
  1812                           ;user.c: 91: TX9 = 0;
  1813  0006D4  9CAC               	bcf	4012,6,c	;volatile
  1814                           
  1815                           ;user.c: 92: RX9 = 0;
  1816  0006D6  9CAB               	bcf	4011,6,c	;volatile
  1817                           
  1818                           ;user.c: 93: RCIE = 1;
  1819  0006D8  8A9D               	bsf	3997,5,c	;volatile
  1820                           
  1821                           ;user.c: 94: TXIE = 0;
  1822  0006DA  989D               	bcf	3997,4,c	;volatile
  1823                           
  1824                           ;user.c: 96: PR2 = 99;
  1825  0006DC  0E63               	movlw	99
  1826  0006DE  6ECB               	movwf	4043,c	;volatile
  1827                           
  1828                           ;user.c: 97: CCP1CONbits.DC1B = 0;
  1829  0006E0  0ECF               	movlw	-49
  1830  0006E2  16BD               	andwf	4029,f,c	;volatile
  1831                           
  1832                           ;user.c: 98: T2CONbits.T2CKPS = 0b00;
  1833  0006E4  0EFC               	movlw	-4
  1834  0006E6  16CA               	andwf	4042,f,c	;volatile
  1835                           
  1836                           ;user.c: 99: T2CONbits.TMR2ON = 1;
  1837  0006E8  84CA               	bsf	4042,2,c	;volatile
  1838                           
  1839                           ;user.c: 100: CCP1CONbits.CCP1M = 0b1111;
  1840  0006EA  80BD               	bsf	4029,0,c	;volatile
  1841  0006EC  82BD               	bsf	4029,1,c	;volatile
  1842  0006EE  84BD               	bsf	4029,2,c	;volatile
  1843  0006F0  86BD               	bsf	4029,3,c	;volatile
  1844  0006F2  0012               	return		;funcret
  1845  0006F4                     __end_of_InitApp:
  1846                           	opt stack 0
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           prodh	equ	0xFF4
  1852                           prodl	equ	0xFF3
  1853                           intcon	equ	0xFF2
  1854                           intcon2	equ	0xFF1
  1855                           intcon3	equ	0xFF0
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           indf2	equ	0xFDF
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _ConfigureOscillator *****************
  1866 ;; Defined at:
  1867 ;;		line 24 in file "system.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1881 ;;      Params:         0       0       0       0       0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    1
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_main
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text7
  1896  000836                     __ptext7:
  1897                           	opt stack 0
  1898  000836                     _ConfigureOscillator:
  1899                           	opt stack 29
  1900                           
  1901                           ;system.c: 27: OSCCONbits.IRCF = 0b111;
  1902                           
  1903                           ;incstack = 0
  1904  000836  88D3               	bsf	4051,4,c	;volatile
  1905  000838  8AD3               	bsf	4051,5,c	;volatile
  1906  00083A  8CD3               	bsf	4051,6,c	;volatile
  1907                           
  1908                           ;system.c: 28: OSCCONbits.SCS = 0b11;
  1909  00083C  0E03               	movlw	3
  1910  00083E  12D3               	iorwf	4051,f,c	;volatile
  1911  000840  0012               	return		;funcret
  1912  000842                     __end_of_ConfigureOscillator:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           intcon	equ	0xFF2
  1921                           intcon2	equ	0xFF1
  1922                           intcon3	equ	0xFF0
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           postdec1	equ	0xFE5
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _high_isr *****************
  1933 ;; Defined at:
  1934 ;;		line 50 in file "interrupts.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1948 ;;      Params:         0       0       0       0       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1950 ;;      Temps:         19       0       0       0       0       0       0       0       0
  1951 ;;      Totals:        19       0       0       0       0       0       0       0       0
  1952 ;;Total ram usage:       19 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		Interrupt level 2
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	intcode
  1962  000008                     __pintcode:
  1963                           	opt stack 0
  1964  000008                     _high_isr:
  1965                           	opt stack 28
  1966                           
  1967                           ;incstack = 0
  1968  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1969  00000A  ED1A  F002         	call	int_func,f	;refresh shadow registers
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           prodh	equ	0xFF4
  1975                           prodl	equ	0xFF3
  1976                           intcon	equ	0xFF2
  1977                           intcon2	equ	0xFF1
  1978                           intcon3	equ	0xFF0
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           indf2	equ	0xFDF
  1984                           fsr2h	equ	0xFDA
  1985                           fsr2l	equ	0xFD9
  1986                           status	equ	0xFD8
  1987                           
  1988                           	psect	intcode_body
  1989  000434                     __pintcode_body:
  1990                           	opt stack 28
  1991  000434                     int_func:
  1992                           	opt stack 28
  1993  000434  0006               	pop		; remove dummy address from shadow register refresh
  1994  000436  CFFA F02B          	movff	pclath,??_high_isr+1
  1995  00043A  CFFB F02C          	movff	pclatu,??_high_isr+2
  1996  00043E  CFE9 F02D          	movff	fsr0l,??_high_isr+3
  1997  000442  CFEA F02E          	movff	fsr0h,??_high_isr+4
  1998  000446  CFE1 F02F          	movff	fsr1l,??_high_isr+5
  1999  00044A  CFE2 F030          	movff	fsr1h,??_high_isr+6
  2000  00044E  CFD9 F031          	movff	fsr2l,??_high_isr+7
  2001  000452  CFDA F032          	movff	fsr2h,??_high_isr+8
  2002  000456  CFF3 F033          	movff	prodl,??_high_isr+9
  2003  00045A  CFF4 F034          	movff	prodh,??_high_isr+10
  2004  00045E  CFF6 F035          	movff	tblptrl,??_high_isr+11
  2005  000462  CFF7 F036          	movff	tblptrh,??_high_isr+12
  2006  000466  CFF8 F037          	movff	tblptru,??_high_isr+13
  2007  00046A  CFF5 F038          	movff	tablat,??_high_isr+14
  2008  00046E  C04C  F039         	movff	btemp,??_high_isr+15
  2009  000472  C04D  F03A         	movff	btemp+1,??_high_isr+16
  2010  000476  C04E  F03B         	movff	btemp+2,??_high_isr+17
  2011  00047A  C04F  F03C         	movff	btemp+3,??_high_isr+18
  2012                           
  2013                           ;interrupts.c: 51: if (INTCONbits.TMR0IF) {
  2014  00047E  A4F2               	btfss	intcon,2,c	;volatile
  2015  000480  D07B               	goto	i2l75
  2016                           
  2017                           ;interrupts.c: 53: INTCONbits.TMR0IF = 0;
  2018  000482  94F2               	bcf	intcon,2,c	;volatile
  2019                           
  2020                           ;interrupts.c: 54: TMR0 = 250;
  2021  000484  0E00               	movlw	0
  2022  000486  6ED7               	movwf	4055,c	;volatile
  2023  000488  0EFA               	movlw	250
  2024  00048A  6ED6               	movwf	4054,c	;volatile
  2025                           
  2026                           ;interrupts.c: 55: MOT_1_count++;
  2027  00048C  4A13               	infsnz	_MOT_1_count,f,c
  2028  00048E  2A14               	incf	_MOT_1_count+1,f,c
  2029                           
  2030                           ;interrupts.c: 56: MOT_2_count++;
  2031  000490  4A11               	infsnz	_MOT_2_count,f,c
  2032  000492  2A12               	incf	_MOT_2_count+1,f,c
  2033                           
  2034                           ;interrupts.c: 57: MOT_3_count++;
  2035  000494  4A0F               	infsnz	_MOT_3_count,f,c
  2036  000496  2A10               	incf	_MOT_3_count+1,f,c
  2037                           
  2038                           ;interrupts.c: 58: MOT_4_count++;
  2039  000498  4A0D               	infsnz	_MOT_4_count,f,c
  2040  00049A  2A0E               	incf	_MOT_4_count+1,f,c
  2041                           
  2042                           ;interrupts.c: 60: if (MOT_1) {
  2043  00049C  504B               	movf	_MOT_1,w,c
  2044  00049E  B4D8               	btfsc	status,2,c
  2045  0004A0  D019               	goto	i2l77
  2046                           
  2047                           ;interrupts.c: 61: if (MOT_1_count == count_1) {
  2048  0004A2  5047               	movf	_count_1,w,c
  2049  0004A4  1813               	xorwf	_MOT_1_count,w,c
  2050  0004A6  E116               	bnz	i2l1383
  2051  0004A8  5048               	movf	_count_1+1,w,c
  2052  0004AA  1814               	xorwf	_MOT_1_count+1,w,c
  2053  0004AC  A4D8               	btfss	status,2,c
  2054  0004AE  D012               	goto	i2l77
  2055                           
  2056                           ;interrupts.c: 62: LATAbits.LA3 = !PORTAbits.RA3;
  2057  0004B0  B680               	btfsc	3968,3,c	;volatile
  2058  0004B2  D003               	goto	i2u69_40
  2059  0004B4  6A2A               	clrf	??_high_isr& (0+255),c
  2060  0004B6  2A2A               	incf	??_high_isr& (0+255),f,c
  2061  0004B8  D001               	goto	i2u70_48
  2062  0004BA                     i2u69_40:
  2063  0004BA  6A2A               	clrf	??_high_isr& (0+255),c
  2064  0004BC                     i2u70_48:
  2065  0004BC  462A               	rlncf	??_high_isr,f,c
  2066  0004BE  462A               	rlncf	??_high_isr,f,c
  2067  0004C0  462A               	rlncf	??_high_isr,f,c
  2068  0004C2  5089               	movf	3977,w,c	;volatile
  2069  0004C4  182A               	xorwf	??_high_isr,w,c
  2070  0004C6  0BF7               	andlw	-9
  2071  0004C8  182A               	xorwf	??_high_isr,w,c
  2072  0004CA  6E89               	movwf	3977,c	;volatile
  2073                           
  2074                           ;interrupts.c: 63: MOT_1_count = 0;
  2075  0004CC  0E00               	movlw	0
  2076  0004CE  6E14               	movwf	_MOT_1_count+1,c
  2077  0004D0  0E00               	movlw	0
  2078  0004D2  6E13               	movwf	_MOT_1_count,c
  2079  0004D4                     i2l77:
  2080  0004D4                     i2l1383:
  2081                           
  2082                           ;interrupts.c: 64: }
  2083                           ;interrupts.c: 65: }
  2084                           ;interrupts.c: 66: if (MOT_2) {
  2085  0004D4  504A               	movf	_MOT_2,w,c
  2086  0004D6  B4D8               	btfsc	status,2,c
  2087  0004D8  D018               	goto	i2l79
  2088                           
  2089                           ;interrupts.c: 67: if (MOT_2_count == count_2) {
  2090  0004DA  5045               	movf	_count_2,w,c
  2091  0004DC  1811               	xorwf	_MOT_2_count,w,c
  2092  0004DE  E115               	bnz	i2l1391
  2093  0004E0  5046               	movf	_count_2+1,w,c
  2094  0004E2  1812               	xorwf	_MOT_2_count+1,w,c
  2095  0004E4  A4D8               	btfss	status,2,c
  2096  0004E6  D011               	goto	i2l79
  2097                           
  2098                           ;interrupts.c: 68: LATAbits.LA5 = !PORTAbits.RA5;
  2099  0004E8  BA80               	btfsc	3968,5,c	;volatile
  2100  0004EA  D003               	goto	i2u73_40
  2101  0004EC  6A2A               	clrf	??_high_isr& (0+255),c
  2102  0004EE  2A2A               	incf	??_high_isr& (0+255),f,c
  2103  0004F0  D001               	goto	i2u74_48
  2104  0004F2                     i2u73_40:
  2105  0004F2  6A2A               	clrf	??_high_isr& (0+255),c
  2106  0004F4                     i2u74_48:
  2107  0004F4  3A2A               	swapf	??_high_isr,f,c
  2108  0004F6  462A               	rlncf	??_high_isr,f,c
  2109  0004F8  5089               	movf	3977,w,c	;volatile
  2110  0004FA  182A               	xorwf	??_high_isr,w,c
  2111  0004FC  0BDF               	andlw	-33
  2112  0004FE  182A               	xorwf	??_high_isr,w,c
  2113  000500  6E89               	movwf	3977,c	;volatile
  2114                           
  2115                           ;interrupts.c: 69: MOT_2_count = 0;
  2116  000502  0E00               	movlw	0
  2117  000504  6E12               	movwf	_MOT_2_count+1,c
  2118  000506  0E00               	movlw	0
  2119  000508  6E11               	movwf	_MOT_2_count,c
  2120  00050A                     i2l79:
  2121  00050A                     i2l1391:
  2122                           
  2123                           ;interrupts.c: 70: }
  2124                           ;interrupts.c: 71: }
  2125                           ;interrupts.c: 72: if (MOT_3) {
  2126  00050A  5024               	movf	_MOT_3,w,c
  2127  00050C  B4D8               	btfsc	status,2,c
  2128  00050E  D017               	goto	i2l81
  2129                           
  2130                           ;interrupts.c: 73: if (MOT_3_count == count_3) {
  2131  000510  5043               	movf	_count_3,w,c
  2132  000512  180F               	xorwf	_MOT_3_count,w,c
  2133  000514  E114               	bnz	i2l1399
  2134  000516  5044               	movf	_count_3+1,w,c
  2135  000518  1810               	xorwf	_MOT_3_count+1,w,c
  2136  00051A  A4D8               	btfss	status,2,c
  2137  00051C  D010               	goto	i2l81
  2138                           
  2139                           ;interrupts.c: 74: LATCbits.LC1 = !PORTCbits.RC1;
  2140  00051E  B282               	btfsc	3970,1,c	;volatile
  2141  000520  D003               	goto	i2u77_40
  2142  000522  6A2A               	clrf	??_high_isr& (0+255),c
  2143  000524  2A2A               	incf	??_high_isr& (0+255),f,c
  2144  000526  D001               	goto	i2u78_48
  2145  000528                     i2u77_40:
  2146  000528  6A2A               	clrf	??_high_isr& (0+255),c
  2147  00052A                     i2u78_48:
  2148  00052A  462A               	rlncf	??_high_isr,f,c
  2149  00052C  508B               	movf	3979,w,c	;volatile
  2150  00052E  182A               	xorwf	??_high_isr,w,c
  2151  000530  0BFD               	andlw	-3
  2152  000532  182A               	xorwf	??_high_isr,w,c
  2153  000534  6E8B               	movwf	3979,c	;volatile
  2154                           
  2155                           ;interrupts.c: 75: MOT_3_count = 0;
  2156  000536  0E00               	movlw	0
  2157  000538  6E10               	movwf	_MOT_3_count+1,c
  2158  00053A  0E00               	movlw	0
  2159  00053C  6E0F               	movwf	_MOT_3_count,c
  2160  00053E                     i2l81:
  2161  00053E                     i2l1399:
  2162                           
  2163                           ;interrupts.c: 76: }
  2164                           ;interrupts.c: 77: }
  2165                           ;interrupts.c: 78: if (MOT_4) {
  2166  00053E  5049               	movf	_MOT_4,w,c
  2167  000540  B4D8               	btfsc	status,2,c
  2168  000542  D05E               	goto	i2l98
  2169                           
  2170                           ;interrupts.c: 79: if (MOT_4_count == count_4) {
  2171  000544  5041               	movf	_count_4,w,c
  2172  000546  180D               	xorwf	_MOT_4_count,w,c
  2173  000548  E15B               	bnz	i2l84
  2174  00054A  5042               	movf	_count_4+1,w,c
  2175  00054C  180E               	xorwf	_MOT_4_count+1,w,c
  2176  00054E  A4D8               	btfss	status,2,c
  2177  000550  D057               	goto	i2l98
  2178                           
  2179                           ;interrupts.c: 80: LATBbits.LB6 = !PORTBbits.RB6;
  2180  000552  BC81               	btfsc	3969,6,c	;volatile
  2181  000554  D003               	goto	i2u81_40
  2182  000556  6A2A               	clrf	??_high_isr& (0+255),c
  2183  000558  2A2A               	incf	??_high_isr& (0+255),f,c
  2184  00055A  D001               	goto	i2u82_48
  2185  00055C                     i2u81_40:
  2186  00055C  6A2A               	clrf	??_high_isr& (0+255),c
  2187  00055E                     i2u82_48:
  2188  00055E  3A2A               	swapf	??_high_isr,f,c
  2189  000560  462A               	rlncf	??_high_isr,f,c
  2190  000562  462A               	rlncf	??_high_isr,f,c
  2191  000564  508A               	movf	3978,w,c	;volatile
  2192  000566  182A               	xorwf	??_high_isr,w,c
  2193  000568  0BBF               	andlw	-65
  2194  00056A  182A               	xorwf	??_high_isr,w,c
  2195  00056C  6E8A               	movwf	3978,c	;volatile
  2196                           
  2197                           ;interrupts.c: 81: MOT_4_count = 0;
  2198  00056E  0E00               	movlw	0
  2199  000570  6E0E               	movwf	_MOT_4_count+1,c
  2200  000572  0E00               	movlw	0
  2201  000574  6E0D               	movwf	_MOT_4_count,c
  2202                           
  2203                           ;interrupts.c: 82: }
  2204                           ;interrupts.c: 83: }
  2205                           ;interrupts.c: 85: } else if (PIR1bits.RCIF) {
  2206  000576  D044               	goto	i2l98
  2207  000578                     i2l75:
  2208  000578  AA9E               	btfss	3998,5,c	;volatile
  2209  00057A  D01A               	goto	i2l85
  2210                           
  2211                           ;interrupts.c: 87: PIR1bits.RCIF = 0;
  2212  00057C  9A9E               	bcf	3998,5,c	;volatile
  2213                           
  2214                           ;interrupts.c: 88: palabra[n] = RCREG;
  2215  00057E  0E60               	movlw	low _palabra
  2216  000580  241B               	addwf	_n,w,c
  2217  000582  6ED9               	movwf	fsr2l,c
  2218  000584  0E00               	movlw	high _palabra
  2219  000586  201C               	addwfc	_n+1,w,c
  2220  000588  6EDA               	movwf	fsr2h,c
  2221  00058A  CFAE FFDF          	movff	4014,indf2	;volatile
  2222                           
  2223                           ;interrupts.c: 89: n++;
  2224  00058E  4A1B               	infsnz	_n,f,c
  2225  000590  2A1C               	incf	_n+1,f,c
  2226                           
  2227                           ;interrupts.c: 90: if (RCREG == '\n') {
  2228  000592  0E0A               	movlw	10
  2229  000594  18AE               	xorwf	4014,w,c	;volatile
  2230  000596  A4D8               	btfss	status,2,c
  2231  000598  D033               	goto	i2l98
  2232                           
  2233                           ;interrupts.c: 91: TXREG = palabra[0];
  2234  00059A  C060  FFAD         	movff	_palabra,4013	;volatile
  2235  00059E  A89E               	btfss	3998,4,c	;volatile
  2236  0005A0  D7FE               	goto	i2l88
  2237                           
  2238                           ;interrupts.c: 93: recibi = 1;
  2239  0005A2  0E01               	movlw	1
  2240  0005A4  6E22               	movwf	_recibi,c
  2241                           
  2242                           ;interrupts.c: 94: n = 0;
  2243  0005A6  0E00               	movlw	0
  2244  0005A8  6E1C               	movwf	_n+1,c
  2245  0005AA  0E00               	movlw	0
  2246  0005AC  6E1B               	movwf	_n,c
  2247                           
  2248                           ;interrupts.c: 95: }
  2249                           ;interrupts.c: 96: } else if (PIR1bits.ADIF) {
  2250  0005AE  D028               	goto	i2l98
  2251  0005B0                     i2l85:
  2252  0005B0  AC9E               	btfss	3998,6,c	;volatile
  2253  0005B2  D017               	goto	i2l91
  2254                           
  2255                           ;interrupts.c: 98: PIR1bits.ADIF = 0;
  2256  0005B4  9C9E               	bcf	3998,6,c	;volatile
  2257                           
  2258                           ;interrupts.c: 99: if (ADCON0bits.CHS == 0b0000) {
  2259  0005B6  30C2               	rrcf	4034,w,c	;volatile
  2260  0005B8  32E8               	rrcf	wreg,f,c
  2261  0005BA  0B0F               	andlw	15
  2262  0005BC  0900               	iorlw	0
  2263  0005BE  A4D8               	btfss	status,2,c
  2264  0005C0  D005               	goto	i2l92
  2265                           
  2266                           ;interrupts.c: 100: ADC_value_press = ADRES;
  2267  0005C2  CFC3 F017          	movff	4035,_ADC_value_press	;volatile
  2268  0005C6  CFC4 F018          	movff	4036,_ADC_value_press+1	;volatile
  2269                           
  2270                           ;interrupts.c: 101: } else if (ADCON0bits.CHS == 0b0001) {
  2271  0005CA  D01A               	goto	i2l98
  2272  0005CC                     i2l92:
  2273  0005CC  30C2               	rrcf	4034,w,c	;volatile
  2274  0005CE  32E8               	rrcf	wreg,f,c
  2275  0005D0  0B0F               	andlw	15
  2276  0005D2  06E8               	decf	wreg,f,c
  2277  0005D4  A4D8               	btfss	status,2,c
  2278  0005D6  D014               	goto	i2l98
  2279                           
  2280                           ;interrupts.c: 102: ADC_value_dist = ADRES;
  2281  0005D8  CFC3 F015          	movff	4035,_ADC_value_dist	;volatile
  2282  0005DC  CFC4 F016          	movff	4036,_ADC_value_dist+1	;volatile
  2283                           
  2284                           ;interrupts.c: 103: }
  2285                           ;interrupts.c: 108: } else if (INTCON3bits.INT1IF) {
  2286  0005E0  D00F               	goto	i2l98
  2287  0005E2                     i2l91:
  2288  0005E2  A0F0               	btfss	intcon3,0,c	;volatile
  2289  0005E4  D005               	goto	i2l96
  2290                           
  2291                           ;interrupts.c: 110: INTCON3bits.INT1IF = 0;
  2292  0005E6  90F0               	bcf	intcon3,0,c	;volatile
  2293  0005E8                     i2l1431:
  2294                           
  2295                           ;interrupts.c: 113: DIR_3 = !DIR_3;
  2296  0005E8  5023               	movf	_DIR_3,w,c
  2297  0005EA  A4D8               	btfss	status,2,c
  2298  0005EC  D007               	goto	i2u93_40
  2299  0005EE  D004               	goto	i2u93_41
  2300  0005F0                     i2l96:
  2301  0005F0  A2F0               	btfss	intcon3,1,c	;volatile
  2302  0005F2  D006               	goto	i2l98
  2303                           
  2304                           ;interrupts.c: 117: INTCON3bits.INT2IF = 0;
  2305  0005F4  92F0               	bcf	intcon3,1,c	;volatile
  2306  0005F6  D7F8               	goto	i2l1431
  2307  0005F8                     i2u93_41:
  2308  0005F8  0E01               	movlw	1
  2309  0005FA  D001               	goto	i2u94_40
  2310  0005FC                     i2u93_40:
  2311  0005FC  0E00               	movlw	0
  2312  0005FE                     i2u94_40:
  2313  0005FE  6E23               	movwf	_DIR_3,c
  2314  000600                     i2l98:
  2315  000600                     i2l84:
  2316  000600  C03C  F04F         	movff	??_high_isr+18,btemp+3
  2317  000604  C03B  F04E         	movff	??_high_isr+17,btemp+2
  2318  000608  C03A  F04D         	movff	??_high_isr+16,btemp+1
  2319  00060C  C039  F04C         	movff	??_high_isr+15,btemp
  2320  000610  C038  FFF5         	movff	??_high_isr+14,tablat
  2321  000614  C037  FFF8         	movff	??_high_isr+13,tblptru
  2322  000618  C036  FFF7         	movff	??_high_isr+12,tblptrh
  2323  00061C  C035  FFF6         	movff	??_high_isr+11,tblptrl
  2324  000620  C034  FFF4         	movff	??_high_isr+10,prodh
  2325  000624  C033  FFF3         	movff	??_high_isr+9,prodl
  2326  000628  C032  FFDA         	movff	??_high_isr+8,fsr2h
  2327  00062C  C031  FFD9         	movff	??_high_isr+7,fsr2l
  2328  000630  C030  FFE2         	movff	??_high_isr+6,fsr1h
  2329  000634  C02F  FFE1         	movff	??_high_isr+5,fsr1l
  2330  000638  C02E  FFEA         	movff	??_high_isr+4,fsr0h
  2331  00063C  C02D  FFE9         	movff	??_high_isr+3,fsr0l
  2332  000640  C02C  FFFB         	movff	??_high_isr+2,pclatu
  2333  000644  C02B  FFFA         	movff	??_high_isr+1,pclath
  2334  000648  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2335  00064A  0011               	retfie		f
  2336  00064C                     __end_of_high_isr:
  2337                           	opt stack 0
  2338  0000                     pclatu	equ	0xFFB
  2339                           pclath	equ	0xFFA
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           intcon2	equ	0xFF1
  2348                           intcon3	equ	0xFF0
  2349                           postinc0	equ	0xFEE
  2350                           fsr0h	equ	0xFEA
  2351                           fsr0l	equ	0xFE9
  2352                           wreg	equ	0xFE8
  2353                           postdec1	equ	0xFE5
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           indf2	equ	0xFDF
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           pclatu	equ	0xFFB
  2361                           pclath	equ	0xFFA
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           intcon	equ	0xFF2
  2369                           intcon2	equ	0xFF1
  2370                           intcon3	equ	0xFF0
  2371                           postinc0	equ	0xFEE
  2372                           fsr0h	equ	0xFEA
  2373                           fsr0l	equ	0xFE9
  2374                           wreg	equ	0xFE8
  2375                           postdec1	equ	0xFE5
  2376                           fsr1h	equ	0xFE2
  2377                           fsr1l	equ	0xFE1
  2378                           indf2	equ	0xFDF
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383                           	psect	rparam
  2384  0000                     pclatu	equ	0xFFB
  2385                           pclath	equ	0xFFA
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           intcon2	equ	0xFF1
  2394                           intcon3	equ	0xFF0
  2395                           postinc0	equ	0xFEE
  2396                           fsr0h	equ	0xFEA
  2397                           fsr0l	equ	0xFE9
  2398                           wreg	equ	0xFE8
  2399                           postdec1	equ	0xFE5
  2400                           fsr1h	equ	0xFE2
  2401                           fsr1l	equ	0xFE1
  2402                           indf2	equ	0xFDF
  2403                           fsr2h	equ	0xFDA
  2404                           fsr2l	equ	0xFD9
  2405                           status	equ	0xFD8
  2406                           
  2407                           	psect	temp
  2408  00004C                     btemp:
  2409                           	opt stack 0
  2410  00004C                     	ds	1
  2411  0000                     int$flags	set	btemp
  2412  0000                     wtemp6	set	btemp+1
  2413                           pclatu	equ	0xFFB
  2414                           pclath	equ	0xFFA
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           intcon	equ	0xFF2
  2422                           intcon2	equ	0xFF1
  2423                           intcon3	equ	0xFF0
  2424                           postinc0	equ	0xFEE
  2425                           fsr0h	equ	0xFEA
  2426                           fsr0l	equ	0xFE9
  2427                           wreg	equ	0xFE8
  2428                           postdec1	equ	0xFE5
  2429                           fsr1h	equ	0xFE2
  2430                           fsr1l	equ	0xFE1
  2431                           indf2	equ	0xFDF
  2432                           fsr2h	equ	0xFDA
  2433                           fsr2l	equ	0xFD9
  2434                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         61
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     19      75
    BANK0           160     18      38
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    send_String@out	PTR const unsigned char  size(2) Largest target is 5
		 -> send(COMRAM[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___lwdiv
    _send_String->_trans_Char
    ___lwdiv->___lwmod

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    4953
                                             12 BANK0      6     6      0
                _ConfigureOscillator
                            _InitApp
                            ___lwdiv
                            ___lwmod
                             ___wmul
                        _send_String
 ---------------------------------------------------------------------------------
 (1) _send_String                                          2     0      2     186
                                              1 BANK0      2     0      2
                         _trans_Char
 ---------------------------------------------------------------------------------
 (2) _trans_Char                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    1312
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     961
                                              5 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _high_isr                                            19    19      0       0
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___lwdiv
     ___lwmod (ARG)
   ___lwmod
   ___wmul
   _send_String
     _trans_Char

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      26       5       23.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     13      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      71      20        0.0%
DATA                 0      0      71       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 14 23:44:58 2019

                           _n 001B           ___wmul@multiplicand 0076                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l202 080C                           l203 07F8  
                         l172 001A                           l181 0298                           l173 02DE  
                         l174 009C                           l176 026E                           l186 02C6  
                         l178 02A6                           l179 0286                           l700 0782  
                         l690 073E                           l685 0714                           l686 070C  
                         l695 0760                           l696 0758                           l689 0734  
                         l699 0778                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           _RX9 007D5E                           _TX9 007D66  
                __CFG_BOR$OFF 000000                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l1517 0820                          _BRGH 007D62  
                        _CREN 007D5C                          u1220 0764                          u1400 02D8  
                        u1410 02DA                          u1245 0032                          _LATA 000F89  
                        u1190 0718                          u1430 0308                          u1246 0034  
                        _LATB 000F8A                          u1255 003C                          _LATC 000F8B  
                        u1256 003E                          u1265 0046                          u1370 02C0  
                        u1266 0048                          u1275 0050                          u1380 02C2  
                        u1276 0052                          u1448 030C                          u1457 02EA  
                        _RCIE 007CED                          i2l81 053E                          i2l91 05E2  
                        i2l75 0578                          i2l84 0600                          i2l92 05CC  
                        i2l85 05B0                          i2l77 04D4                          i2l79 050A  
                        i2l96 05F0                          i2l88 059E                          i2l98 0600  
                        _TMR0 000FD6                          _SPEN 007D5F                          _TXIE 007CEC  
                        _TXIF 007CF4                          _TXEN 007D65                          _SYNC 007D64  
                        _main 0012                          _send 0025                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 004C                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000               __end_of_InitApp 06F4                 __CFG_PLLDIV$1 000000  
              __CFG_CCP2MX$ON 000000                         ?_main 002A                         _ADRES 000FC3  
                       _BRG16 007DC3                         _DIR_1 0020                         _DIR_2 001F  
                       _DIR_3 0023                         _DIR_4 001E               __end_of___lwdiv 0748  
             __end_of___lwmod 078C                         _RCREG 000FAE                         _MOT_1 004B  
                       _MOT_2 004A                         _MOT_3 0024                         _MOT_4 0049  
                       _SPBRG 000FAF                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                 __CFG_USBDIV$1 000000                         _TXREG 000FAD  
         _ConfigureOscillator 0836                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _speed 0001                         _turns 0003                         pclath 000FFA  
                       tablat 000FF5                         status 000FD8                         wtemp6 004D  
        ?_ConfigureOscillator 002A               __initialization 078C                  __end_of_main 0434  
                      ??_main 0080                 __activetblptr 000000                  ?_send_String 0075  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        _CCPR1L 000FBE  
                      _GODONE 007E11                        i2l1431 05E8                        i2l1391 050A  
                      i2l1383 04D4                        i2l1399 053E                     ??_InitApp 003D  
       ??_ConfigureOscillator 003D                __CFG_XINST$OFF 000000              __end_of_high_isr 064C  
                      ___wmul 07CE                     ??___lwdiv 003D                     ??___lwmod 003D  
                      _length 0005                        _recibi 0022                        clear_0 07B2  
                      clear_1 07BE                        _motor1 003F                        _motor2 000B  
                __pdataCOMRAM 003D                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0060       __end_of__initialization 07C4  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                __pcstackCOMRAM 002A  
               trans_Char@out 0074                    __pbssBANK0 0060                    __pnvCOMRAM 0049  
                     ?___wmul 0074                       i2u70_48 04BC                       i2u81_40 055C  
                     i2u73_40 04F2                       i2u82_48 055E                       i2u74_48 04F4  
                     i2u93_40 05FC                       i2u77_40 0528                       i2u69_40 04BA  
                     i2u93_41 05F8                       i2u94_40 05FE                       i2u78_48 052A  
        __size_of_send_String 0026                     ?_high_isr 002A               __CFG_VREGEN$OFF 000000  
                     _InitApp 064C                       __Hparam 0000                       __Lparam 0000  
             __size_of___wmul 0028                       ___lwdiv 06F4                       ___lwmod 0748  
                     _caliber 0009               __CFG_STVREN$OFF 000000                       __pcinit 078C  
                     __ramtop 0800                       __ptext0 0012                       __ptext1 07F6  
                     __ptext2 081C                       __ptext3 07CE                       __ptext4 0748  
                     __ptext5 06F4                       __ptext6 064C                       __ptext7 0836  
                   _T0CONbits 000FD5                       _count_1 0047                       _count_2 0045  
                     _count_3 0043                       _count_4 0041                       _palabra 0060  
                   _T2CONbits 000FCA                    ??_high_isr 002A                __pintcode_body 0434  
        end_of_initialization 07C4                       int_func 0434                       postdec1 000FE5  
                     postinc0 000FEE                     _PORTAbits 000F80                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                    _trans_Char 081C   __end_of_ConfigureOscillator 0842  
                 _CCP1CONbits 000FBD                __end_of___wmul 07F6                 __pidataCOMRAM 082A  
         start_initialization 078C                      ??___wmul 003D              __CFG_LPT1OSC$OFF 000000  
                 __pbssCOMRAM 0001                 __pcstackBANK0 0074                   ?_trans_Char 002A  
           __size_of_high_isr 0644                      ?_InitApp 002A                     _main$1856 0084  
                   _main$1857 0082              ___lwdiv@dividend 0079                     __pintcode 0008  
                    ?___lwdiv 0079                      ?___lwmod 0074                 ??_send_String 003D  
                   _busy_flag 001D              ___lwdiv@quotient 007E                ___wmul@product 0078  
                    _LATAbits 000F89                      _LATBbits 000F8A                      _LATCbits 000F8B  
                    _PIE1bits 000F9D                      _RA0state 0021                      _PIR1bits 000F9E  
                    _RCONbits 000FD0              __CFG_WDTPS$32768 000000           __size_of_trans_Char 000E  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0074                      _PWM_duty 003D  
             _ADC_value_press 0017                   _INTCON2bits 000FF1                   _INTCON3bits 000FF0  
                   copy_data0 07A0           __end_of_send_String 081C              __size_of_InitApp 00A8  
                    __Hrparam 0000                      __Lrparam 0000              __size_of___lwdiv 0054  
            __size_of___lwmod 0044                      _diameter 0007               ___lwdiv@divisor 007B  
             ___lwdiv@counter 007D                      _high_isr 0008                 __size_of_main 0422  
__size_of_ConfigureOscillator 000C                      _overflow 0019                      int$flags 004C  
              _ADC_value_dist 0015         __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2  
                 _send_String 07F6                  ??_trans_Char 003D                   _MOT_1_count 0013  
                 _MOT_2_count 0011                   _MOT_3_count 000F                   _MOT_4_count 000D  
                    intlevel2 0000              ___lwmod@dividend 0074                send_String@out 0075  
                  _OSCCONbits 000FD3            __end_of_trans_Char 082A           __CFG_FOSC$INTOSC_EC 000000  
             ___lwmod@divisor 0076               ___lwmod@counter 0078  

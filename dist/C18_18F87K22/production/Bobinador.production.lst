

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 12 09:41:33 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  0004B4                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _PWM_duty
    60  0004B4  0032               	dw	50
    61                           
    62                           ;initializer for _motor1
    63  0004B6  0001               	dw	1
    64  0000                     _ADRES	set	4035
    65  0000                     _TMR0	set	4054
    66  0000                     _T2CONbits	set	4042
    67  0000                     _CCP1CONbits	set	4029
    68  0000                     _PR2	set	4043
    69  0000                     _SPBRG	set	4015
    70  0000                     _T0CONbits	set	4053
    71  0000                     _INTCON2bits	set	4081
    72  0000                     _RCONbits	set	4048
    73  0000                     _TRISBbits	set	3987
    74  0000                     _TRISCbits	set	3988
    75  0000                     _PIE1bits	set	3997
    76  0000                     _ADCON2	set	4032
    77  0000                     _TRISAbits	set	3986
    78  0000                     _ADCON1	set	4033
    79  0000                     _LATC	set	3979
    80  0000                     _PORTC	set	3970
    81  0000                     _LATB	set	3978
    82  0000                     _PORTB	set	3969
    83  0000                     _LATA	set	3977
    84  0000                     _PORTA	set	3968
    85  0000                     _OSCCONbits	set	4051
    86  0000                     _CCPR1L	set	4030
    87  0000                     _INTCON3bits	set	4080
    88  0000                     _ADCON0bits	set	4034
    89  0000                     _TXREG	set	4013
    90  0000                     _RCREG	set	4014
    91  0000                     _PIR1bits	set	3998
    92  0000                     _PORTAbits	set	3968
    93  0000                     _LATAbits	set	3977
    94  0000                     _INTCONbits	set	4082
    95  0000                     _TXIE	set	31980
    96  0000                     _RCIE	set	31981
    97  0000                     _RX9	set	32094
    98  0000                     _TX9	set	32102
    99  0000                     _CREN	set	32092
   100  0000                     _TXEN	set	32101
   101  0000                     _SYNC	set	32100
   102  0000                     _SPEN	set	32095
   103  0000                     _BRG16	set	32195
   104  0000                     _BRGH	set	32098
   105  0000                     _GODONE	set	32273
   106  0000                     _TXIF	set	31988
   107                           
   108                           ; #config settings
   109  0000                     
   110                           	psect	cinit
   111  00044C                     __pcinit:
   112                           	opt stack 0
   113  00044C                     start_initialization:
   114                           	opt stack 0
   115  00044C                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Initialize objects allocated to COMRAM (4 bytes)
   119                           ; load TBLPTR registers with __pidataCOMRAM
   120  00044C  0EB4               	movlw	low __pidataCOMRAM
   121  00044E  6EF6               	movwf	tblptrl,c
   122  000450  0E04               	movlw	high __pidataCOMRAM
   123  000452  6EF7               	movwf	tblptrh,c
   124  000454  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   125  000456  6EF8               	movwf	tblptru,c
   126  000458  EE00  F048         	lfsr	0,__pdataCOMRAM
   127  00045C  EE10 F004          	lfsr	1,4
   128  000460                     copy_data0:
   129  000460  0009               	tblrd		*+
   130  000462  CFF5 FFEE          	movff	tablat,postinc0
   131  000466  50E5               	movf	postdec1,w,c
   132  000468  50E1               	movf	fsr1l,w,c
   133  00046A  E1FA               	bnz	copy_data0
   134                           
   135                           ; Clear objects allocated to COMRAM (44 bytes)
   136  00046C  EE00  F001         	lfsr	0,__pbssCOMRAM
   137  000470  0E2C               	movlw	44
   138  000472                     clear_0:
   139  000472  6AEE               	clrf	postinc0,c
   140  000474  06E8               	decf	wreg,f,c
   141  000476  E1FD               	bnz	clear_0
   142  000478                     end_of_initialization:
   143                           	opt stack 0
   144  000478                     __end_of__initialization:
   145                           	opt stack 0
   146  000478  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147  00047A  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148  00047C  0100               	movlb	0
   149  00047E  EF09  F000         	goto	_main	;jump to C main() function
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           postdec1	equ	0xFE5
   157                           fsr1l	equ	0xFE1
   158                           
   159                           	psect	bssCOMRAM
   160  000001                     __pbssCOMRAM:
   161                           	opt stack 0
   162  000001                     _palabra:
   163                           	opt stack 0
   164  000001                     	ds	20
   165  000015                     _speed:
   166                           	opt stack 0
   167  000015                     	ds	2
   168  000017                     _turns:
   169                           	opt stack 0
   170  000017                     	ds	2
   171  000019                     _length:
   172                           	opt stack 0
   173  000019                     	ds	2
   174  00001B                     _diameter:
   175                           	opt stack 0
   176  00001B                     	ds	2
   177  00001D                     _caliber:
   178                           	opt stack 0
   179  00001D                     	ds	2
   180  00001F                     _motor2:
   181                           	opt stack 0
   182  00001F                     	ds	2
   183  000021                     _ADC_value_dist:
   184                           	opt stack 0
   185  000021                     	ds	2
   186  000023                     _ADC_value_press:
   187                           	opt stack 0
   188  000023                     	ds	2
   189  000025                     _overflow:
   190                           	opt stack 0
   191  000025                     	ds	2
   192  000027                     _n:
   193                           	opt stack 0
   194  000027                     	ds	2
   195  000029                     _busy_flag:
   196                           	opt stack 0
   197  000029                     	ds	1
   198  00002A                     _DIR_1:
   199                           	opt stack 0
   200  00002A                     	ds	1
   201  00002B                     _RA0state:
   202                           	opt stack 0
   203  00002B                     	ds	1
   204  00002C                     _recibi:
   205                           	opt stack 0
   206  00002C                     	ds	1
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	dataCOMRAM
   217  000048                     __pdataCOMRAM:
   218                           	opt stack 0
   219  000048                     _PWM_duty:
   220                           	opt stack 0
   221  000048                     	ds	2
   222  00004A                     _motor1:
   223                           	opt stack 0
   224  00004A                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           tblptrl	equ	0xFF6
   228                           tablat	equ	0xFF5
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           postdec1	equ	0xFE5
   232                           fsr1l	equ	0xFE1
   233                           
   234                           	psect	cstackCOMRAM
   235  00002D                     __pcstackCOMRAM:
   236                           	opt stack 0
   237  00002D                     ??_high_isr:
   238  00002D                     
   239                           ; 1 bytes @ 0x0
   240  00002D                     	ds	19
   241  000040                     ?___wmul:
   242                           	opt stack 0
   243  000040                     ___wmul@multiplier:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x13
   247  000040                     	ds	2
   248  000042                     ___wmul@multiplicand:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x15
   252  000042                     	ds	2
   253  000044                     ___wmul@product:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x17
   257  000044                     	ds	2
   258  000046                     ??_main:
   259                           
   260                           ; 1 bytes @ 0x19
   261  000046                     	ds	2
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1l	equ	0xFE1
   270                           
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 53 in file "main.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;		None
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         0       0       0       0       0       0       0       0       0
   291 ;;      Locals:         0       0       0       0       0       0       0       0       0
   292 ;;      Temps:          2       0       0       0       0       0       0       0       0
   293 ;;      Totals:         2       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:        2 bytes
   295 ;; Hardware stack levels required when called:    2
   296 ;; This function calls:
   297 ;;		_ConfigureOscillator
   298 ;;		_InitApp
   299 ;;		___wmul
   300 ;; This function is called by:
   301 ;;		Startup code after reset
   302 ;; This function uses a non-reentrant model
   303 ;;
   304                           
   305                           	psect	text0
   306  000012                     __ptext0:
   307                           	opt stack 0
   308  000012                     _main:
   309                           	opt stack 29
   310                           
   311                           ;main.c: 55: ConfigureOscillator();
   312                           
   313                           ;incstack = 0
   314  000012  EC54  F002         	call	_ConfigureOscillator	;wreg free
   315                           
   316                           ;main.c: 58: InitApp();
   317  000016  ECD5  F001         	call	_InitApp	;wreg free
   318  00001A                     
   319                           ;main.c: 62: CCPR1L = PWM_duty;
   320  00001A  C048  FFBE         	movff	_PWM_duty,4030	;volatile
   321                           
   322                           ;main.c: 63: LATAbits.LA2 = DIR_1;
   323  00001E  B02A               	btfsc	_DIR_1,0,c
   324  000020  D002               	bra	u235
   325  000022  9489               	bcf	3977,2,c	;volatile
   326  000024  D001               	bra	u236
   327  000026                     u235:
   328  000026  8489               	bsf	3977,2,c	;volatile
   329  000028                     u236:
   330                           
   331                           ;main.c: 65: if (busy_flag) {
   332  000028  5029               	movf	_busy_flag,w,c
   333  00002A  B4D8               	btfsc	status,2,c
   334  00002C  D004               	goto	u250
   335                           
   336                           ;main.c: 66: TXREG = 'C';
   337  00002E  0E43               	movlw	67
   338  000030  6EAD               	movwf	4013,c	;volatile
   339  000032  A89E               	btfss	3998,4,c	;volatile
   340  000034  D7FE               	goto	l103
   341  000036                     u250:
   342                           
   343                           ;main.c: 68: }
   344                           ;main.c: 70: if (recibi == 1) {
   345  000036  042C               	decf	_recibi,w,c
   346  000038  A4D8               	btfss	status,2,c
   347  00003A  D105               	goto	l105
   348                           
   349                           ;main.c: 72: recibi = 0;
   350  00003C  0E00               	movlw	0
   351  00003E  6E2C               	movwf	_recibi,c
   352                           
   353                           ;main.c: 74: if (palabra[0] == 'B') {
   354  000040  0E42               	movlw	66
   355  000042  1801               	xorwf	_palabra,w,c
   356  000044  A4D8               	btfss	status,2,c
   357  000046  D021               	goto	l106
   358                           
   359                           ;main.c: 76: DIR_1 = !DIR_1;
   360  000048  502A               	movf	_DIR_1,w,c
   361  00004A  A4D8               	btfss	status,2,c
   362  00004C  D002               	goto	u280
   363  00004E  0E01               	movlw	1
   364  000050  D001               	goto	u290
   365  000052                     u280:
   366  000052  0E00               	movlw	0
   367  000054                     u290:
   368  000054  6E2A               	movwf	_DIR_1,c
   369                           
   370                           ;main.c: 77: PWM_duty = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   371  000056  0ED0               	movlw	208
   372  000058  2402               	addwf	_palabra+1,w,c
   373  00005A  6E40               	movwf	___wmul@multiplier,c
   374  00005C  6A41               	clrf	___wmul@multiplier+1,c
   375  00005E  0EFF               	movlw	255
   376  000060  2241               	addwfc	___wmul@multiplier+1,f,c
   377  000062  0E00               	movlw	0
   378  000064  6E43               	movwf	___wmul@multiplicand+1,c
   379  000066  0E0A               	movlw	10
   380  000068  6E42               	movwf	___wmul@multiplicand,c
   381  00006A  EC41  F002         	call	___wmul	;wreg free
   382  00006E  5003               	movf	_palabra+2,w,c
   383  000070  6E46               	movwf	??_main& (0+255),c
   384  000072  6A47               	clrf	(??_main+1)& (0+255),c
   385  000074  5040               	movf	?___wmul,w,c
   386  000076  2646               	addwf	??_main,f,c
   387  000078  5041               	movf	?___wmul+1,w,c
   388  00007A  2247               	addwfc	??_main+1,f,c
   389  00007C  0ED0               	movlw	208
   390  00007E  2446               	addwf	??_main,w,c
   391  000080  6E48               	movwf	_PWM_duty,c
   392  000082  0EFF               	movlw	255
   393  000084  2047               	addwfc	??_main+1,w,c
   394  000086  6E49               	movwf	_PWM_duty+1,c
   395                           
   396                           ;main.c: 78: } else if (palabra[0] == 'A') {
   397  000088  D7C8               	goto	l100
   398  00008A                     l106:
   399  00008A  0E41               	movlw	65
   400  00008C  1801               	xorwf	_palabra,w,c
   401  00008E  A4D8               	btfss	status,2,c
   402  000090  D7C4               	goto	l100
   403                           
   404                           ;main.c: 80: caliber = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   405  000092  0ED0               	movlw	208
   406  000094  2402               	addwf	_palabra+1,w,c
   407  000096  6E40               	movwf	___wmul@multiplier,c
   408  000098  6A41               	clrf	___wmul@multiplier+1,c
   409  00009A  0EFF               	movlw	255
   410  00009C  2241               	addwfc	___wmul@multiplier+1,f,c
   411  00009E  0E00               	movlw	0
   412  0000A0  6E43               	movwf	___wmul@multiplicand+1,c
   413  0000A2  0E0A               	movlw	10
   414  0000A4  6E42               	movwf	___wmul@multiplicand,c
   415  0000A6  EC41  F002         	call	___wmul	;wreg free
   416  0000AA  5003               	movf	_palabra+2,w,c
   417  0000AC  6E46               	movwf	??_main& (0+255),c
   418  0000AE  6A47               	clrf	(??_main+1)& (0+255),c
   419  0000B0  5040               	movf	?___wmul,w,c
   420  0000B2  2646               	addwf	??_main,f,c
   421  0000B4  5041               	movf	?___wmul+1,w,c
   422  0000B6  2247               	addwfc	??_main+1,f,c
   423  0000B8  0ED0               	movlw	208
   424  0000BA  2446               	addwf	??_main,w,c
   425  0000BC  6E1D               	movwf	_caliber,c
   426  0000BE  0EFF               	movlw	255
   427  0000C0  2047               	addwfc	??_main+1,w,c
   428  0000C2  6E1E               	movwf	_caliber+1,c
   429                           
   430                           ;main.c: 81: diameter = ((palabra[3] - 48) * 1000) + ((palabra[4] - 48) * 100) + ((palab
      +                          ra[5] - 48) * 10) + ((palabra[6] - 48));
   431  0000C4  0ED0               	movlw	208
   432  0000C6  2404               	addwf	_palabra+3,w,c
   433  0000C8  6E40               	movwf	___wmul@multiplier,c
   434  0000CA  6A41               	clrf	___wmul@multiplier+1,c
   435  0000CC  0EFF               	movlw	255
   436  0000CE  2241               	addwfc	___wmul@multiplier+1,f,c
   437  0000D0  0E03               	movlw	3
   438  0000D2  6E43               	movwf	___wmul@multiplicand+1,c
   439  0000D4  0EE8               	movlw	232
   440  0000D6  6E42               	movwf	___wmul@multiplicand,c
   441  0000D8  EC41  F002         	call	___wmul	;wreg free
   442  0000DC  5007               	movf	_palabra+6,w,c
   443  0000DE  6E46               	movwf	??_main& (0+255),c
   444  0000E0  6A47               	clrf	(??_main+1)& (0+255),c
   445  0000E2  5040               	movf	?___wmul,w,c
   446  0000E4  2646               	addwf	??_main,f,c
   447  0000E6  5041               	movf	?___wmul+1,w,c
   448  0000E8  2247               	addwfc	??_main+1,f,c
   449  0000EA  0ED0               	movlw	208
   450  0000EC  2405               	addwf	_palabra+4,w,c
   451  0000EE  6E40               	movwf	___wmul@multiplier,c
   452  0000F0  6A41               	clrf	___wmul@multiplier+1,c
   453  0000F2  0EFF               	movlw	255
   454  0000F4  2241               	addwfc	___wmul@multiplier+1,f,c
   455  0000F6  0E00               	movlw	0
   456  0000F8  6E43               	movwf	___wmul@multiplicand+1,c
   457  0000FA  0E64               	movlw	100
   458  0000FC  6E42               	movwf	___wmul@multiplicand,c
   459  0000FE  EC41  F002         	call	___wmul	;wreg free
   460  000102  5040               	movf	?___wmul,w,c
   461  000104  2646               	addwf	??_main,f,c
   462  000106  5041               	movf	?___wmul+1,w,c
   463  000108  2247               	addwfc	??_main+1,f,c
   464  00010A  0ED0               	movlw	208
   465  00010C  2406               	addwf	_palabra+5,w,c
   466  00010E  6E40               	movwf	___wmul@multiplier,c
   467  000110  6A41               	clrf	___wmul@multiplier+1,c
   468  000112  0EFF               	movlw	255
   469  000114  2241               	addwfc	___wmul@multiplier+1,f,c
   470  000116  0E00               	movlw	0
   471  000118  6E43               	movwf	___wmul@multiplicand+1,c
   472  00011A  0E0A               	movlw	10
   473  00011C  6E42               	movwf	___wmul@multiplicand,c
   474  00011E  EC41  F002         	call	___wmul	;wreg free
   475  000122  5040               	movf	?___wmul,w,c
   476  000124  2646               	addwf	??_main,f,c
   477  000126  5041               	movf	?___wmul+1,w,c
   478  000128  2247               	addwfc	??_main+1,f,c
   479  00012A  0ED0               	movlw	208
   480  00012C  2446               	addwf	??_main,w,c
   481  00012E  6E1B               	movwf	_diameter,c
   482  000130  0EFF               	movlw	255
   483  000132  2047               	addwfc	??_main+1,w,c
   484  000134  6E1C               	movwf	_diameter+1,c
   485                           
   486                           ;main.c: 82: length = ((palabra[7] - 48) * 10000) + ((palabra[8] - 48) * 1000) + ((palab
      +                          ra[9] - 48) * 100) + ((palabra[10] - 48) * 10) + ((palabra[11] - 48));
   487  000136  0ED0               	movlw	208
   488  000138  2408               	addwf	_palabra+7,w,c
   489  00013A  6E40               	movwf	___wmul@multiplier,c
   490  00013C  6A41               	clrf	___wmul@multiplier+1,c
   491  00013E  0EFF               	movlw	255
   492  000140  2241               	addwfc	___wmul@multiplier+1,f,c
   493  000142  0E27               	movlw	39
   494  000144  6E43               	movwf	___wmul@multiplicand+1,c
   495  000146  0E10               	movlw	16
   496  000148  6E42               	movwf	___wmul@multiplicand,c
   497  00014A  EC41  F002         	call	___wmul	;wreg free
   498  00014E  500C               	movf	_palabra+11,w,c
   499  000150  6E46               	movwf	??_main& (0+255),c
   500  000152  6A47               	clrf	(??_main+1)& (0+255),c
   501  000154  5040               	movf	?___wmul,w,c
   502  000156  2646               	addwf	??_main,f,c
   503  000158  5041               	movf	?___wmul+1,w,c
   504  00015A  2247               	addwfc	??_main+1,f,c
   505  00015C  0ED0               	movlw	208
   506  00015E  2409               	addwf	_palabra+8,w,c
   507  000160  6E40               	movwf	___wmul@multiplier,c
   508  000162  6A41               	clrf	___wmul@multiplier+1,c
   509  000164  0EFF               	movlw	255
   510  000166  2241               	addwfc	___wmul@multiplier+1,f,c
   511  000168  0E03               	movlw	3
   512  00016A  6E43               	movwf	___wmul@multiplicand+1,c
   513  00016C  0EE8               	movlw	232
   514  00016E  6E42               	movwf	___wmul@multiplicand,c
   515  000170  EC41  F002         	call	___wmul	;wreg free
   516  000174  5040               	movf	?___wmul,w,c
   517  000176  2646               	addwf	??_main,f,c
   518  000178  5041               	movf	?___wmul+1,w,c
   519  00017A  2247               	addwfc	??_main+1,f,c
   520  00017C  0ED0               	movlw	208
   521  00017E  240A               	addwf	_palabra+9,w,c
   522  000180  6E40               	movwf	___wmul@multiplier,c
   523  000182  6A41               	clrf	___wmul@multiplier+1,c
   524  000184  0EFF               	movlw	255
   525  000186  2241               	addwfc	___wmul@multiplier+1,f,c
   526  000188  0E00               	movlw	0
   527  00018A  6E43               	movwf	___wmul@multiplicand+1,c
   528  00018C  0E64               	movlw	100
   529  00018E  6E42               	movwf	___wmul@multiplicand,c
   530  000190  EC41  F002         	call	___wmul	;wreg free
   531  000194  5040               	movf	?___wmul,w,c
   532  000196  2646               	addwf	??_main,f,c
   533  000198  5041               	movf	?___wmul+1,w,c
   534  00019A  2247               	addwfc	??_main+1,f,c
   535  00019C  0ED0               	movlw	208
   536  00019E  240B               	addwf	_palabra+10,w,c
   537  0001A0  6E40               	movwf	___wmul@multiplier,c
   538  0001A2  6A41               	clrf	___wmul@multiplier+1,c
   539  0001A4  0EFF               	movlw	255
   540  0001A6  2241               	addwfc	___wmul@multiplier+1,f,c
   541  0001A8  0E00               	movlw	0
   542  0001AA  6E43               	movwf	___wmul@multiplicand+1,c
   543  0001AC  0E0A               	movlw	10
   544  0001AE  6E42               	movwf	___wmul@multiplicand,c
   545  0001B0  EC41  F002         	call	___wmul	;wreg free
   546  0001B4  5040               	movf	?___wmul,w,c
   547  0001B6  2646               	addwf	??_main,f,c
   548  0001B8  5041               	movf	?___wmul+1,w,c
   549  0001BA  2247               	addwfc	??_main+1,f,c
   550  0001BC  0ED0               	movlw	208
   551  0001BE  2446               	addwf	??_main,w,c
   552  0001C0  6E19               	movwf	_length,c
   553  0001C2  0EFF               	movlw	255
   554  0001C4  2047               	addwfc	??_main+1,w,c
   555  0001C6  6E1A               	movwf	_length+1,c
   556                           
   557                           ;main.c: 83: turns = ((palabra[12] - 48) * 1000) + ((palabra[13] - 48) * 100) + ((palabr
      +                          a[14] - 48) * 10) + ((palabra[15] - 48));
   558  0001C8  0ED0               	movlw	208
   559  0001CA  240D               	addwf	_palabra+12,w,c
   560  0001CC  6E40               	movwf	___wmul@multiplier,c
   561  0001CE  6A41               	clrf	___wmul@multiplier+1,c
   562  0001D0  0EFF               	movlw	255
   563  0001D2  2241               	addwfc	___wmul@multiplier+1,f,c
   564  0001D4  0E03               	movlw	3
   565  0001D6  6E43               	movwf	___wmul@multiplicand+1,c
   566  0001D8  0EE8               	movlw	232
   567  0001DA  6E42               	movwf	___wmul@multiplicand,c
   568  0001DC  EC41  F002         	call	___wmul	;wreg free
   569  0001E0  5010               	movf	_palabra+15,w,c
   570  0001E2  6E46               	movwf	??_main& (0+255),c
   571  0001E4  6A47               	clrf	(??_main+1)& (0+255),c
   572  0001E6  5040               	movf	?___wmul,w,c
   573  0001E8  2646               	addwf	??_main,f,c
   574  0001EA  5041               	movf	?___wmul+1,w,c
   575  0001EC  2247               	addwfc	??_main+1,f,c
   576  0001EE  0ED0               	movlw	208
   577  0001F0  240E               	addwf	_palabra+13,w,c
   578  0001F2  6E40               	movwf	___wmul@multiplier,c
   579  0001F4  6A41               	clrf	___wmul@multiplier+1,c
   580  0001F6  0EFF               	movlw	255
   581  0001F8  2241               	addwfc	___wmul@multiplier+1,f,c
   582  0001FA  0E00               	movlw	0
   583  0001FC  6E43               	movwf	___wmul@multiplicand+1,c
   584  0001FE  0E64               	movlw	100
   585  000200  6E42               	movwf	___wmul@multiplicand,c
   586  000202  EC41  F002         	call	___wmul	;wreg free
   587  000206  5040               	movf	?___wmul,w,c
   588  000208  2646               	addwf	??_main,f,c
   589  00020A  5041               	movf	?___wmul+1,w,c
   590  00020C  2247               	addwfc	??_main+1,f,c
   591  00020E  0ED0               	movlw	208
   592  000210  240F               	addwf	_palabra+14,w,c
   593  000212  6E40               	movwf	___wmul@multiplier,c
   594  000214  6A41               	clrf	___wmul@multiplier+1,c
   595  000216  0EFF               	movlw	255
   596  000218  2241               	addwfc	___wmul@multiplier+1,f,c
   597  00021A  0E00               	movlw	0
   598  00021C  6E43               	movwf	___wmul@multiplicand+1,c
   599  00021E  0E0A               	movlw	10
   600  000220  6E42               	movwf	___wmul@multiplicand,c
   601  000222  EC41  F002         	call	___wmul	;wreg free
   602  000226  5040               	movf	?___wmul,w,c
   603  000228  2646               	addwf	??_main,f,c
   604  00022A  5041               	movf	?___wmul+1,w,c
   605  00022C  2247               	addwfc	??_main+1,f,c
   606  00022E  0ED0               	movlw	208
   607  000230  2446               	addwf	??_main,w,c
   608  000232  6E17               	movwf	_turns,c
   609  000234  0EFF               	movlw	255
   610  000236  2047               	addwfc	??_main+1,w,c
   611  000238  6E18               	movwf	_turns+1,c
   612                           
   613                           ;main.c: 84: speed = palabra[15];
   614  00023A  C010  F015         	movff	_palabra+15,_speed
   615  00023E  6A16               	clrf	_speed+1,c
   616                           
   617                           ;main.c: 86: busy_flag = 1;
   618  000240  0E01               	movlw	1
   619  000242  6E29               	movwf	_busy_flag,c
   620                           
   621                           ;main.c: 87: }
   622                           ;main.c: 90: } else if (GODONE == 0) {
   623  000244  D6EA               	goto	l100
   624  000246                     l105:
   625  000246  B2C2               	btfsc	4034,1,c	;volatile
   626  000248  D6E8               	goto	l100
   627                           
   628                           ;main.c: 92: GODONE = 1;
   629  00024A  82C2               	bsf	4034,1,c	;volatile
   630  00024C  D6E6               	goto	l100
   631  00024E                     __end_of_main:
   632                           	opt stack 0
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           status	equ	0xFD8
   642                           
   643 ;; *************** function ___wmul *****************
   644 ;; Defined at:
   645 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  multiplier      2   19[COMRAM] unsigned int 
   648 ;;  multiplicand    2   21[COMRAM] unsigned int 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  product         2   23[COMRAM] unsigned int 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  2   19[COMRAM] unsigned int 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0, prodl, prodh
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   660 ;;      Params:         4       0       0       0       0       0       0       0       0
   661 ;;      Locals:         2       0       0       0       0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0       0       0
   663 ;;      Totals:         6       0       0       0       0       0       0       0       0
   664 ;;Total ram usage:        6 bytes
   665 ;; Hardware stack levels used:    1
   666 ;; Hardware stack levels required when called:    1
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text1
   675  000482                     __ptext1:
   676                           	opt stack 0
   677  000482                     ___wmul:
   678                           	opt stack 29
   679                           
   680                           ;incstack = 0
   681  000482  5040               	movf	___wmul@multiplier,w,c
   682  000484  0242               	mulwf	___wmul@multiplicand,c
   683  000486  CFF3 F044          	movff	prodl,___wmul@product
   684  00048A  CFF4 F045          	movff	prodh,___wmul@product+1
   685  00048E  5040               	movf	___wmul@multiplier,w,c
   686  000490  0243               	mulwf	___wmul@multiplicand+1,c
   687  000492  50F3               	movf	prodl,w,c
   688  000494  2645               	addwf	___wmul@product+1,f,c
   689  000496  5041               	movf	___wmul@multiplier+1,w,c
   690  000498  0242               	mulwf	___wmul@multiplicand,c
   691  00049A  50F3               	movf	prodl,w,c
   692  00049C  2645               	addwf	___wmul@product+1,f,c
   693  00049E  C044  F040         	movff	___wmul@product,?___wmul
   694  0004A2  C045  F041         	movff	___wmul@product+1,?___wmul+1
   695  0004A6  0012               	return	
   696  0004A8                     __end_of___wmul:
   697                           	opt stack 0
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           prodh	equ	0xFF4
   703                           prodl	equ	0xFF3
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           postdec1	equ	0xFE5
   707                           fsr1l	equ	0xFE1
   708                           status	equ	0xFD8
   709                           
   710 ;; *************** function _InitApp *****************
   711 ;; Defined at:
   712 ;;		line 28 in file "user.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, status,2
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   726 ;;      Params:         0       0       0       0       0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0       0       0       0       0
   729 ;;      Totals:         0       0       0       0       0       0       0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; Hardware stack levels required when called:    1
   733 ;; This function calls:
   734 ;;		Nothing
   735 ;; This function is called by:
   736 ;;		_main
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           	psect	text2
   741  0003AA                     __ptext2:
   742                           	opt stack 0
   743  0003AA                     _InitApp:
   744                           	opt stack 29
   745                           
   746                           ;user.c: 30: PORTA = 0;
   747                           
   748                           ;incstack = 0
   749  0003AA  0E00               	movlw	0
   750  0003AC  6E80               	movwf	3968,c	;volatile
   751                           
   752                           ;user.c: 31: LATA = 0;
   753  0003AE  0E00               	movlw	0
   754  0003B0  6E89               	movwf	3977,c	;volatile
   755                           
   756                           ;user.c: 32: PORTB = 0;
   757  0003B2  0E00               	movlw	0
   758  0003B4  6E81               	movwf	3969,c	;volatile
   759                           
   760                           ;user.c: 33: LATB = 0;
   761  0003B6  0E00               	movlw	0
   762  0003B8  6E8A               	movwf	3978,c	;volatile
   763                           
   764                           ;user.c: 34: PORTC = 0;
   765  0003BA  0E00               	movlw	0
   766  0003BC  6E82               	movwf	3970,c	;volatile
   767                           
   768                           ;user.c: 35: LATC = 0;
   769  0003BE  0E00               	movlw	0
   770  0003C0  6E8B               	movwf	3979,c	;volatile
   771                           
   772                           ;user.c: 37: ADCON1 = 0b1101;
   773  0003C2  0E0D               	movlw	13
   774  0003C4  6EC1               	movwf	4033,c	;volatile
   775                           
   776                           ;user.c: 38: TRISAbits.TRISA0 = 1;
   777  0003C6  8092               	bsf	3986,0,c	;volatile
   778                           
   779                           ;user.c: 39: TRISAbits.TRISA1 = 1;
   780  0003C8  8292               	bsf	3986,1,c	;volatile
   781                           
   782                           ;user.c: 40: ADCON0bits.CHS = 0;
   783  0003CA  94C2               	bcf	4034,2,c	;volatile
   784  0003CC  96C2               	bcf	4034,3,c	;volatile
   785  0003CE  98C2               	bcf	4034,4,c	;volatile
   786  0003D0  9AC2               	bcf	4034,5,c	;volatile
   787                           
   788                           ;user.c: 41: ADCON2 = 0b10101100;
   789  0003D2  0EAC               	movlw	172
   790  0003D4  6EC0               	movwf	4032,c	;volatile
   791                           
   792                           ;user.c: 42: PIE1bits.ADIE = 1;
   793  0003D6  8C9D               	bsf	3997,6,c	;volatile
   794                           
   795                           ;user.c: 43: PIR1bits.ADIF = 0;
   796  0003D8  9C9E               	bcf	3998,6,c	;volatile
   797                           
   798                           ;user.c: 44: ADCON0bits.ADON = 1;
   799  0003DA  80C2               	bsf	4034,0,c	;volatile
   800                           
   801                           ;user.c: 46: TRISAbits.RA2 = 0;
   802  0003DC  9492               	bcf	3986,2,c	;volatile
   803                           
   804                           ;user.c: 47: TRISAbits.RA3 = 0;
   805  0003DE  9692               	bcf	3986,3,c	;volatile
   806                           
   807                           ;user.c: 48: TRISAbits.RA4 = 0;
   808  0003E0  9892               	bcf	3986,4,c	;volatile
   809                           
   810                           ;user.c: 49: TRISAbits.RA5 = 0;
   811  0003E2  9A92               	bcf	3986,5,c	;volatile
   812                           
   813                           ;user.c: 50: TRISCbits.RC0 = 0;
   814  0003E4  9094               	bcf	3988,0,c	;volatile
   815                           
   816                           ;user.c: 51: TRISCbits.RC1 = 0;
   817  0003E6  9294               	bcf	3988,1,c	;volatile
   818                           
   819                           ;user.c: 52: TRISBbits.RB7 = 0;
   820  0003E8  9E93               	bcf	3987,7,c	;volatile
   821                           
   822                           ;user.c: 53: TRISBbits.RB6 = 0;
   823  0003EA  9C93               	bcf	3987,6,c	;volatile
   824                           
   825                           ;user.c: 54: TRISCbits.RC2 = 0;
   826  0003EC  9494               	bcf	3988,2,c	;volatile
   827                           
   828                           ;user.c: 56: RCONbits.IPEN = 0;
   829  0003EE  9ED0               	bcf	4048,7,c	;volatile
   830                           
   831                           ;user.c: 58: INTCONbits.GIE = 1;
   832  0003F0  8EF2               	bsf	intcon,7,c	;volatile
   833                           
   834                           ;user.c: 59: INTCONbits.PEIE = 1;
   835  0003F2  8CF2               	bsf	intcon,6,c	;volatile
   836                           
   837                           ;user.c: 60: INTCONbits.TMR0IE = 1;
   838  0003F4  8AF2               	bsf	intcon,5,c	;volatile
   839                           
   840                           ;user.c: 61: INTCONbits.TMR0IF = 0;
   841  0003F6  94F2               	bcf	intcon,2,c	;volatile
   842                           
   843                           ;user.c: 62: INTCON2bits.TMR0IP = 1;
   844  0003F8  84F1               	bsf	intcon2,2,c	;volatile
   845                           
   846                           ;user.c: 63: T0CONbits.T08BIT = 1;
   847  0003FA  8CD5               	bsf	4053,6,c	;volatile
   848                           
   849                           ;user.c: 64: T0CONbits.T0CS = 0;
   850  0003FC  9AD5               	bcf	4053,5,c	;volatile
   851                           
   852                           ;user.c: 65: T0CONbits.PSA = 0;
   853  0003FE  96D5               	bcf	4053,3,c	;volatile
   854                           
   855                           ;user.c: 66: T0CONbits.T0PS = 0b101;
   856  000400  50D5               	movf	4053,w,c	;volatile
   857  000402  0BF8               	andlw	-8
   858  000404  0905               	iorlw	5
   859  000406  6ED5               	movwf	4053,c	;volatile
   860                           
   861                           ;user.c: 67: TMR0 = 0x6;
   862  000408  0E00               	movlw	0
   863  00040A  6ED7               	movwf	4055,c	;volatile
   864  00040C  0E06               	movlw	6
   865  00040E  6ED6               	movwf	4054,c	;volatile
   866                           
   867                           ;user.c: 69: INTCON3bits.INT1IE = 1;
   868  000410  86F0               	bsf	intcon3,3,c	;volatile
   869                           
   870                           ;user.c: 70: INTCON3bits.INT2IE = 1;
   871  000412  88F0               	bsf	intcon3,4,c	;volatile
   872                           
   873                           ;user.c: 71: INTCON3bits.INT1IF = 0;
   874  000414  90F0               	bcf	intcon3,0,c	;volatile
   875                           
   876                           ;user.c: 72: INTCON3bits.INT2IF = 0;
   877  000416  92F0               	bcf	intcon3,1,c	;volatile
   878                           
   879                           ;user.c: 74: TRISCbits.RC6 = 0;
   880  000418  9C94               	bcf	3988,6,c	;volatile
   881                           
   882                           ;user.c: 75: TRISCbits.RC7 = 1;
   883  00041A  8E94               	bsf	3988,7,c	;volatile
   884                           
   885                           ;user.c: 76: BRGH = 1;
   886  00041C  84AC               	bsf	4012,2,c	;volatile
   887                           
   888                           ;user.c: 77: BRG16 = 1;
   889  00041E  86B8               	bsf	4024,3,c	;volatile
   890                           
   891                           ;user.c: 78: SPBRG = 207;
   892  000420  0ECF               	movlw	207
   893  000422  6EAF               	movwf	4015,c	;volatile
   894                           
   895                           ;user.c: 79: SPEN = 1;
   896  000424  8EAB               	bsf	4011,7,c	;volatile
   897                           
   898                           ;user.c: 80: SYNC = 0;
   899  000426  98AC               	bcf	4012,4,c	;volatile
   900                           
   901                           ;user.c: 81: TXEN = 1;
   902  000428  8AAC               	bsf	4012,5,c	;volatile
   903                           
   904                           ;user.c: 82: CREN = 1;
   905  00042A  88AB               	bsf	4011,4,c	;volatile
   906                           
   907                           ;user.c: 83: TX9 = 0;
   908  00042C  9CAC               	bcf	4012,6,c	;volatile
   909                           
   910                           ;user.c: 84: RX9 = 0;
   911  00042E  9CAB               	bcf	4011,6,c	;volatile
   912                           
   913                           ;user.c: 85: RCIE = 1;
   914  000430  8A9D               	bsf	3997,5,c	;volatile
   915                           
   916                           ;user.c: 86: TXIE = 0;
   917  000432  989D               	bcf	3997,4,c	;volatile
   918                           
   919                           ;user.c: 88: PR2 = 99;
   920  000434  0E63               	movlw	99
   921  000436  6ECB               	movwf	4043,c	;volatile
   922                           
   923                           ;user.c: 89: CCP1CONbits.DC1B = 0;
   924  000438  0ECF               	movlw	-49
   925  00043A  16BD               	andwf	4029,f,c	;volatile
   926                           
   927                           ;user.c: 90: T2CONbits.T2CKPS = 0b00;
   928  00043C  0EFC               	movlw	-4
   929  00043E  16CA               	andwf	4042,f,c	;volatile
   930                           
   931                           ;user.c: 91: T2CONbits.TMR2ON = 1;
   932  000440  84CA               	bsf	4042,2,c	;volatile
   933                           
   934                           ;user.c: 92: CCP1CONbits.CCP1M = 0b1111;
   935  000442  80BD               	bsf	4029,0,c	;volatile
   936  000444  82BD               	bsf	4029,1,c	;volatile
   937  000446  84BD               	bsf	4029,2,c	;volatile
   938  000448  86BD               	bsf	4029,3,c	;volatile
   939  00044A  0012               	return		;funcret
   940  00044C                     __end_of_InitApp:
   941                           	opt stack 0
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           prodh	equ	0xFF4
   947                           prodl	equ	0xFF3
   948                           intcon	equ	0xFF2
   949                           intcon2	equ	0xFF1
   950                           intcon3	equ	0xFF0
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1l	equ	0xFE1
   955                           status	equ	0xFD8
   956                           
   957 ;; *************** function _ConfigureOscillator *****************
   958 ;; Defined at:
   959 ;;		line 24 in file "system.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      void 
   966 ;; Registers used:
   967 ;;		wreg, status,2
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   973 ;;      Params:         0       0       0       0       0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    1
   980 ;; This function calls:
   981 ;;		Nothing
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text3
   988  0004A8                     __ptext3:
   989                           	opt stack 0
   990  0004A8                     _ConfigureOscillator:
   991                           	opt stack 29
   992                           
   993                           ;system.c: 27: OSCCONbits.IRCF = 0b111;
   994                           
   995                           ;incstack = 0
   996  0004A8  88D3               	bsf	4051,4,c	;volatile
   997  0004AA  8AD3               	bsf	4051,5,c	;volatile
   998  0004AC  8CD3               	bsf	4051,6,c	;volatile
   999                           
  1000                           ;system.c: 28: OSCCONbits.SCS = 0b11;
  1001  0004AE  0E03               	movlw	3
  1002  0004B0  12D3               	iorwf	4051,f,c	;volatile
  1003  0004B2  0012               	return		;funcret
  1004  0004B4                     __end_of_ConfigureOscillator:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           prodh	equ	0xFF4
  1011                           prodl	equ	0xFF3
  1012                           intcon	equ	0xFF2
  1013                           intcon2	equ	0xFF1
  1014                           intcon3	equ	0xFF0
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           postdec1	equ	0xFE5
  1018                           fsr1l	equ	0xFE1
  1019                           status	equ	0xFD8
  1020                           
  1021 ;; *************** function _high_isr *****************
  1022 ;; Defined at:
  1023 ;;		line 32 in file "interrupts.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1039 ;;      Temps:         19       0       0       0       0       0       0       0       0
  1040 ;;      Totals:        19       0       0       0       0       0       0       0       0
  1041 ;;Total ram usage:       19 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		Interrupt level 2
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	intcode
  1051  000008                     __pintcode:
  1052                           	opt stack 0
  1053  000008                     _high_isr:
  1054                           	opt stack 29
  1055                           
  1056                           ;incstack = 0
  1057  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1058  00000A  ED27  F001         	call	int_func,f	;refresh shadow registers
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           intcon	equ	0xFF2
  1066                           intcon2	equ	0xFF1
  1067                           intcon3	equ	0xFF0
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1l	equ	0xFE1
  1072                           status	equ	0xFD8
  1073                           
  1074                           	psect	intcode_body
  1075  00024E                     __pintcode_body:
  1076                           	opt stack 29
  1077  00024E                     int_func:
  1078                           	opt stack 29
  1079  00024E  0006               	pop		; remove dummy address from shadow register refresh
  1080  000250  CFFA F02E          	movff	pclath,??_high_isr+1
  1081  000254  CFFB F02F          	movff	pclatu,??_high_isr+2
  1082  000258  CFE9 F030          	movff	fsr0l,??_high_isr+3
  1083  00025C  CFEA F031          	movff	fsr0h,??_high_isr+4
  1084  000260  CFE1 F032          	movff	fsr1l,??_high_isr+5
  1085  000264  CFE2 F033          	movff	fsr1h,??_high_isr+6
  1086  000268  CFD9 F034          	movff	fsr2l,??_high_isr+7
  1087  00026C  CFDA F035          	movff	fsr2h,??_high_isr+8
  1088  000270  CFF3 F036          	movff	prodl,??_high_isr+9
  1089  000274  CFF4 F037          	movff	prodh,??_high_isr+10
  1090  000278  CFF6 F038          	movff	tblptrl,??_high_isr+11
  1091  00027C  CFF7 F039          	movff	tblptrh,??_high_isr+12
  1092  000280  CFF8 F03A          	movff	tblptru,??_high_isr+13
  1093  000284  CFF5 F03B          	movff	tablat,??_high_isr+14
  1094  000288  C04C  F03C         	movff	btemp,??_high_isr+15
  1095  00028C  C04D  F03D         	movff	btemp+1,??_high_isr+16
  1096  000290  C04E  F03E         	movff	btemp+2,??_high_isr+17
  1097  000294  C04F  F03F         	movff	btemp+3,??_high_isr+18
  1098                           
  1099                           ;interrupts.c: 33: if (INTCONbits.TMR0IF) {
  1100  000298  A4F2               	btfss	intcon,2,c	;volatile
  1101  00029A  D015               	goto	i2l39
  1102                           
  1103                           ;interrupts.c: 35: INTCONbits.TMR0IF = 0;
  1104  00029C  94F2               	bcf	intcon,2,c	;volatile
  1105                           
  1106                           ;interrupts.c: 36: overflow++;
  1107  00029E  4A25               	infsnz	_overflow,f,c
  1108  0002A0  2A26               	incf	_overflow+1,f,c
  1109                           
  1110                           ;interrupts.c: 37: LATAbits.LA2 = !PORTAbits.RA2;
  1111  0002A2  B480               	btfsc	3968,2,c	;volatile
  1112  0002A4  D003               	goto	i2u2_40
  1113  0002A6  6A2D               	clrf	??_high_isr& (0+255),c
  1114  0002A8  2A2D               	incf	??_high_isr& (0+255),f,c
  1115  0002AA  D001               	goto	i2u3_48
  1116  0002AC                     i2u2_40:
  1117  0002AC  6A2D               	clrf	??_high_isr& (0+255),c
  1118  0002AE                     i2u3_48:
  1119  0002AE  462D               	rlncf	??_high_isr,f,c
  1120  0002B0  462D               	rlncf	??_high_isr,f,c
  1121  0002B2  5089               	movf	3977,w,c	;volatile
  1122  0002B4  182D               	xorwf	??_high_isr,w,c
  1123  0002B6  0BFB               	andlw	-5
  1124  0002B8  182D               	xorwf	??_high_isr,w,c
  1125  0002BA  6E89               	movwf	3977,c	;volatile
  1126                           
  1127                           ;interrupts.c: 38: TMR0 = 50;
  1128  0002BC  0E00               	movlw	0
  1129  0002BE  6ED7               	movwf	4055,c	;volatile
  1130  0002C0  0E32               	movlw	50
  1131  0002C2  6ED6               	movwf	4054,c	;volatile
  1132                           
  1133                           ;interrupts.c: 39: } else if (PIR1bits.RCIF) {
  1134  0002C4  D04C               	goto	i2l54
  1135  0002C6                     i2l39:
  1136  0002C6  AA9E               	btfss	3998,5,c	;volatile
  1137  0002C8  D01A               	goto	i2l41
  1138                           
  1139                           ;interrupts.c: 41: PIR1bits.RCIF = 0;
  1140  0002CA  9A9E               	bcf	3998,5,c	;volatile
  1141                           
  1142                           ;interrupts.c: 42: palabra[n] = RCREG;
  1143  0002CC  0E01               	movlw	low _palabra
  1144  0002CE  2427               	addwf	_n,w,c
  1145  0002D0  6ED9               	movwf	fsr2l,c
  1146  0002D2  0E00               	movlw	high _palabra
  1147  0002D4  2028               	addwfc	_n+1,w,c
  1148  0002D6  6EDA               	movwf	fsr2h,c
  1149  0002D8  CFAE FFDF          	movff	4014,indf2	;volatile
  1150                           
  1151                           ;interrupts.c: 43: n++;
  1152  0002DC  4A27               	infsnz	_n,f,c
  1153  0002DE  2A28               	incf	_n+1,f,c
  1154                           
  1155                           ;interrupts.c: 44: if (RCREG == '\n') {
  1156  0002E0  0E0A               	movlw	10
  1157  0002E2  18AE               	xorwf	4014,w,c	;volatile
  1158  0002E4  A4D8               	btfss	status,2,c
  1159  0002E6  D03B               	goto	i2l54
  1160                           
  1161                           ;interrupts.c: 45: TXREG = palabra[0];
  1162  0002E8  C001  FFAD         	movff	_palabra,4013	;volatile
  1163  0002EC  A89E               	btfss	3998,4,c	;volatile
  1164  0002EE  D7FE               	goto	i2l44
  1165                           
  1166                           ;interrupts.c: 47: recibi = 1;
  1167  0002F0  0E01               	movlw	1
  1168  0002F2  6E2C               	movwf	_recibi,c
  1169                           
  1170                           ;interrupts.c: 48: n = 0;
  1171  0002F4  0E00               	movlw	0
  1172  0002F6  6E28               	movwf	_n+1,c
  1173  0002F8  0E00               	movlw	0
  1174  0002FA  6E27               	movwf	_n,c
  1175                           
  1176                           ;interrupts.c: 49: }
  1177                           ;interrupts.c: 50: } else if (PIR1bits.ADIF) {
  1178  0002FC  D030               	goto	i2l54
  1179  0002FE                     i2l41:
  1180  0002FE  AC9E               	btfss	3998,6,c	;volatile
  1181  000300  D028               	goto	i2l47
  1182                           
  1183                           ;interrupts.c: 52: PIR1bits.ADIF = 0;
  1184  000302  9C9E               	bcf	3998,6,c	;volatile
  1185                           
  1186                           ;interrupts.c: 53: if (ADCON0bits.CHS == 0b0000) {
  1187  000304  30C2               	rrcf	4034,w,c	;volatile
  1188  000306  32E8               	rrcf	wreg,f,c
  1189  000308  0B0F               	andlw	15
  1190  00030A  0900               	iorlw	0
  1191  00030C  A4D8               	btfss	status,2,c
  1192  00030E  D005               	goto	i2l48
  1193                           
  1194                           ;interrupts.c: 54: ADC_value_press = ADRES;
  1195  000310  CFC3 F023          	movff	4035,_ADC_value_press	;volatile
  1196  000314  CFC4 F024          	movff	4036,_ADC_value_press+1	;volatile
  1197                           
  1198                           ;interrupts.c: 55: } else if (ADCON0bits.CHS == 0b0001) {
  1199  000318  D00A               	goto	i2l50
  1200  00031A                     i2l48:
  1201  00031A  30C2               	rrcf	4034,w,c	;volatile
  1202  00031C  32E8               	rrcf	wreg,f,c
  1203  00031E  0B0F               	andlw	15
  1204  000320  06E8               	decf	wreg,f,c
  1205  000322  A4D8               	btfss	status,2,c
  1206  000324  D004               	goto	i2l50
  1207                           
  1208                           ;interrupts.c: 56: ADC_value_dist = ADRES;
  1209  000326  CFC3 F021          	movff	4035,_ADC_value_dist	;volatile
  1210  00032A  CFC4 F022          	movff	4036,_ADC_value_dist+1	;volatile
  1211  00032E                     i2l50:
  1212                           
  1213                           ;interrupts.c: 57: }
  1214                           ;interrupts.c: 58: ADCON0bits.CHS = !ADCON0bits.CHS;
  1215  00032E  30C2               	rrcf	4034,w,c	;volatile
  1216  000330  32E8               	rrcf	wreg,f,c
  1217  000332  0B0F               	andlw	15
  1218  000334  0900               	iorlw	0
  1219  000336  A4D8               	btfss	status,2,c
  1220  000338  D003               	goto	i2u10_40
  1221  00033A  6A2D               	clrf	??_high_isr& (0+255),c
  1222  00033C  2A2D               	incf	??_high_isr& (0+255),f,c
  1223  00033E  D001               	goto	i2u11_48
  1224  000340                     i2u10_40:
  1225  000340  6A2D               	clrf	??_high_isr& (0+255),c
  1226  000342                     i2u11_48:
  1227  000342  462D               	rlncf	??_high_isr,f,c
  1228  000344  462D               	rlncf	??_high_isr,f,c
  1229  000346  50C2               	movf	4034,w,c	;volatile
  1230  000348  182D               	xorwf	??_high_isr,w,c
  1231  00034A  0BC3               	andlw	-61
  1232  00034C  182D               	xorwf	??_high_isr,w,c
  1233  00034E  6EC2               	movwf	4034,c	;volatile
  1234                           
  1235                           ;interrupts.c: 60: } else if (INTCON3bits.INT1IF) {
  1236  000350  D006               	goto	i2l54
  1237  000352                     i2l47:
  1238  000352  A0F0               	btfss	intcon3,0,c	;volatile
  1239  000354  D002               	goto	i2l52
  1240                           
  1241                           ;interrupts.c: 62: INTCON3bits.INT1IF = 0;
  1242  000356  90F0               	bcf	intcon3,0,c	;volatile
  1243                           
  1244                           ;interrupts.c: 64: } else if (INTCON3bits.INT2IF) {
  1245  000358  D002               	goto	i2l54
  1246  00035A                     i2l52:
  1247  00035A  B2F0               	btfsc	intcon3,1,c	;volatile
  1248                           
  1249                           ;interrupts.c: 66: INTCON3bits.INT2IF = 0;
  1250  00035C  92F0               	bcf	intcon3,1,c	;volatile
  1251  00035E                     i2l54:
  1252  00035E  C03F  F04F         	movff	??_high_isr+18,btemp+3
  1253  000362  C03E  F04E         	movff	??_high_isr+17,btemp+2
  1254  000366  C03D  F04D         	movff	??_high_isr+16,btemp+1
  1255  00036A  C03C  F04C         	movff	??_high_isr+15,btemp
  1256  00036E  C03B  FFF5         	movff	??_high_isr+14,tablat
  1257  000372  C03A  FFF8         	movff	??_high_isr+13,tblptru
  1258  000376  C039  FFF7         	movff	??_high_isr+12,tblptrh
  1259  00037A  C038  FFF6         	movff	??_high_isr+11,tblptrl
  1260  00037E  C037  FFF4         	movff	??_high_isr+10,prodh
  1261  000382  C036  FFF3         	movff	??_high_isr+9,prodl
  1262  000386  C035  FFDA         	movff	??_high_isr+8,fsr2h
  1263  00038A  C034  FFD9         	movff	??_high_isr+7,fsr2l
  1264  00038E  C033  FFE2         	movff	??_high_isr+6,fsr1h
  1265  000392  C032  FFE1         	movff	??_high_isr+5,fsr1l
  1266  000396  C031  FFEA         	movff	??_high_isr+4,fsr0h
  1267  00039A  C030  FFE9         	movff	??_high_isr+3,fsr0l
  1268  00039E  C02F  FFFB         	movff	??_high_isr+2,pclatu
  1269  0003A2  C02E  FFFA         	movff	??_high_isr+1,pclath
  1270  0003A6  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1271  0003A8  0011               	retfie		f
  1272  0003AA                     __end_of_high_isr:
  1273                           	opt stack 0
  1274  0000                     pclatu	equ	0xFFB
  1275                           pclath	equ	0xFFA
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           prodh	equ	0xFF4
  1281                           prodl	equ	0xFF3
  1282                           intcon	equ	0xFF2
  1283                           intcon2	equ	0xFF1
  1284                           intcon3	equ	0xFF0
  1285                           postinc0	equ	0xFEE
  1286                           fsr0h	equ	0xFEA
  1287                           fsr0l	equ	0xFE9
  1288                           wreg	equ	0xFE8
  1289                           postdec1	equ	0xFE5
  1290                           fsr1h	equ	0xFE2
  1291                           fsr1l	equ	0xFE1
  1292                           indf2	equ	0xFDF
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           pclatu	equ	0xFFB
  1297                           pclath	equ	0xFFA
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           prodh	equ	0xFF4
  1303                           prodl	equ	0xFF3
  1304                           intcon	equ	0xFF2
  1305                           intcon2	equ	0xFF1
  1306                           intcon3	equ	0xFF0
  1307                           postinc0	equ	0xFEE
  1308                           fsr0h	equ	0xFEA
  1309                           fsr0l	equ	0xFE9
  1310                           wreg	equ	0xFE8
  1311                           postdec1	equ	0xFE5
  1312                           fsr1h	equ	0xFE2
  1313                           fsr1l	equ	0xFE1
  1314                           indf2	equ	0xFDF
  1315                           fsr2h	equ	0xFDA
  1316                           fsr2l	equ	0xFD9
  1317                           status	equ	0xFD8
  1318                           
  1319                           	psect	rparam
  1320  0000                     pclatu	equ	0xFFB
  1321                           pclath	equ	0xFFA
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           intcon	equ	0xFF2
  1329                           intcon2	equ	0xFF1
  1330                           intcon3	equ	0xFF0
  1331                           postinc0	equ	0xFEE
  1332                           fsr0h	equ	0xFEA
  1333                           fsr0l	equ	0xFE9
  1334                           wreg	equ	0xFE8
  1335                           postdec1	equ	0xFE5
  1336                           fsr1h	equ	0xFE2
  1337                           fsr1l	equ	0xFE1
  1338                           indf2	equ	0xFDF
  1339                           fsr2h	equ	0xFDA
  1340                           fsr2l	equ	0xFD9
  1341                           status	equ	0xFD8
  1342                           
  1343                           	psect	temp
  1344  00004C                     btemp:
  1345                           	opt stack 0
  1346  00004C                     	ds	1
  1347  0000                     int$flags	set	btemp
  1348  0000                     wtemp6	set	btemp+1
  1349                           pclatu	equ	0xFFB
  1350                           pclath	equ	0xFFA
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodh	equ	0xFF4
  1356                           prodl	equ	0xFF3
  1357                           intcon	equ	0xFF2
  1358                           intcon2	equ	0xFF1
  1359                           intcon3	equ	0xFF0
  1360                           postinc0	equ	0xFEE
  1361                           fsr0h	equ	0xFEA
  1362                           fsr0l	equ	0xFE9
  1363                           wreg	equ	0xFE8
  1364                           postdec1	equ	0xFE5
  1365                           fsr1h	equ	0xFE2
  1366                           fsr1l	equ	0xFE1
  1367                           indf2	equ	0xFDF
  1368                           fsr2h	equ	0xFDA
  1369                           fsr2l	equ	0xFD9
  1370                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     27      75
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___wmul

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1983
                                             25 COMRAM     2     2      0
                _ConfigureOscillator
                            _InitApp
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1983
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _high_isr                                            19    19      0       0
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___wmul

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1B      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4B      20        0.0%
DATA                 0      0      4B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 12 09:41:33 2019

                           _n 0027           ___wmul@multiplicand 0042                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l100 001A                           l103 0032  
                         l105 0246                           l106 008A                  __CFG_CPB$OFF 000000  
                         u250 0036                           u235 0026                           u236 0028  
                         _PR2 000FCB                           u280 0052                           u290 0054  
                __CFG_CPD$OFF 000000                           _RX9 007D5E                           _TX9 007D66  
                __CFG_BOR$OFF 000000                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          _BRGH 007D62                          _CREN 007D5C  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        _RCIE 007CED                          i2l41 02FE                          i2l50 032E  
                        i2l52 035A                          i2l44 02EC                          i2l54 035E  
                        i2l47 0352                          i2l39 02C6                          i2l48 031A  
                        _TMR0 000FD6                          _SPEN 007D5F                          _TXIE 007CEC  
                        _TXIF 007CF4                          _TXEN 007D65                          _SYNC 007D64  
                        _main 0012                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 004C  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             __end_of_InitApp 044C                 __CFG_PLLDIV$1 000000                __CFG_CCP2MX$ON 000000  
                       ?_main 002D                         _ADRES 000FC3                         _BRG16 007DC3  
                       _DIR_1 002A                         _RCREG 000FAE                         _SPBRG 000FAF  
                       _PORTA 000F80                         _PORTB 000F81                         _PORTC 000F82  
               __CFG_USBDIV$1 000000                         _TXREG 000FAD           _ConfigureOscillator 04A8  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _speed 0015  
                       _turns 0017                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8                         wtemp6 004D          ?_ConfigureOscillator 002D  
             __initialization 044C                  __end_of_main 024E                        ??_main 0046  
               __activetblptr 000000                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      _CCPR1L 000FBE                        _GODONE 007E11                        i2u2_40 02AC  
                      i2u3_48 02AE                     ??_InitApp 0040         ??_ConfigureOscillator 0040  
              __CFG_XINST$OFF 000000              __end_of_high_isr 03AA                        ___wmul 0482  
                      _length 0019                        _recibi 002C                        clear_0 0472  
                      _motor1 004A                        _motor2 001F                  __pdataCOMRAM 0048  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0060       __end_of__initialization 0478               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                __pcstackCOMRAM 002D                       ?___wmul 0040  
                     i2u10_40 0340                       i2u11_48 0342                     ?_high_isr 002D  
             __CFG_VREGEN$OFF 000000                       _InitApp 03AA                       __Hparam 0000  
                     __Lparam 0000               __size_of___wmul 0026                       _caliber 001D  
             __CFG_STVREN$OFF 000000                       __pcinit 044C                       __ramtop 0800  
                     __ptext0 0012                       __ptext1 0482                       __ptext2 03AA  
                     __ptext3 04A8                     _T0CONbits 000FD5                       _palabra 0001  
                   _T2CONbits 000FCA                    ??_high_isr 002D                __pintcode_body 024E  
        end_of_initialization 0478                       int_func 024E                       postdec1 000FE5  
                     postinc0 000FEE                     _PORTAbits 000F80                     _TRISAbits 000F92  
                   _TRISBbits 000F93                     _TRISCbits 000F94   __end_of_ConfigureOscillator 04B4  
                 _CCP1CONbits 000FBD                __end_of___wmul 04A8                 __pidataCOMRAM 04B4  
         start_initialization 044C                      ??___wmul 0044              __CFG_LPT1OSC$OFF 000000  
                 __pbssCOMRAM 0001             __size_of_high_isr 03A2                      ?_InitApp 002D  
                   __pintcode 0008                     _busy_flag 0029                ___wmul@product 0044  
                    _LATAbits 000F89                      _PIE1bits 000F9D                      _RA0state 002B  
                    _PIR1bits 000F9E                      _RCONbits 000FD0              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0040                      _PWM_duty 0048  
             _ADC_value_press 0023                   _INTCON2bits 000FF1                   _INTCON3bits 000FF0  
                   copy_data0 0460              __size_of_InitApp 00A2                      __Hrparam 0000  
                    __Lrparam 0000                      _diameter 001B                      _high_isr 0008  
               __size_of_main 023C  __size_of_ConfigureOscillator 000C                      _overflow 0025  
                    int$flags 004C                _ADC_value_dist 0021         __CFG_CPUDIV$OSC1_PLL2 000000  
                  _INTCONbits 000FF2                      intlevel2 0000                    _OSCCONbits 000FD3  
         __CFG_FOSC$INTOSC_EC 000000  

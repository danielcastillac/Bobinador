

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 14 10:33:51 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F2550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  0005D4                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _PWM_duty
    62  0005D4  0032               	dw	50
    63                           
    64                           ;initializer for _motor1
    65  0005D6  0001               	dw	1
    66                           
    67                           	psect	nvCOMRAM
    68  000052                     __pnvCOMRAM:
    69                           	opt stack 0
    70  000052                     _MOT_1:
    71                           	opt stack 0
    72  000052                     	ds	1
    73  0000                     _ADRES	set	4035
    74  0000                     _TMR0	set	4054
    75  0000                     _T2CONbits	set	4042
    76  0000                     _CCP1CONbits	set	4029
    77  0000                     _PR2	set	4043
    78  0000                     _SPBRG	set	4015
    79  0000                     _T0CONbits	set	4053
    80  0000                     _INTCON2bits	set	4081
    81  0000                     _RCONbits	set	4048
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TRISCbits	set	3988
    84  0000                     _PIE1bits	set	3997
    85  0000                     _ADCON2	set	4032
    86  0000                     _TRISAbits	set	3986
    87  0000                     _ADCON1	set	4033
    88  0000                     _LATC	set	3979
    89  0000                     _PORTC	set	3970
    90  0000                     _LATB	set	3978
    91  0000                     _PORTB	set	3969
    92  0000                     _LATA	set	3977
    93  0000                     _PORTA	set	3968
    94  0000                     _OSCCONbits	set	4051
    95  0000                     _CCPR1L	set	4030
    96  0000                     _INTCON3bits	set	4080
    97  0000                     _ADCON0bits	set	4034
    98  0000                     _TXREG	set	4013
    99  0000                     _RCREG	set	4014
   100  0000                     _PIR1bits	set	3998
   101  0000                     _PORTBbits	set	3969
   102  0000                     _LATBbits	set	3978
   103  0000                     _PORTCbits	set	3970
   104  0000                     _LATCbits	set	3979
   105  0000                     _PORTAbits	set	3968
   106  0000                     _LATAbits	set	3977
   107  0000                     _INTCONbits	set	4082
   108  0000                     _TXIE	set	31980
   109  0000                     _RCIE	set	31981
   110  0000                     _RX9	set	32094
   111  0000                     _TX9	set	32102
   112  0000                     _CREN	set	32092
   113  0000                     _TXEN	set	32101
   114  0000                     _SYNC	set	32100
   115  0000                     _SPEN	set	32095
   116  0000                     _BRG16	set	32195
   117  0000                     _BRGH	set	32098
   118  0000                     _GODONE	set	32273
   119  0000                     _TXIF	set	31988
   120                           
   121                           ; #config settings
   122  0000                     
   123                           	psect	cinit
   124  00056A                     __pcinit:
   125                           	opt stack 0
   126  00056A                     start_initialization:
   127                           	opt stack 0
   128  00056A                     __initialization:
   129                           	opt stack 0
   130                           
   131                           ; Initialize objects allocated to COMRAM (4 bytes)
   132                           ; load TBLPTR registers with __pidataCOMRAM
   133  00056A  0ED4               	movlw	low __pidataCOMRAM
   134  00056C  6EF6               	movwf	tblptrl,c
   135  00056E  0E05               	movlw	high __pidataCOMRAM
   136  000570  6EF7               	movwf	tblptrh,c
   137  000572  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   138  000574  6EF8               	movwf	tblptru,c
   139  000576  EE00  F04E         	lfsr	0,__pdataCOMRAM
   140  00057A  EE10 F004          	lfsr	1,4
   141  00057E                     copy_data0:
   142  00057E  0009               	tblrd		*+
   143  000580  CFF5 FFEE          	movff	tablat,postinc0
   144  000584  50E5               	movf	postdec1,w,c
   145  000586  50E1               	movf	fsr1l,w,c
   146  000588  E1FA               	bnz	copy_data0
   147                           
   148                           ; Clear objects allocated to COMRAM (58 bytes)
   149  00058A  EE00  F001         	lfsr	0,__pbssCOMRAM
   150  00058E  0E3A               	movlw	58
   151  000590                     clear_0:
   152  000590  6AEE               	clrf	postinc0,c
   153  000592  06E8               	decf	wreg,f,c
   154  000594  E1FD               	bnz	clear_0
   155  000596                     end_of_initialization:
   156                           	opt stack 0
   157  000596                     __end_of__initialization:
   158                           	opt stack 0
   159  000596  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   160  000598  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   161  00059A  0100               	movlb	0
   162  00059C  EF09  F000         	goto	_main	;jump to C main() function
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           postdec1	equ	0xFE5
   170                           fsr1l	equ	0xFE1
   171                           
   172                           	psect	bssCOMRAM
   173  000001                     __pbssCOMRAM:
   174                           	opt stack 0
   175  000001                     _palabra:
   176                           	opt stack 0
   177  000001                     	ds	20
   178  000015                     _speed:
   179                           	opt stack 0
   180  000015                     	ds	2
   181  000017                     _turns:
   182                           	opt stack 0
   183  000017                     	ds	2
   184  000019                     _length:
   185                           	opt stack 0
   186  000019                     	ds	2
   187  00001B                     _diameter:
   188                           	opt stack 0
   189  00001B                     	ds	2
   190  00001D                     _caliber:
   191                           	opt stack 0
   192  00001D                     	ds	2
   193  00001F                     _motor2:
   194                           	opt stack 0
   195  00001F                     	ds	2
   196  000021                     _MOT_4_count:
   197                           	opt stack 0
   198  000021                     	ds	2
   199  000023                     _MOT_3_count:
   200                           	opt stack 0
   201  000023                     	ds	2
   202  000025                     _MOT_2_count:
   203                           	opt stack 0
   204  000025                     	ds	2
   205  000027                     _MOT_1_count:
   206                           	opt stack 0
   207  000027                     	ds	2
   208  000029                     _ADC_value_dist:
   209                           	opt stack 0
   210  000029                     	ds	2
   211  00002B                     _ADC_value_press:
   212                           	opt stack 0
   213  00002B                     	ds	2
   214  00002D                     _overflow:
   215                           	opt stack 0
   216  00002D                     	ds	2
   217  00002F                     _n:
   218                           	opt stack 0
   219  00002F                     	ds	2
   220  000031                     _busy_flag:
   221                           	opt stack 0
   222  000031                     	ds	1
   223  000032                     _DIR_4:
   224                           	opt stack 0
   225  000032                     	ds	1
   226  000033                     _DIR_3:
   227                           	opt stack 0
   228  000033                     	ds	1
   229  000034                     _DIR_2:
   230                           	opt stack 0
   231  000034                     	ds	1
   232  000035                     _DIR_1:
   233                           	opt stack 0
   234  000035                     	ds	1
   235  000036                     _RA0state:
   236                           	opt stack 0
   237  000036                     	ds	1
   238  000037                     _recibi:
   239                           	opt stack 0
   240  000037                     	ds	1
   241  000038                     _MOT_4:
   242                           	opt stack 0
   243  000038                     	ds	1
   244  000039                     _MOT_3:
   245                           	opt stack 0
   246  000039                     	ds	1
   247  00003A                     _MOT_2:
   248                           	opt stack 0
   249  00003A                     	ds	1
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           postdec1	equ	0xFE5
   257                           fsr1l	equ	0xFE1
   258                           
   259                           	psect	dataCOMRAM
   260  00004E                     __pdataCOMRAM:
   261                           	opt stack 0
   262  00004E                     _PWM_duty:
   263                           	opt stack 0
   264  00004E                     	ds	2
   265  000050                     _motor1:
   266                           	opt stack 0
   267  000050                     	ds	2
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           postdec1	equ	0xFE5
   275                           fsr1l	equ	0xFE1
   276                           
   277                           	psect	cstackBANK0
   278  000060                     __pcstackBANK0:
   279                           	opt stack 0
   280  000060                     ?___wmul:
   281                           	opt stack 0
   282  000060                     ___wmul@multiplier:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x0
   286  000060                     	ds	2
   287  000062                     ___wmul@multiplicand:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x2
   291  000062                     	ds	2
   292  000064                     ___wmul@product:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x4
   296  000064                     	ds	2
   297  000066                     ??_main:
   298                           
   299                           ; 1 bytes @ 0x6
   300  000066                     	ds	2
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           postdec1	equ	0xFE5
   308                           fsr1l	equ	0xFE1
   309                           
   310                           	psect	cstackCOMRAM
   311  00003B                     __pcstackCOMRAM:
   312                           	opt stack 0
   313  00003B                     ??_high_isr:
   314  00003B                     
   315                           ; 1 bytes @ 0x0
   316  00003B                     	ds	19
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 61 in file "main.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;		None
   336 ;; Return value:  Size  Location     Type
   337 ;;                  1    wreg      void 
   338 ;; Registers used:
   339 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : 0/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   345 ;;      Params:         0       0       0       0       0       0       0       0       0
   346 ;;      Locals:         0       0       0       0       0       0       0       0       0
   347 ;;      Temps:          0       2       0       0       0       0       0       0       0
   348 ;;      Totals:         0       2       0       0       0       0       0       0       0
   349 ;;Total ram usage:        2 bytes
   350 ;; Hardware stack levels required when called:    2
   351 ;; This function calls:
   352 ;;		_ConfigureOscillator
   353 ;;		_InitApp
   354 ;;		___wmul
   355 ;; This function is called by:
   356 ;;		Startup code after reset
   357 ;; This function uses a non-reentrant model
   358 ;;
   359                           
   360                           	psect	text0
   361  000012                     __ptext0:
   362                           	opt stack 0
   363  000012                     _main:
   364                           	opt stack 29
   365                           
   366                           ;main.c: 63: ConfigureOscillator();
   367                           
   368                           ;incstack = 0
   369  000012  ECE4  F002         	call	_ConfigureOscillator	;wreg free
   370                           
   371                           ;main.c: 66: InitApp();
   372  000016  EC64  F002         	call	_InitApp	;wreg free
   373  00001A                     
   374                           ;main.c: 70: MOT_1 = 1;
   375  00001A  0E01               	movlw	1
   376  00001C  6E52               	movwf	_MOT_1,c
   377                           
   378                           ;main.c: 71: CCPR1L = PWM_duty;
   379  00001E  C04E  FFBE         	movff	_PWM_duty,4030	;volatile
   380                           
   381                           ;main.c: 73: LATAbits.LA2 = DIR_1;
   382  000022  B035               	btfsc	_DIR_1,0,c
   383  000024  D002               	bra	u775
   384  000026  9489               	bcf	3977,2,c	;volatile
   385  000028  D001               	bra	u776
   386  00002A                     u775:
   387  00002A  8489               	bsf	3977,2,c	;volatile
   388  00002C                     u776:
   389                           
   390                           ;main.c: 74: LATAbits.LA4 = DIR_2;
   391  00002C  B034               	btfsc	_DIR_2,0,c
   392  00002E  D002               	bra	u785
   393  000030  9889               	bcf	3977,4,c	;volatile
   394  000032  D001               	bra	u786
   395  000034                     u785:
   396  000034  8889               	bsf	3977,4,c	;volatile
   397  000036                     u786:
   398                           
   399                           ;main.c: 75: LATCbits.LC0 = DIR_3;
   400  000036  B033               	btfsc	_DIR_3,0,c
   401  000038  D002               	bra	u795
   402  00003A  908B               	bcf	3979,0,c	;volatile
   403  00003C  D001               	bra	u796
   404  00003E                     u795:
   405  00003E  808B               	bsf	3979,0,c	;volatile
   406  000040                     u796:
   407                           
   408                           ;main.c: 76: LATBbits.LB7 = DIR_4;
   409  000040  B032               	btfsc	_DIR_4,0,c
   410  000042  D002               	bra	u805
   411  000044  9E8A               	bcf	3978,7,c	;volatile
   412  000046  D001               	bra	u806
   413  000048                     u805:
   414  000048  8E8A               	bsf	3978,7,c	;volatile
   415  00004A                     u806:
   416                           
   417                           ;main.c: 83: if (recibi == 1) {
   418  00004A  0437               	decf	_recibi,w,c
   419  00004C  A4D8               	btfss	status,2,c
   420  00004E  D11F               	goto	l151
   421                           
   422                           ;main.c: 85: recibi = 0;
   423  000050  0E00               	movlw	0
   424  000052  6E37               	movwf	_recibi,c
   425                           
   426                           ;main.c: 87: if (palabra[0] == 'B') {
   427  000054  0E42               	movlw	66
   428  000056  1801               	xorwf	_palabra,w,c
   429  000058  A4D8               	btfss	status,2,c
   430  00005A  D01C               	goto	l152
   431                           
   432                           ;main.c: 90: PWM_duty = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   433  00005C  0ED0               	movlw	208
   434  00005E  2402               	addwf	_palabra+1,w,c
   435  000060  0100               	movlb	0	; () banked
   436  000062  6F60               	movwf	___wmul@multiplier& (0+255),b
   437  000064  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   438  000066  0EFF               	movlw	255
   439  000068  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   440  00006A  0E00               	movlw	0
   441  00006C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   442  00006E  0E0A               	movlw	10
   443  000070  6F62               	movwf	___wmul@multiplicand& (0+255),b
   444  000072  ECD0  F002         	call	___wmul	;wreg free
   445  000076  5003               	movf	_palabra+2,w,c
   446  000078  0100               	movlb	0	; () banked
   447  00007A  6F66               	movwf	??_main& (0+255),b
   448  00007C  6B67               	clrf	(??_main+1)& (0+255),b
   449  00007E  5160               	movf	?___wmul& (0+255),w,b
   450  000080  2766               	addwf	??_main& (0+255),f,b
   451  000082  5161               	movf	(?___wmul+1)& (0+255),w,b
   452  000084  2367               	addwfc	(??_main+1)& (0+255),f,b
   453  000086  0ED0               	movlw	208
   454  000088  2566               	addwf	??_main& (0+255),w,b
   455  00008A  6E4E               	movwf	_PWM_duty,c
   456  00008C  0EFF               	movlw	255
   457  00008E  2167               	addwfc	(??_main+1)& (0+255),w,b
   458  000090  6E4F               	movwf	_PWM_duty+1,c
   459                           
   460                           ;main.c: 91: } else if (palabra[0] == 'A') {
   461  000092  D7C3               	goto	l150
   462  000094                     l152:
   463                           
   464                           ; BSR set to: 0
   465  000094  0E41               	movlw	65
   466  000096  1801               	xorwf	_palabra,w,c
   467  000098  A4D8               	btfss	status,2,c
   468  00009A  D0E6               	goto	l154
   469                           
   470                           ;main.c: 93: caliber = ((palabra[1] - 48) * 10) + ((palabra[2] - 48));
   471  00009C  0ED0               	movlw	208
   472  00009E  2402               	addwf	_palabra+1,w,c
   473  0000A0  0100               	movlb	0	; () banked
   474  0000A2  6F60               	movwf	___wmul@multiplier& (0+255),b
   475  0000A4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   476  0000A6  0EFF               	movlw	255
   477  0000A8  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   478  0000AA  0E00               	movlw	0
   479  0000AC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   480  0000AE  0E0A               	movlw	10
   481  0000B0  6F62               	movwf	___wmul@multiplicand& (0+255),b
   482  0000B2  ECD0  F002         	call	___wmul	;wreg free
   483  0000B6  5003               	movf	_palabra+2,w,c
   484  0000B8  0100               	movlb	0	; () banked
   485  0000BA  6F66               	movwf	??_main& (0+255),b
   486  0000BC  6B67               	clrf	(??_main+1)& (0+255),b
   487  0000BE  5160               	movf	?___wmul& (0+255),w,b
   488  0000C0  2766               	addwf	??_main& (0+255),f,b
   489  0000C2  5161               	movf	(?___wmul+1)& (0+255),w,b
   490  0000C4  2367               	addwfc	(??_main+1)& (0+255),f,b
   491  0000C6  0ED0               	movlw	208
   492  0000C8  2566               	addwf	??_main& (0+255),w,b
   493  0000CA  6E1D               	movwf	_caliber,c
   494  0000CC  0EFF               	movlw	255
   495  0000CE  2167               	addwfc	(??_main+1)& (0+255),w,b
   496  0000D0  6E1E               	movwf	_caliber+1,c
   497                           
   498                           ;main.c: 94: diameter = ((palabra[3] - 48) * 1000) + ((palabra[4] - 48) * 100) + ((palab
      +                          ra[5] - 48) * 10) + ((palabra[6] - 48));
   499  0000D2  0ED0               	movlw	208
   500  0000D4  2404               	addwf	_palabra+3,w,c
   501  0000D6  6F60               	movwf	___wmul@multiplier& (0+255),b
   502  0000D8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   503  0000DA  0EFF               	movlw	255
   504  0000DC  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   505  0000DE  0E03               	movlw	3
   506  0000E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   507  0000E2  0EE8               	movlw	232
   508  0000E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
   509  0000E6  ECD0  F002         	call	___wmul	;wreg free
   510  0000EA  5007               	movf	_palabra+6,w,c
   511  0000EC  0100               	movlb	0	; () banked
   512  0000EE  6F66               	movwf	??_main& (0+255),b
   513  0000F0  6B67               	clrf	(??_main+1)& (0+255),b
   514  0000F2  5160               	movf	?___wmul& (0+255),w,b
   515  0000F4  2766               	addwf	??_main& (0+255),f,b
   516  0000F6  5161               	movf	(?___wmul+1)& (0+255),w,b
   517  0000F8  2367               	addwfc	(??_main+1)& (0+255),f,b
   518  0000FA  0ED0               	movlw	208
   519  0000FC  2405               	addwf	_palabra+4,w,c
   520  0000FE  6F60               	movwf	___wmul@multiplier& (0+255),b
   521  000100  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   522  000102  0EFF               	movlw	255
   523  000104  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   524  000106  0E00               	movlw	0
   525  000108  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   526  00010A  0E64               	movlw	100
   527  00010C  6F62               	movwf	___wmul@multiplicand& (0+255),b
   528  00010E  ECD0  F002         	call	___wmul	;wreg free
   529  000112  0100               	movlb	0	; () banked
   530  000114  5160               	movf	?___wmul& (0+255),w,b
   531  000116  2766               	addwf	??_main& (0+255),f,b
   532  000118  5161               	movf	(?___wmul+1)& (0+255),w,b
   533  00011A  2367               	addwfc	(??_main+1)& (0+255),f,b
   534  00011C  0ED0               	movlw	208
   535  00011E  2406               	addwf	_palabra+5,w,c
   536  000120  6F60               	movwf	___wmul@multiplier& (0+255),b
   537  000122  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   538  000124  0EFF               	movlw	255
   539  000126  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   540  000128  0E00               	movlw	0
   541  00012A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   542  00012C  0E0A               	movlw	10
   543  00012E  6F62               	movwf	___wmul@multiplicand& (0+255),b
   544  000130  ECD0  F002         	call	___wmul	;wreg free
   545  000134  0100               	movlb	0	; () banked
   546  000136  5160               	movf	?___wmul& (0+255),w,b
   547  000138  2766               	addwf	??_main& (0+255),f,b
   548  00013A  5161               	movf	(?___wmul+1)& (0+255),w,b
   549  00013C  2367               	addwfc	(??_main+1)& (0+255),f,b
   550  00013E  0ED0               	movlw	208
   551  000140  2566               	addwf	??_main& (0+255),w,b
   552  000142  6E1B               	movwf	_diameter,c
   553  000144  0EFF               	movlw	255
   554  000146  2167               	addwfc	(??_main+1)& (0+255),w,b
   555  000148  6E1C               	movwf	_diameter+1,c
   556                           
   557                           ;main.c: 95: length = ((palabra[7] - 48) * 10000) + ((palabra[8] - 48) * 1000) + ((palab
      +                          ra[9] - 48) * 100) + ((palabra[10] - 48) * 10) + ((palabra[11] - 48));
   558  00014A  0ED0               	movlw	208
   559  00014C  2408               	addwf	_palabra+7,w,c
   560  00014E  6F60               	movwf	___wmul@multiplier& (0+255),b
   561  000150  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   562  000152  0EFF               	movlw	255
   563  000154  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   564  000156  0E27               	movlw	39
   565  000158  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   566  00015A  0E10               	movlw	16
   567  00015C  6F62               	movwf	___wmul@multiplicand& (0+255),b
   568  00015E  ECD0  F002         	call	___wmul	;wreg free
   569  000162  500C               	movf	_palabra+11,w,c
   570  000164  0100               	movlb	0	; () banked
   571  000166  6F66               	movwf	??_main& (0+255),b
   572  000168  6B67               	clrf	(??_main+1)& (0+255),b
   573  00016A  5160               	movf	?___wmul& (0+255),w,b
   574  00016C  2766               	addwf	??_main& (0+255),f,b
   575  00016E  5161               	movf	(?___wmul+1)& (0+255),w,b
   576  000170  2367               	addwfc	(??_main+1)& (0+255),f,b
   577  000172  0ED0               	movlw	208
   578  000174  2409               	addwf	_palabra+8,w,c
   579  000176  6F60               	movwf	___wmul@multiplier& (0+255),b
   580  000178  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   581  00017A  0EFF               	movlw	255
   582  00017C  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   583  00017E  0E03               	movlw	3
   584  000180  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   585  000182  0EE8               	movlw	232
   586  000184  6F62               	movwf	___wmul@multiplicand& (0+255),b
   587  000186  ECD0  F002         	call	___wmul	;wreg free
   588  00018A  0100               	movlb	0	; () banked
   589  00018C  5160               	movf	?___wmul& (0+255),w,b
   590  00018E  2766               	addwf	??_main& (0+255),f,b
   591  000190  5161               	movf	(?___wmul+1)& (0+255),w,b
   592  000192  2367               	addwfc	(??_main+1)& (0+255),f,b
   593  000194  0ED0               	movlw	208
   594  000196  240A               	addwf	_palabra+9,w,c
   595  000198  6F60               	movwf	___wmul@multiplier& (0+255),b
   596  00019A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   597  00019C  0EFF               	movlw	255
   598  00019E  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   599  0001A0  0E00               	movlw	0
   600  0001A2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   601  0001A4  0E64               	movlw	100
   602  0001A6  6F62               	movwf	___wmul@multiplicand& (0+255),b
   603  0001A8  ECD0  F002         	call	___wmul	;wreg free
   604  0001AC  0100               	movlb	0	; () banked
   605  0001AE  5160               	movf	?___wmul& (0+255),w,b
   606  0001B0  2766               	addwf	??_main& (0+255),f,b
   607  0001B2  5161               	movf	(?___wmul+1)& (0+255),w,b
   608  0001B4  2367               	addwfc	(??_main+1)& (0+255),f,b
   609  0001B6  0ED0               	movlw	208
   610  0001B8  240B               	addwf	_palabra+10,w,c
   611  0001BA  6F60               	movwf	___wmul@multiplier& (0+255),b
   612  0001BC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   613  0001BE  0EFF               	movlw	255
   614  0001C0  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   615  0001C2  0E00               	movlw	0
   616  0001C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   617  0001C6  0E0A               	movlw	10
   618  0001C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
   619  0001CA  ECD0  F002         	call	___wmul	;wreg free
   620  0001CE  0100               	movlb	0	; () banked
   621  0001D0  5160               	movf	?___wmul& (0+255),w,b
   622  0001D2  2766               	addwf	??_main& (0+255),f,b
   623  0001D4  5161               	movf	(?___wmul+1)& (0+255),w,b
   624  0001D6  2367               	addwfc	(??_main+1)& (0+255),f,b
   625  0001D8  0ED0               	movlw	208
   626  0001DA  2566               	addwf	??_main& (0+255),w,b
   627  0001DC  6E19               	movwf	_length,c
   628  0001DE  0EFF               	movlw	255
   629  0001E0  2167               	addwfc	(??_main+1)& (0+255),w,b
   630  0001E2  6E1A               	movwf	_length+1,c
   631                           
   632                           ;main.c: 96: turns = ((palabra[12] - 48) * 1000) + ((palabra[13] - 48) * 100) + ((palabr
      +                          a[14] - 48) * 10) + ((palabra[15] - 48));
   633  0001E4  0ED0               	movlw	208
   634  0001E6  240D               	addwf	_palabra+12,w,c
   635  0001E8  6F60               	movwf	___wmul@multiplier& (0+255),b
   636  0001EA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   637  0001EC  0EFF               	movlw	255
   638  0001EE  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   639  0001F0  0E03               	movlw	3
   640  0001F2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   641  0001F4  0EE8               	movlw	232
   642  0001F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
   643  0001F8  ECD0  F002         	call	___wmul	;wreg free
   644  0001FC  5010               	movf	_palabra+15,w,c
   645  0001FE  0100               	movlb	0	; () banked
   646  000200  6F66               	movwf	??_main& (0+255),b
   647  000202  6B67               	clrf	(??_main+1)& (0+255),b
   648  000204  5160               	movf	?___wmul& (0+255),w,b
   649  000206  2766               	addwf	??_main& (0+255),f,b
   650  000208  5161               	movf	(?___wmul+1)& (0+255),w,b
   651  00020A  2367               	addwfc	(??_main+1)& (0+255),f,b
   652  00020C  0ED0               	movlw	208
   653  00020E  240E               	addwf	_palabra+13,w,c
   654  000210  6F60               	movwf	___wmul@multiplier& (0+255),b
   655  000212  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   656  000214  0EFF               	movlw	255
   657  000216  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   658  000218  0E00               	movlw	0
   659  00021A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   660  00021C  0E64               	movlw	100
   661  00021E  6F62               	movwf	___wmul@multiplicand& (0+255),b
   662  000220  ECD0  F002         	call	___wmul	;wreg free
   663  000224  0100               	movlb	0	; () banked
   664  000226  5160               	movf	?___wmul& (0+255),w,b
   665  000228  2766               	addwf	??_main& (0+255),f,b
   666  00022A  5161               	movf	(?___wmul+1)& (0+255),w,b
   667  00022C  2367               	addwfc	(??_main+1)& (0+255),f,b
   668  00022E  0ED0               	movlw	208
   669  000230  240F               	addwf	_palabra+14,w,c
   670  000232  6F60               	movwf	___wmul@multiplier& (0+255),b
   671  000234  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
   672  000236  0EFF               	movlw	255
   673  000238  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
   674  00023A  0E00               	movlw	0
   675  00023C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   676  00023E  0E0A               	movlw	10
   677  000240  6F62               	movwf	___wmul@multiplicand& (0+255),b
   678  000242  ECD0  F002         	call	___wmul	;wreg free
   679  000246  0100               	movlb	0	; () banked
   680  000248  5160               	movf	?___wmul& (0+255),w,b
   681  00024A  2766               	addwf	??_main& (0+255),f,b
   682  00024C  5161               	movf	(?___wmul+1)& (0+255),w,b
   683  00024E  2367               	addwfc	(??_main+1)& (0+255),f,b
   684  000250  0ED0               	movlw	208
   685  000252  2566               	addwf	??_main& (0+255),w,b
   686  000254  6E17               	movwf	_turns,c
   687  000256  0EFF               	movlw	255
   688  000258  2167               	addwfc	(??_main+1)& (0+255),w,b
   689  00025A  6E18               	movwf	_turns+1,c
   690                           
   691                           ; BSR set to: 0
   692                           ;main.c: 97: speed = palabra[15];
   693  00025C  C010  F015         	movff	_palabra+15,_speed
   694  000260  6A16               	clrf	_speed+1,c
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 99: busy_flag = 1;
   698  000262  0E01               	movlw	1
   699  000264  6E31               	movwf	_busy_flag,c
   700                           
   701                           ;main.c: 100: } else if (palabra[0] == 'D') {
   702  000266  D6D9               	goto	l150
   703  000268                     l154:
   704                           
   705                           ; BSR set to: 0
   706  000268  0E44               	movlw	68
   707  00026A  1801               	xorwf	_palabra,w,c
   708  00026C  A4D8               	btfss	status,2,c
   709  00026E  D6D5               	goto	l150
   710                           
   711                           ;main.c: 102: if (palabra[1] == '0') {
   712  000270  0E30               	movlw	48
   713  000272  1802               	xorwf	_palabra+1,w,c
   714  000274  A4D8               	btfss	status,2,c
   715  000276  D002               	goto	l157
   716                           
   717                           ;main.c: 104: DIR_3 = 0;
   718  000278  0E00               	movlw	0
   719  00027A  D005               	goto	L1
   720  00027C                     l157:
   721  00027C  0E31               	movlw	49
   722  00027E  1802               	xorwf	_palabra+1,w,c
   723  000280  A4D8               	btfss	status,2,c
   724  000282  D6CB               	goto	l150
   725                           
   726                           ;main.c: 108: DIR_3 = 1;
   727  000284  0E01               	movlw	1
   728  000286                     L1:
   729  000286  6E33               	movwf	_DIR_3,c
   730                           
   731                           ;main.c: 109: MOT_3 = 1;
   732  000288  0E01               	movlw	1
   733  00028A  6E39               	movwf	_MOT_3,c
   734                           
   735                           ;main.c: 114: }
   736                           ;main.c: 116: }
   737                           ;main.c: 119: } else if (GODONE == 0) {
   738                           
   739                           ;main.c: 111: } else if (palabra[1] == '2') {
   740  00028C  D6C6               	goto	l150
   741  00028E                     l151:
   742  00028E  B2C2               	btfsc	4034,1,c	;volatile
   743  000290  D6C4               	goto	l150
   744                           
   745                           ;main.c: 121: _delay((unsigned long)((10)*(8000000/4000.0)));
   746  000292  0E1A               	movlw	26
   747  000294  0100               	movlb	0	; () banked
   748  000296  6F66               	movwf	??_main& (0+255),b
   749  000298  0EF8               	movlw	248
   750  00029A                     u907:
   751  00029A  2EE8               	decfsz	wreg,f,c
   752  00029C  D7FE               	bra	u907
   753  00029E  2F66               	decfsz	??_main& (0+255),f,b
   754  0002A0  D7FC               	bra	u907
   755  0002A2  F000               	nop	
   756                           
   757                           ;main.c: 122: ADCON0bits.CHS = !ADCON0bits.CHS;
   758  0002A4  30C2               	rrcf	4034,w,c	;volatile
   759  0002A6  32E8               	rrcf	wreg,f,c
   760  0002A8  0B0F               	andlw	15
   761  0002AA  0900               	iorlw	0
   762  0002AC  A4D8               	btfss	status,2,c
   763  0002AE  D004               	goto	u880
   764  0002B0  0100               	movlb	0	; () banked
   765  0002B2  6B66               	clrf	??_main& (0+255),b
   766  0002B4  2B66               	incf	??_main& (0+255),f,b
   767  0002B6  D002               	goto	u898
   768  0002B8                     u880:
   769  0002B8  0100               	movlb	0	; () banked
   770  0002BA  6B66               	clrf	??_main& (0+255),b
   771  0002BC                     u898:
   772  0002BC  4766               	rlncf	??_main& (0+255),f,b
   773  0002BE  4766               	rlncf	??_main& (0+255),f,b
   774  0002C0  50C2               	movf	4034,w,c	;volatile
   775  0002C2  1966               	xorwf	??_main& (0+255),w,b
   776  0002C4  0BC3               	andlw	-61
   777  0002C6  1966               	xorwf	??_main& (0+255),w,b
   778  0002C8  6EC2               	movwf	4034,c	;volatile
   779                           
   780                           ; BSR set to: 0
   781                           ;main.c: 123: GODONE = 1;
   782  0002CA  82C2               	bsf	4034,1,c	;volatile
   783                           
   784                           ; BSR set to: 0
   785                           
   786                           ; BSR set to: 0
   787                           
   788                           ; BSR set to: 0
   789  0002CC  D6A6               	goto	l150
   790  0002CE                     __end_of_main:
   791                           	opt stack 0
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1l	equ	0xFE1
   800                           status	equ	0xFD8
   801                           
   802 ;; *************** function ___wmul *****************
   803 ;; Defined at:
   804 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  multiplier      2    0[BANK0 ] unsigned int 
   807 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  product         2    4[BANK0 ] unsigned int 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  2    0[BANK0 ] unsigned int 
   812 ;; Registers used:
   813 ;;		wreg, status,2, status,0, prodl, prodh
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   819 ;;      Params:         0       4       0       0       0       0       0       0       0
   820 ;;      Locals:         0       2       0       0       0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0       0       0
   822 ;;      Totals:         0       6       0       0       0       0       0       0       0
   823 ;;Total ram usage:        6 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text1
   834  0005A0                     __ptext1:
   835                           	opt stack 0
   836  0005A0                     ___wmul:
   837                           	opt stack 29
   838                           
   839                           ; BSR set to: 0
   840                           ;incstack = 0
   841  0005A0  0100               	movlb	0	; () banked
   842  0005A2  5160               	movf	___wmul@multiplier& (0+255),w,b
   843  0005A4  0362               	mulwf	___wmul@multiplicand& (0+255),b
   844  0005A6  CFF3 F064          	movff	prodl,___wmul@product
   845  0005AA  CFF4 F065          	movff	prodh,___wmul@product+1
   846  0005AE  5160               	movf	___wmul@multiplier& (0+255),w,b
   847  0005B0  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
   848  0005B2  50F3               	movf	prodl,w,c
   849  0005B4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
   850  0005B6  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
   851  0005B8  0362               	mulwf	___wmul@multiplicand& (0+255),b
   852  0005BA  50F3               	movf	prodl,w,c
   853  0005BC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
   854                           
   855                           ; BSR set to: 0
   856  0005BE  C064  F060         	movff	___wmul@product,?___wmul
   857  0005C2  C065  F061         	movff	___wmul@product+1,?___wmul+1
   858  0005C6  0012               	return	
   859  0005C8                     __end_of___wmul:
   860                           	opt stack 0
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           prodh	equ	0xFF4
   866                           prodl	equ	0xFF3
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           postdec1	equ	0xFE5
   870                           fsr1l	equ	0xFE1
   871                           status	equ	0xFD8
   872                           
   873 ;; *************** function _InitApp *****************
   874 ;; Defined at:
   875 ;;		line 33 in file "user.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, status,2
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   889 ;;      Params:         0       0       0       0       0       0       0       0       0
   890 ;;      Locals:         0       0       0       0       0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0       0       0       0       0
   892 ;;      Totals:         0       0       0       0       0       0       0       0       0
   893 ;;Total ram usage:        0 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    1
   896 ;; This function calls:
   897 ;;		Nothing
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text2
   904  0004C8                     __ptext2:
   905                           	opt stack 0
   906  0004C8                     _InitApp:
   907                           	opt stack 29
   908                           
   909                           ;user.c: 35: PORTA = 0;
   910                           
   911                           ; BSR set to: 0
   912                           ;incstack = 0
   913  0004C8  0E00               	movlw	0
   914  0004CA  6E80               	movwf	3968,c	;volatile
   915                           
   916                           ;user.c: 36: LATA = 0;
   917  0004CC  0E00               	movlw	0
   918  0004CE  6E89               	movwf	3977,c	;volatile
   919                           
   920                           ;user.c: 37: PORTB = 0;
   921  0004D0  0E00               	movlw	0
   922  0004D2  6E81               	movwf	3969,c	;volatile
   923                           
   924                           ;user.c: 38: LATB = 0;
   925  0004D4  0E00               	movlw	0
   926  0004D6  6E8A               	movwf	3978,c	;volatile
   927                           
   928                           ;user.c: 39: PORTC = 0;
   929  0004D8  0E00               	movlw	0
   930  0004DA  6E82               	movwf	3970,c	;volatile
   931                           
   932                           ;user.c: 40: LATC = 0;
   933  0004DC  0E00               	movlw	0
   934  0004DE  6E8B               	movwf	3979,c	;volatile
   935                           
   936                           ;user.c: 42: ADCON1 = 0b1101;
   937  0004E0  0E0D               	movlw	13
   938  0004E2  6EC1               	movwf	4033,c	;volatile
   939                           
   940                           ;user.c: 43: TRISAbits.TRISA0 = 1;
   941  0004E4  8092               	bsf	3986,0,c	;volatile
   942                           
   943                           ;user.c: 44: TRISAbits.TRISA1 = 1;
   944  0004E6  8292               	bsf	3986,1,c	;volatile
   945                           
   946                           ;user.c: 45: ADCON0bits.CHS = 0;
   947  0004E8  94C2               	bcf	4034,2,c	;volatile
   948  0004EA  96C2               	bcf	4034,3,c	;volatile
   949  0004EC  98C2               	bcf	4034,4,c	;volatile
   950  0004EE  9AC2               	bcf	4034,5,c	;volatile
   951                           
   952                           ;user.c: 46: ADCON2 = 0b10101100;
   953  0004F0  0EAC               	movlw	172
   954  0004F2  6EC0               	movwf	4032,c	;volatile
   955                           
   956                           ;user.c: 47: PIE1bits.ADIE = 1;
   957  0004F4  8C9D               	bsf	3997,6,c	;volatile
   958                           
   959                           ;user.c: 48: PIR1bits.ADIF = 0;
   960  0004F6  9C9E               	bcf	3998,6,c	;volatile
   961                           
   962                           ;user.c: 49: ADCON0bits.ADON = 1;
   963  0004F8  80C2               	bsf	4034,0,c	;volatile
   964                           
   965                           ;user.c: 51: TRISAbits.RA2 = 0;
   966  0004FA  9492               	bcf	3986,2,c	;volatile
   967                           
   968                           ;user.c: 52: TRISAbits.RA3 = 0;
   969  0004FC  9692               	bcf	3986,3,c	;volatile
   970                           
   971                           ;user.c: 53: TRISAbits.RA4 = 0;
   972  0004FE  9892               	bcf	3986,4,c	;volatile
   973                           
   974                           ;user.c: 54: TRISAbits.RA5 = 0;
   975  000500  9A92               	bcf	3986,5,c	;volatile
   976                           
   977                           ;user.c: 55: TRISCbits.RC0 = 0;
   978  000502  9094               	bcf	3988,0,c	;volatile
   979                           
   980                           ;user.c: 56: TRISCbits.RC1 = 0;
   981  000504  9294               	bcf	3988,1,c	;volatile
   982                           
   983                           ;user.c: 57: TRISBbits.RB7 = 0;
   984  000506  9E93               	bcf	3987,7,c	;volatile
   985                           
   986                           ;user.c: 58: TRISBbits.RB6 = 0;
   987  000508  9C93               	bcf	3987,6,c	;volatile
   988                           
   989                           ;user.c: 59: TRISCbits.RC2 = 0;
   990  00050A  9494               	bcf	3988,2,c	;volatile
   991                           
   992                           ;user.c: 61: RCONbits.IPEN = 0;
   993  00050C  9ED0               	bcf	4048,7,c	;volatile
   994                           
   995                           ;user.c: 63: INTCONbits.GIE = 1;
   996  00050E  8EF2               	bsf	intcon,7,c	;volatile
   997                           
   998                           ;user.c: 64: INTCONbits.PEIE = 1;
   999  000510  8CF2               	bsf	intcon,6,c	;volatile
  1000                           
  1001                           ;user.c: 65: INTCONbits.TMR0IE = 1;
  1002  000512  8AF2               	bsf	intcon,5,c	;volatile
  1003                           
  1004                           ;user.c: 66: INTCONbits.TMR0IF = 0;
  1005  000514  94F2               	bcf	intcon,2,c	;volatile
  1006                           
  1007                           ;user.c: 67: INTCON2bits.TMR0IP = 1;
  1008  000516  84F1               	bsf	intcon2,2,c	;volatile
  1009                           
  1010                           ;user.c: 68: T0CONbits.T08BIT = 1;
  1011  000518  8CD5               	bsf	4053,6,c	;volatile
  1012                           
  1013                           ;user.c: 69: T0CONbits.T0CS = 0;
  1014  00051A  9AD5               	bcf	4053,5,c	;volatile
  1015                           
  1016                           ;user.c: 70: T0CONbits.PSA = 0;
  1017  00051C  96D5               	bcf	4053,3,c	;volatile
  1018                           
  1019                           ;user.c: 71: T0CONbits.T0PS = 0b101;
  1020  00051E  50D5               	movf	4053,w,c	;volatile
  1021  000520  0BF8               	andlw	-8
  1022  000522  0905               	iorlw	5
  1023  000524  6ED5               	movwf	4053,c	;volatile
  1024                           
  1025                           ;user.c: 72: TMR0 = 0x6;
  1026  000526  0E00               	movlw	0
  1027  000528  6ED7               	movwf	4055,c	;volatile
  1028  00052A  0E06               	movlw	6
  1029  00052C  6ED6               	movwf	4054,c	;volatile
  1030                           
  1031                           ;user.c: 74: INTCON3bits.INT1IE = 1;
  1032  00052E  86F0               	bsf	intcon3,3,c	;volatile
  1033                           
  1034                           ;user.c: 75: INTCON3bits.INT2IE = 1;
  1035  000530  88F0               	bsf	intcon3,4,c	;volatile
  1036                           
  1037                           ;user.c: 76: INTCON3bits.INT1IF = 0;
  1038  000532  90F0               	bcf	intcon3,0,c	;volatile
  1039                           
  1040                           ;user.c: 77: INTCON3bits.INT2IF = 0;
  1041  000534  92F0               	bcf	intcon3,1,c	;volatile
  1042                           
  1043                           ;user.c: 79: TRISCbits.RC6 = 0;
  1044  000536  9C94               	bcf	3988,6,c	;volatile
  1045                           
  1046                           ;user.c: 80: TRISCbits.RC7 = 1;
  1047  000538  8E94               	bsf	3988,7,c	;volatile
  1048                           
  1049                           ;user.c: 81: BRGH = 1;
  1050  00053A  84AC               	bsf	4012,2,c	;volatile
  1051                           
  1052                           ;user.c: 82: BRG16 = 1;
  1053  00053C  86B8               	bsf	4024,3,c	;volatile
  1054                           
  1055                           ;user.c: 83: SPBRG = 207;
  1056  00053E  0ECF               	movlw	207
  1057  000540  6EAF               	movwf	4015,c	;volatile
  1058                           
  1059                           ;user.c: 84: SPEN = 1;
  1060  000542  8EAB               	bsf	4011,7,c	;volatile
  1061                           
  1062                           ;user.c: 85: SYNC = 0;
  1063  000544  98AC               	bcf	4012,4,c	;volatile
  1064                           
  1065                           ;user.c: 86: TXEN = 1;
  1066  000546  8AAC               	bsf	4012,5,c	;volatile
  1067                           
  1068                           ;user.c: 87: CREN = 1;
  1069  000548  88AB               	bsf	4011,4,c	;volatile
  1070                           
  1071                           ;user.c: 88: TX9 = 0;
  1072  00054A  9CAC               	bcf	4012,6,c	;volatile
  1073                           
  1074                           ;user.c: 89: RX9 = 0;
  1075  00054C  9CAB               	bcf	4011,6,c	;volatile
  1076                           
  1077                           ;user.c: 90: RCIE = 1;
  1078  00054E  8A9D               	bsf	3997,5,c	;volatile
  1079                           
  1080                           ;user.c: 91: TXIE = 0;
  1081  000550  989D               	bcf	3997,4,c	;volatile
  1082                           
  1083                           ;user.c: 93: PR2 = 99;
  1084  000552  0E63               	movlw	99
  1085  000554  6ECB               	movwf	4043,c	;volatile
  1086                           
  1087                           ;user.c: 94: CCP1CONbits.DC1B = 0;
  1088  000556  0ECF               	movlw	-49
  1089  000558  16BD               	andwf	4029,f,c	;volatile
  1090                           
  1091                           ;user.c: 95: T2CONbits.T2CKPS = 0b00;
  1092  00055A  0EFC               	movlw	-4
  1093  00055C  16CA               	andwf	4042,f,c	;volatile
  1094                           
  1095                           ;user.c: 96: T2CONbits.TMR2ON = 1;
  1096  00055E  84CA               	bsf	4042,2,c	;volatile
  1097                           
  1098                           ;user.c: 97: CCP1CONbits.CCP1M = 0b1111;
  1099  000560  80BD               	bsf	4029,0,c	;volatile
  1100  000562  82BD               	bsf	4029,1,c	;volatile
  1101  000564  84BD               	bsf	4029,2,c	;volatile
  1102  000566  86BD               	bsf	4029,3,c	;volatile
  1103  000568  0012               	return		;funcret
  1104  00056A                     __end_of_InitApp:
  1105                           	opt stack 0
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           intcon	equ	0xFF2
  1113                           intcon2	equ	0xFF1
  1114                           intcon3	equ	0xFF0
  1115                           postinc0	equ	0xFEE
  1116                           wreg	equ	0xFE8
  1117                           postdec1	equ	0xFE5
  1118                           fsr1l	equ	0xFE1
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _ConfigureOscillator *****************
  1122 ;; Defined at:
  1123 ;;		line 24 in file "system.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1137 ;;      Params:         0       0       0       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1140 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1141 ;;Total ram usage:        0 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    1
  1144 ;; This function calls:
  1145 ;;		Nothing
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text3
  1152  0005C8                     __ptext3:
  1153                           	opt stack 0
  1154  0005C8                     _ConfigureOscillator:
  1155                           	opt stack 29
  1156                           
  1157                           ;system.c: 27: OSCCONbits.IRCF = 0b111;
  1158                           
  1159                           ;incstack = 0
  1160  0005C8  88D3               	bsf	4051,4,c	;volatile
  1161  0005CA  8AD3               	bsf	4051,5,c	;volatile
  1162  0005CC  8CD3               	bsf	4051,6,c	;volatile
  1163                           
  1164                           ;system.c: 28: OSCCONbits.SCS = 0b11;
  1165  0005CE  0E03               	movlw	3
  1166  0005D0  12D3               	iorwf	4051,f,c	;volatile
  1167  0005D2  0012               	return		;funcret
  1168  0005D4                     __end_of_ConfigureOscillator:
  1169                           	opt stack 0
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           prodh	equ	0xFF4
  1175                           prodl	equ	0xFF3
  1176                           intcon	equ	0xFF2
  1177                           intcon2	equ	0xFF1
  1178                           intcon3	equ	0xFF0
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           postdec1	equ	0xFE5
  1182                           fsr1l	equ	0xFE1
  1183                           status	equ	0xFD8
  1184                           
  1185 ;; *************** function _high_isr *****************
  1186 ;; Defined at:
  1187 ;;		line 41 in file "interrupts.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1201 ;;      Params:         0       0       0       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1203 ;;      Temps:         19       0       0       0       0       0       0       0       0
  1204 ;;      Totals:        19       0       0       0       0       0       0       0       0
  1205 ;;Total ram usage:       19 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		Interrupt level 2
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	intcode
  1215  000008                     __pintcode:
  1216                           	opt stack 0
  1217  000008                     _high_isr:
  1218                           	opt stack 29
  1219                           
  1220                           ;incstack = 0
  1221  000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1222  00000A  ED67  F001         	call	int_func,f	;refresh shadow registers
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           prodh	equ	0xFF4
  1228                           prodl	equ	0xFF3
  1229                           intcon	equ	0xFF2
  1230                           intcon2	equ	0xFF1
  1231                           intcon3	equ	0xFF0
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           postdec1	equ	0xFE5
  1235                           fsr1l	equ	0xFE1
  1236                           status	equ	0xFD8
  1237                           
  1238                           	psect	intcode_body
  1239  0002CE                     __pintcode_body:
  1240                           	opt stack 29
  1241  0002CE                     int_func:
  1242                           	opt stack 29
  1243  0002CE  0006               	pop		; remove dummy address from shadow register refresh
  1244  0002D0  CFFA F03C          	movff	pclath,??_high_isr+1
  1245  0002D4  CFFB F03D          	movff	pclatu,??_high_isr+2
  1246  0002D8  CFE9 F03E          	movff	fsr0l,??_high_isr+3
  1247  0002DC  CFEA F03F          	movff	fsr0h,??_high_isr+4
  1248  0002E0  CFE1 F040          	movff	fsr1l,??_high_isr+5
  1249  0002E4  CFE2 F041          	movff	fsr1h,??_high_isr+6
  1250  0002E8  CFD9 F042          	movff	fsr2l,??_high_isr+7
  1251  0002EC  CFDA F043          	movff	fsr2h,??_high_isr+8
  1252  0002F0  CFF3 F044          	movff	prodl,??_high_isr+9
  1253  0002F4  CFF4 F045          	movff	prodh,??_high_isr+10
  1254  0002F8  CFF6 F046          	movff	tblptrl,??_high_isr+11
  1255  0002FC  CFF7 F047          	movff	tblptrh,??_high_isr+12
  1256  000300  CFF8 F048          	movff	tblptru,??_high_isr+13
  1257  000304  CFF5 F049          	movff	tablat,??_high_isr+14
  1258  000308  C053  F04A         	movff	btemp,??_high_isr+15
  1259  00030C  C054  F04B         	movff	btemp+1,??_high_isr+16
  1260  000310  C055  F04C         	movff	btemp+2,??_high_isr+17
  1261  000314  C056  F04D         	movff	btemp+3,??_high_isr+18
  1262                           
  1263                           ;interrupts.c: 42: if (INTCONbits.TMR0IF) {
  1264  000318  A4F2               	btfss	intcon,2,c	;volatile
  1265  00031A  D075               	goto	i2l63
  1266                           
  1267                           ;interrupts.c: 44: INTCONbits.TMR0IF = 0;
  1268  00031C  94F2               	bcf	intcon,2,c	;volatile
  1269                           
  1270                           ;interrupts.c: 45: overflow++;
  1271  00031E  4A2D               	infsnz	_overflow,f,c
  1272  000320  2A2E               	incf	_overflow+1,f,c
  1273                           
  1274                           ;interrupts.c: 46: TMR0 = 200;
  1275  000322  0E00               	movlw	0
  1276  000324  6ED7               	movwf	4055,c	;volatile
  1277  000326  0EC8               	movlw	200
  1278  000328  6ED6               	movwf	4054,c	;volatile
  1279                           
  1280                           ;interrupts.c: 47: MOT_1_count++;
  1281  00032A  4A27               	infsnz	_MOT_1_count,f,c
  1282  00032C  2A28               	incf	_MOT_1_count+1,f,c
  1283                           
  1284                           ;interrupts.c: 48: MOT_2_count++;
  1285  00032E  4A25               	infsnz	_MOT_2_count,f,c
  1286  000330  2A26               	incf	_MOT_2_count+1,f,c
  1287                           
  1288                           ;interrupts.c: 49: MOT_3_count++;
  1289  000332  4A23               	infsnz	_MOT_3_count,f,c
  1290  000334  2A24               	incf	_MOT_3_count+1,f,c
  1291                           
  1292                           ;interrupts.c: 50: MOT_4_count++;
  1293  000336  4A21               	infsnz	_MOT_4_count,f,c
  1294  000338  2A22               	incf	_MOT_4_count+1,f,c
  1295                           
  1296                           ;interrupts.c: 52: if (MOT_1) {
  1297  00033A  5052               	movf	_MOT_1,w,c
  1298  00033C  B4D8               	btfsc	status,2,c
  1299  00033E  D017               	goto	i2l65
  1300                           
  1301                           ;interrupts.c: 53: if (MOT_1_count == 25) {
  1302  000340  0E19               	movlw	25
  1303  000342  1827               	xorwf	_MOT_1_count,w,c
  1304  000344  1028               	iorwf	_MOT_1_count+1,w,c
  1305  000346  A4D8               	btfss	status,2,c
  1306  000348  D012               	goto	i2l65
  1307                           
  1308                           ;interrupts.c: 54: LATAbits.LA3 = !PORTAbits.RA3;
  1309  00034A  B680               	btfsc	3968,3,c	;volatile
  1310  00034C  D003               	goto	i2u42_40
  1311  00034E  6A3B               	clrf	??_high_isr& (0+255),c
  1312  000350  2A3B               	incf	??_high_isr& (0+255),f,c
  1313  000352  D001               	goto	i2u43_48
  1314  000354                     i2u42_40:
  1315  000354  6A3B               	clrf	??_high_isr& (0+255),c
  1316  000356                     i2u43_48:
  1317  000356  463B               	rlncf	??_high_isr,f,c
  1318  000358  463B               	rlncf	??_high_isr,f,c
  1319  00035A  463B               	rlncf	??_high_isr,f,c
  1320  00035C  5089               	movf	3977,w,c	;volatile
  1321  00035E  183B               	xorwf	??_high_isr,w,c
  1322  000360  0BF7               	andlw	-9
  1323  000362  183B               	xorwf	??_high_isr,w,c
  1324  000364  6E89               	movwf	3977,c	;volatile
  1325                           
  1326                           ;interrupts.c: 55: MOT_1_count = 0;
  1327  000366  0E00               	movlw	0
  1328  000368  6E28               	movwf	_MOT_1_count+1,c
  1329  00036A  0E00               	movlw	0
  1330  00036C  6E27               	movwf	_MOT_1_count,c
  1331  00036E                     i2l65:
  1332                           
  1333                           ;interrupts.c: 56: }
  1334                           ;interrupts.c: 57: }
  1335                           ;interrupts.c: 58: if (MOT_2) {
  1336  00036E  503A               	movf	_MOT_2,w,c
  1337  000370  B4D8               	btfsc	status,2,c
  1338  000372  D016               	goto	i2l67
  1339                           
  1340                           ;interrupts.c: 59: if (MOT_2_count == 2) {
  1341  000374  0E02               	movlw	2
  1342  000376  1825               	xorwf	_MOT_2_count,w,c
  1343  000378  1026               	iorwf	_MOT_2_count+1,w,c
  1344  00037A  A4D8               	btfss	status,2,c
  1345  00037C  D011               	goto	i2l67
  1346                           
  1347                           ;interrupts.c: 60: LATAbits.LA5 = !PORTAbits.RA5;
  1348  00037E  BA80               	btfsc	3968,5,c	;volatile
  1349  000380  D003               	goto	i2u46_40
  1350  000382  6A3B               	clrf	??_high_isr& (0+255),c
  1351  000384  2A3B               	incf	??_high_isr& (0+255),f,c
  1352  000386  D001               	goto	i2u47_48
  1353  000388                     i2u46_40:
  1354  000388  6A3B               	clrf	??_high_isr& (0+255),c
  1355  00038A                     i2u47_48:
  1356  00038A  3A3B               	swapf	??_high_isr,f,c
  1357  00038C  463B               	rlncf	??_high_isr,f,c
  1358  00038E  5089               	movf	3977,w,c	;volatile
  1359  000390  183B               	xorwf	??_high_isr,w,c
  1360  000392  0BDF               	andlw	-33
  1361  000394  183B               	xorwf	??_high_isr,w,c
  1362  000396  6E89               	movwf	3977,c	;volatile
  1363                           
  1364                           ;interrupts.c: 61: MOT_2_count = 0;
  1365  000398  0E00               	movlw	0
  1366  00039A  6E26               	movwf	_MOT_2_count+1,c
  1367  00039C  0E00               	movlw	0
  1368  00039E  6E25               	movwf	_MOT_2_count,c
  1369  0003A0                     i2l67:
  1370                           
  1371                           ;interrupts.c: 62: }
  1372                           ;interrupts.c: 63: }
  1373                           ;interrupts.c: 64: if (MOT_3) {
  1374  0003A0  5039               	movf	_MOT_3,w,c
  1375  0003A2  B4D8               	btfsc	status,2,c
  1376  0003A4  D015               	goto	i2l69
  1377                           
  1378                           ;interrupts.c: 65: if (MOT_3_count == 5) {
  1379  0003A6  0E05               	movlw	5
  1380  0003A8  1823               	xorwf	_MOT_3_count,w,c
  1381  0003AA  1024               	iorwf	_MOT_3_count+1,w,c
  1382  0003AC  A4D8               	btfss	status,2,c
  1383  0003AE  D010               	goto	i2l69
  1384                           
  1385                           ;interrupts.c: 66: LATCbits.LC1 = !PORTCbits.RC1;
  1386  0003B0  B282               	btfsc	3970,1,c	;volatile
  1387  0003B2  D003               	goto	i2u50_40
  1388  0003B4  6A3B               	clrf	??_high_isr& (0+255),c
  1389  0003B6  2A3B               	incf	??_high_isr& (0+255),f,c
  1390  0003B8  D001               	goto	i2u51_48
  1391  0003BA                     i2u50_40:
  1392  0003BA  6A3B               	clrf	??_high_isr& (0+255),c
  1393  0003BC                     i2u51_48:
  1394  0003BC  463B               	rlncf	??_high_isr,f,c
  1395  0003BE  508B               	movf	3979,w,c	;volatile
  1396  0003C0  183B               	xorwf	??_high_isr,w,c
  1397  0003C2  0BFD               	andlw	-3
  1398  0003C4  183B               	xorwf	??_high_isr,w,c
  1399  0003C6  6E8B               	movwf	3979,c	;volatile
  1400                           
  1401                           ;interrupts.c: 67: MOT_3_count = 0;
  1402  0003C8  0E00               	movlw	0
  1403  0003CA  6E24               	movwf	_MOT_3_count+1,c
  1404  0003CC  0E00               	movlw	0
  1405  0003CE  6E23               	movwf	_MOT_3_count,c
  1406  0003D0                     i2l69:
  1407                           
  1408                           ;interrupts.c: 68: }
  1409                           ;interrupts.c: 69: }
  1410                           ;interrupts.c: 70: if (MOT_4) {
  1411  0003D0  5038               	movf	_MOT_4,w,c
  1412  0003D2  B4D8               	btfsc	status,2,c
  1413  0003D4  D053               	goto	i2l86
  1414                           
  1415                           ;interrupts.c: 71: if (MOT_4_count == 5) {
  1416  0003D6  0E05               	movlw	5
  1417  0003D8  1821               	xorwf	_MOT_4_count,w,c
  1418  0003DA  1022               	iorwf	_MOT_4_count+1,w,c
  1419  0003DC  A4D8               	btfss	status,2,c
  1420  0003DE  D04E               	goto	i2l86
  1421                           
  1422                           ;interrupts.c: 72: LATBbits.LB6 = !PORTBbits.RB6;
  1423  0003E0  BC81               	btfsc	3969,6,c	;volatile
  1424  0003E2  D003               	goto	i2u54_40
  1425  0003E4  6A3B               	clrf	??_high_isr& (0+255),c
  1426  0003E6  2A3B               	incf	??_high_isr& (0+255),f,c
  1427  0003E8  D001               	goto	i2u55_48
  1428  0003EA                     i2u54_40:
  1429  0003EA  6A3B               	clrf	??_high_isr& (0+255),c
  1430  0003EC                     i2u55_48:
  1431  0003EC  3A3B               	swapf	??_high_isr,f,c
  1432  0003EE  463B               	rlncf	??_high_isr,f,c
  1433  0003F0  463B               	rlncf	??_high_isr,f,c
  1434  0003F2  508A               	movf	3978,w,c	;volatile
  1435  0003F4  183B               	xorwf	??_high_isr,w,c
  1436  0003F6  0BBF               	andlw	-65
  1437  0003F8  183B               	xorwf	??_high_isr,w,c
  1438  0003FA  6E8A               	movwf	3978,c	;volatile
  1439                           
  1440                           ;interrupts.c: 73: MOT_4_count = 0;
  1441  0003FC  0E00               	movlw	0
  1442  0003FE  6E22               	movwf	_MOT_4_count+1,c
  1443  000400  0E00               	movlw	0
  1444  000402  6E21               	movwf	_MOT_4_count,c
  1445                           
  1446                           ;interrupts.c: 74: }
  1447                           ;interrupts.c: 75: }
  1448                           ;interrupts.c: 77: } else if (PIR1bits.RCIF) {
  1449  000404  D03B               	goto	i2l86
  1450  000406                     i2l63:
  1451  000406  AA9E               	btfss	3998,5,c	;volatile
  1452  000408  D01A               	goto	i2l73
  1453                           
  1454                           ;interrupts.c: 79: PIR1bits.RCIF = 0;
  1455  00040A  9A9E               	bcf	3998,5,c	;volatile
  1456                           
  1457                           ;interrupts.c: 80: palabra[n] = RCREG;
  1458  00040C  0E01               	movlw	low _palabra
  1459  00040E  242F               	addwf	_n,w,c
  1460  000410  6ED9               	movwf	fsr2l,c
  1461  000412  0E00               	movlw	high _palabra
  1462  000414  2030               	addwfc	_n+1,w,c
  1463  000416  6EDA               	movwf	fsr2h,c
  1464  000418  CFAE FFDF          	movff	4014,indf2	;volatile
  1465                           
  1466                           ;interrupts.c: 81: n++;
  1467  00041C  4A2F               	infsnz	_n,f,c
  1468  00041E  2A30               	incf	_n+1,f,c
  1469                           
  1470                           ;interrupts.c: 82: if (RCREG == '\n') {
  1471  000420  0E0A               	movlw	10
  1472  000422  18AE               	xorwf	4014,w,c	;volatile
  1473  000424  A4D8               	btfss	status,2,c
  1474  000426  D02A               	goto	i2l86
  1475                           
  1476                           ;interrupts.c: 83: TXREG = palabra[0];
  1477  000428  C001  FFAD         	movff	_palabra,4013	;volatile
  1478  00042C  A89E               	btfss	3998,4,c	;volatile
  1479  00042E  D7FE               	goto	i2l76
  1480                           
  1481                           ;interrupts.c: 85: recibi = 1;
  1482  000430  0E01               	movlw	1
  1483  000432  6E37               	movwf	_recibi,c
  1484                           
  1485                           ;interrupts.c: 86: n = 0;
  1486  000434  0E00               	movlw	0
  1487  000436  6E30               	movwf	_n+1,c
  1488  000438  0E00               	movlw	0
  1489  00043A  6E2F               	movwf	_n,c
  1490                           
  1491                           ;interrupts.c: 87: }
  1492                           ;interrupts.c: 88: } else if (PIR1bits.ADIF) {
  1493  00043C  D01F               	goto	i2l86
  1494  00043E                     i2l73:
  1495  00043E  AC9E               	btfss	3998,6,c	;volatile
  1496  000440  D017               	goto	i2l79
  1497                           
  1498                           ;interrupts.c: 90: PIR1bits.ADIF = 0;
  1499  000442  9C9E               	bcf	3998,6,c	;volatile
  1500                           
  1501                           ;interrupts.c: 91: if (ADCON0bits.CHS == 0b0000) {
  1502  000444  30C2               	rrcf	4034,w,c	;volatile
  1503  000446  32E8               	rrcf	wreg,f,c
  1504  000448  0B0F               	andlw	15
  1505  00044A  0900               	iorlw	0
  1506  00044C  A4D8               	btfss	status,2,c
  1507  00044E  D005               	goto	i2l80
  1508                           
  1509                           ;interrupts.c: 92: ADC_value_press = ADRES;
  1510  000450  CFC3 F02B          	movff	4035,_ADC_value_press	;volatile
  1511  000454  CFC4 F02C          	movff	4036,_ADC_value_press+1	;volatile
  1512                           
  1513                           ;interrupts.c: 93: } else if (ADCON0bits.CHS == 0b0001) {
  1514  000458  D011               	goto	i2l86
  1515  00045A                     i2l80:
  1516  00045A  30C2               	rrcf	4034,w,c	;volatile
  1517  00045C  32E8               	rrcf	wreg,f,c
  1518  00045E  0B0F               	andlw	15
  1519  000460  06E8               	decf	wreg,f,c
  1520  000462  A4D8               	btfss	status,2,c
  1521  000464  D00B               	goto	i2l86
  1522                           
  1523                           ;interrupts.c: 94: ADC_value_dist = ADRES;
  1524  000466  CFC3 F029          	movff	4035,_ADC_value_dist	;volatile
  1525  00046A  CFC4 F02A          	movff	4036,_ADC_value_dist+1	;volatile
  1526                           
  1527                           ;interrupts.c: 95: }
  1528                           ;interrupts.c: 99: } else if (INTCON3bits.INT1IF) {
  1529  00046E  D006               	goto	i2l86
  1530  000470                     i2l79:
  1531  000470  A0F0               	btfss	intcon3,0,c	;volatile
  1532  000472  D002               	goto	i2l84
  1533                           
  1534                           ;interrupts.c: 101: INTCON3bits.INT1IF = 0;
  1535  000474  90F0               	bcf	intcon3,0,c	;volatile
  1536                           
  1537                           ;interrupts.c: 103: } else if (INTCON3bits.INT2IF) {
  1538  000476  D002               	goto	i2l86
  1539  000478                     i2l84:
  1540  000478  B2F0               	btfsc	intcon3,1,c	;volatile
  1541                           
  1542                           ;interrupts.c: 105: INTCON3bits.INT2IF = 0;
  1543  00047A  92F0               	bcf	intcon3,1,c	;volatile
  1544  00047C                     i2l86:
  1545  00047C  C04D  F056         	movff	??_high_isr+18,btemp+3
  1546  000480  C04C  F055         	movff	??_high_isr+17,btemp+2
  1547  000484  C04B  F054         	movff	??_high_isr+16,btemp+1
  1548  000488  C04A  F053         	movff	??_high_isr+15,btemp
  1549  00048C  C049  FFF5         	movff	??_high_isr+14,tablat
  1550  000490  C048  FFF8         	movff	??_high_isr+13,tblptru
  1551  000494  C047  FFF7         	movff	??_high_isr+12,tblptrh
  1552  000498  C046  FFF6         	movff	??_high_isr+11,tblptrl
  1553  00049C  C045  FFF4         	movff	??_high_isr+10,prodh
  1554  0004A0  C044  FFF3         	movff	??_high_isr+9,prodl
  1555  0004A4  C043  FFDA         	movff	??_high_isr+8,fsr2h
  1556  0004A8  C042  FFD9         	movff	??_high_isr+7,fsr2l
  1557  0004AC  C041  FFE2         	movff	??_high_isr+6,fsr1h
  1558  0004B0  C040  FFE1         	movff	??_high_isr+5,fsr1l
  1559  0004B4  C03F  FFEA         	movff	??_high_isr+4,fsr0h
  1560  0004B8  C03E  FFE9         	movff	??_high_isr+3,fsr0l
  1561  0004BC  C03D  FFFB         	movff	??_high_isr+2,pclatu
  1562  0004C0  C03C  FFFA         	movff	??_high_isr+1,pclath
  1563  0004C4  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1564  0004C6  0011               	retfie		f
  1565  0004C8                     __end_of_high_isr:
  1566                           	opt stack 0
  1567  0000                     pclatu	equ	0xFFB
  1568                           pclath	equ	0xFFA
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           prodh	equ	0xFF4
  1574                           prodl	equ	0xFF3
  1575                           intcon	equ	0xFF2
  1576                           intcon2	equ	0xFF1
  1577                           intcon3	equ	0xFF0
  1578                           postinc0	equ	0xFEE
  1579                           fsr0h	equ	0xFEA
  1580                           fsr0l	equ	0xFE9
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1h	equ	0xFE2
  1584                           fsr1l	equ	0xFE1
  1585                           indf2	equ	0xFDF
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           pclatu	equ	0xFFB
  1590                           pclath	equ	0xFFA
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           prodh	equ	0xFF4
  1596                           prodl	equ	0xFF3
  1597                           intcon	equ	0xFF2
  1598                           intcon2	equ	0xFF1
  1599                           intcon3	equ	0xFF0
  1600                           postinc0	equ	0xFEE
  1601                           fsr0h	equ	0xFEA
  1602                           fsr0l	equ	0xFE9
  1603                           wreg	equ	0xFE8
  1604                           postdec1	equ	0xFE5
  1605                           fsr1h	equ	0xFE2
  1606                           fsr1l	equ	0xFE1
  1607                           indf2	equ	0xFDF
  1608                           fsr2h	equ	0xFDA
  1609                           fsr2l	equ	0xFD9
  1610                           status	equ	0xFD8
  1611                           
  1612                           	psect	rparam
  1613  0000                     pclatu	equ	0xFFB
  1614                           pclath	equ	0xFFA
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           prodh	equ	0xFF4
  1620                           prodl	equ	0xFF3
  1621                           intcon	equ	0xFF2
  1622                           intcon2	equ	0xFF1
  1623                           intcon3	equ	0xFF0
  1624                           postinc0	equ	0xFEE
  1625                           fsr0h	equ	0xFEA
  1626                           fsr0l	equ	0xFE9
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1h	equ	0xFE2
  1630                           fsr1l	equ	0xFE1
  1631                           indf2	equ	0xFDF
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636                           	psect	temp
  1637  000053                     btemp:
  1638                           	opt stack 0
  1639  000053                     	ds	1
  1640  0000                     int$flags	set	btemp
  1641  0000                     wtemp6	set	btemp+1
  1642                           pclatu	equ	0xFFB
  1643                           pclath	equ	0xFFA
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           intcon	equ	0xFF2
  1651                           intcon2	equ	0xFF1
  1652                           intcon3	equ	0xFF0
  1653                           postinc0	equ	0xFEE
  1654                           fsr0h	equ	0xFEA
  1655                           fsr0l	equ	0xFE9
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1h	equ	0xFE2
  1659                           fsr1l	equ	0xFE1
  1660                           indf2	equ	0xFDF
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         58
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     19      82
    BANK0           160      8       8
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___wmul

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2392
                                              6 BANK0      2     2      0
                _ConfigureOscillator
                            _InitApp
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    2392
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _high_isr                                            19    19      0       0
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___wmul

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8       8       5        5.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     13      52       1       87.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      20        0.0%
DATA                 0      0      5A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 14 10:33:51 2019

                           _n 002F           ___wmul@multiplicand 0062                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l150 001A                           l151 028E  
                         l152 0094                           l154 0268                           l157 027C  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                  __CFG_CPD$OFF 000000  
                         u805 0048                           u806 004A                           u907 029A  
                         u775 002A                           u880 02B8                           u776 002C  
                         u785 0034                           _RX9 007D5E                           u786 0036  
                         u795 003E                           u796 0040                           _TX9 007D66  
                         u898 02BC                  __CFG_BOR$OFF 000000                           wreg 000FE8  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          _BRGH 007D62  
                        _CREN 007D5C                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _RCIE 007CED                          i2l63 0406  
                        i2l80 045A                          i2l73 043E                          i2l65 036E  
                        i2l67 03A0                          i2l84 0478                          i2l76 042C  
                        i2l69 03D0                          i2l86 047C                          i2l79 0470  
                        _TMR0 000FD6                          _SPEN 007D5F                          _TXIE 007CEC  
                        _TXIF 007CF4                          _TXEN 007D65                          _SYNC 007D64  
                        _main 0012                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0053  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             __end_of_InitApp 056A                 __CFG_PLLDIV$1 000000                __CFG_CCP2MX$ON 000000  
                       ?_main 003B                         _ADRES 000FC3                         _BRG16 007DC3  
                       _DIR_1 0035                         _DIR_2 0034                         _DIR_3 0033  
                       _DIR_4 0032                         _RCREG 000FAE                         _MOT_1 0052  
                       _MOT_2 003A                         _MOT_3 0039                         _MOT_4 0038  
                       _SPBRG 000FAF                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                 __CFG_USBDIV$1 000000                         _TXREG 000FAD  
         _ConfigureOscillator 05C8                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _speed 0015                         _turns 0017                         pclath 000FFA  
                       tablat 000FF5                         status 000FD8                         wtemp6 0054  
        ?_ConfigureOscillator 003B               __initialization 056A                  __end_of_main 02CE  
                      ??_main 0066                 __activetblptr 000000                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        _CCPR1L 000FBE                        _GODONE 007E11  
                   ??_InitApp 0060         ??_ConfigureOscillator 0060                __CFG_XINST$OFF 000000  
            __end_of_high_isr 04C8                        ___wmul 05A0                        _length 0019  
                      _recibi 0037                        clear_0 0590                        _motor1 0050  
                      _motor2 001F                  __pdataCOMRAM 004E                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0060  
     __end_of__initialization 0596               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
              __pcstackCOMRAM 003B                    __pnvCOMRAM 0052                       ?___wmul 0060  
                     i2u50_40 03BA                       i2u42_40 0354                       i2u51_48 03BC  
                     i2u43_48 0356                       i2u54_40 03EA                       i2u46_40 0388  
                     i2u55_48 03EC                       i2u47_48 038A                     ?_high_isr 003B  
             __CFG_VREGEN$OFF 000000                       _InitApp 04C8                       __Hparam 0000  
                     __Lparam 0000               __size_of___wmul 0028                       _caliber 001D  
             __CFG_STVREN$OFF 000000                       __pcinit 056A                       __ramtop 0800  
                     __ptext0 0012                       __ptext1 05A0                       __ptext2 04C8  
                     __ptext3 05C8                     _T0CONbits 000FD5                       _palabra 0001  
                   _T2CONbits 000FCA                    ??_high_isr 003B                __pintcode_body 02CE  
        end_of_initialization 0596                       int_func 02CE                       postdec1 000FE5  
                     postinc0 000FEE                     _PORTAbits 000F80                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94   __end_of_ConfigureOscillator 05D4                   _CCP1CONbits 000FBD  
              __end_of___wmul 05C8                 __pidataCOMRAM 05D4           start_initialization 056A  
                    ??___wmul 0064              __CFG_LPT1OSC$OFF 000000                   __pbssCOMRAM 0001  
               __pcstackBANK0 0060             __size_of_high_isr 04C0                      ?_InitApp 003B  
                   __pintcode 0008                     _busy_flag 0031                ___wmul@product 0064  
                    _LATAbits 000F89                      _LATBbits 000F8A                      _LATCbits 000F8B  
                    _PIE1bits 000F9D                      _RA0state 0036                      _PIR1bits 000F9E  
                    _RCONbits 000FD0              __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0060                      _PWM_duty 004E               _ADC_value_press 002B  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 057E  
            __size_of_InitApp 00A2                      __Hrparam 0000                      __Lrparam 0000  
                    _diameter 001B                      _high_isr 0008                 __size_of_main 02BC  
__size_of_ConfigureOscillator 000C                      _overflow 002D                      int$flags 0053  
              _ADC_value_dist 0029         __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2  
                 _MOT_1_count 0027                   _MOT_2_count 0025                   _MOT_3_count 0023  
                 _MOT_4_count 0021                      intlevel2 0000                    _OSCCONbits 000FD3  
         __CFG_FOSC$INTOSC_EC 000000  
